
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200011a0 	.word	0x200011a0
}
   4:	00003229 	.word	0x00003229
   8:	00006449 	.word	0x00006449
   c:	00003259 	.word	0x00003259
  10:	00003259 	.word	0x00003259
  14:	00003259 	.word	0x00003259
  18:	00003259 	.word	0x00003259
	...
  2c:	00003035 	.word	0x00003035
  30:	00003259 	.word	0x00003259
  34:	00000000 	.word	0x00000000
  38:	00002fe1 	.word	0x00002fe1
  3c:	0000625f 	.word	0x0000625f

00000040 <_irq_vector_table>:
  40:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  50:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  60:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  70:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  80:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  90:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  a0:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  b0:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  c0:	000031e9 000031e9 000031e9 000031e9     .1...1...1...1..
  d0:	000031e9 000031e9 000031e9              .1...1...1..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
      e4:	e002      	b.n	ec <__adddf3>
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
      ec:	b530      	push	{r4, r5, lr}
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
      fa:	bf08      	it	eq
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
     12e:	ea82 0000 	eor.w	r0, r2, r0
     132:	ea83 0101 	eor.w	r1, r3, r1
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x54>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x72>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_FLASH_SIZE+0x12c>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_FLASH_SIZE+0x13a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_FLASH_SIZE+0x11c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_LSM6DSL_THREAD_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_LSM6DSL_THREAD_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x88>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <__aeabi_dmul+0x1dc>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <__aeabi_dmul+0xb4>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <__aeabi_dmul+0xde>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <__aeabi_dmul+0x238>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <__aeabi_dmul+0x164>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <__aeabi_dmul+0x134>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <__aeabi_dmul+0x1c2>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <__aeabi_dmul+0x1a6>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <__aeabi_dmul+0x1c6>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <__aeabi_dmul+0x206>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <__aeabi_dmul+0x19c>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <__aeabi_dmul+0x24a>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <__aeabi_dmul+0x222>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <__aeabi_dmul+0x24a>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <__aeabi_dmul+0x234>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <__aeabi_dmul+0x24a>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <__aeabi_dmul+0xde>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <__aeabi_dmul+0xde>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <__aeabi_dmul+0xde>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <__aeabi_dmul+0x24a>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <__aeabi_dmul+0x24a>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <__aeabi_dmul+0x234>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <__aeabi_dmul+0x24a>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <__aeabi_dmul+0x1f8>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <__aeabi_dmul+0x24a>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <__aeabi_dmul+0x19c>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <__aeabi_dmul+0x234>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <__aeabi_dmul+0x1f8>
     87a:	e712      	b.n	6a2 <__aeabi_dmul+0x24a>

0000087c <__aeabi_d2iz>:
     87c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     884:	d215      	bcs.n	8b2 <__aeabi_d2iz+0x36>
     886:	d511      	bpl.n	8ac <__aeabi_d2iz+0x30>
     888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     88c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     890:	d912      	bls.n	8b8 <__aeabi_d2iz+0x3c>
     892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     89a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     89e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8a2:	fa23 f002 	lsr.w	r0, r3, r2
     8a6:	bf18      	it	ne
     8a8:	4240      	negne	r0, r0
     8aa:	4770      	bx	lr
     8ac:	f04f 0000 	mov.w	r0, #0
     8b0:	4770      	bx	lr
     8b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8b6:	d105      	bne.n	8c4 <__aeabi_d2iz+0x48>
     8b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8bc:	bf08      	it	eq
     8be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8c2:	4770      	bx	lr
     8c4:	f04f 0000 	mov.w	r0, #0
     8c8:	4770      	bx	lr
     8ca:	bf00      	nop

000008cc <__aeabi_d2f>:
     8cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8d4:	bf24      	itt	cs
     8d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8de:	d90d      	bls.n	8fc <__aeabi_d2f+0x30>
     8e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8f4:	bf08      	it	eq
     8f6:	f020 0001 	biceq.w	r0, r0, #1
     8fa:	4770      	bx	lr
     8fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     900:	d121      	bne.n	946 <__aeabi_d2f+0x7a>
     902:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     906:	bfbc      	itt	lt
     908:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     90c:	4770      	bxlt	lr
     90e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     912:	ea4f 5252 	mov.w	r2, r2, lsr #21
     916:	f1c2 0218 	rsb	r2, r2, #24
     91a:	f1c2 0c20 	rsb	ip, r2, #32
     91e:	fa10 f30c 	lsls.w	r3, r0, ip
     922:	fa20 f002 	lsr.w	r0, r0, r2
     926:	bf18      	it	ne
     928:	f040 0001 	orrne.w	r0, r0, #1
     92c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     930:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     934:	fa03 fc0c 	lsl.w	ip, r3, ip
     938:	ea40 000c 	orr.w	r0, r0, ip
     93c:	fa23 f302 	lsr.w	r3, r3, r2
     940:	ea4f 0343 	mov.w	r3, r3, lsl #1
     944:	e7cc      	b.n	8e0 <__aeabi_d2f+0x14>
     946:	ea7f 5362 	mvns.w	r3, r2, asr #21
     94a:	d107      	bne.n	95c <__aeabi_d2f+0x90>
     94c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     950:	bf1e      	ittt	ne
     952:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     956:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     95a:	4770      	bxne	lr
     95c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     960:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     964:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     968:	4770      	bx	lr
     96a:	bf00      	nop

0000096c <__aeabi_frsub>:
     96c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     970:	e002      	b.n	978 <__addsf3>
     972:	bf00      	nop

00000974 <__aeabi_fsub>:
     974:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000978 <__addsf3>:
     978:	0042      	lsls	r2, r0, #1
     97a:	bf1f      	itttt	ne
     97c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     980:	ea92 0f03 	teqne	r2, r3
     984:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     988:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     98c:	d06a      	beq.n	a64 <__addsf3+0xec>
     98e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     992:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     996:	bfc1      	itttt	gt
     998:	18d2      	addgt	r2, r2, r3
     99a:	4041      	eorgt	r1, r0
     99c:	4048      	eorgt	r0, r1
     99e:	4041      	eorgt	r1, r0
     9a0:	bfb8      	it	lt
     9a2:	425b      	neglt	r3, r3
     9a4:	2b19      	cmp	r3, #25
     9a6:	bf88      	it	hi
     9a8:	4770      	bxhi	lr
     9aa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     9ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9b6:	bf18      	it	ne
     9b8:	4240      	negne	r0, r0
     9ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9be:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     9c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     9c6:	bf18      	it	ne
     9c8:	4249      	negne	r1, r1
     9ca:	ea92 0f03 	teq	r2, r3
     9ce:	d03f      	beq.n	a50 <__addsf3+0xd8>
     9d0:	f1a2 0201 	sub.w	r2, r2, #1
     9d4:	fa41 fc03 	asr.w	ip, r1, r3
     9d8:	eb10 000c 	adds.w	r0, r0, ip
     9dc:	f1c3 0320 	rsb	r3, r3, #32
     9e0:	fa01 f103 	lsl.w	r1, r1, r3
     9e4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     9e8:	d502      	bpl.n	9f0 <__addsf3+0x78>
     9ea:	4249      	negs	r1, r1
     9ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     9f0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     9f4:	d313      	bcc.n	a1e <__addsf3+0xa6>
     9f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     9fa:	d306      	bcc.n	a0a <__addsf3+0x92>
     9fc:	0840      	lsrs	r0, r0, #1
     9fe:	ea4f 0131 	mov.w	r1, r1, rrx
     a02:	f102 0201 	add.w	r2, r2, #1
     a06:	2afe      	cmp	r2, #254	; 0xfe
     a08:	d251      	bcs.n	aae <__addsf3+0x136>
     a0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     a0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     a12:	bf08      	it	eq
     a14:	f020 0001 	biceq.w	r0, r0, #1
     a18:	ea40 0003 	orr.w	r0, r0, r3
     a1c:	4770      	bx	lr
     a1e:	0049      	lsls	r1, r1, #1
     a20:	eb40 0000 	adc.w	r0, r0, r0
     a24:	3a01      	subs	r2, #1
     a26:	bf28      	it	cs
     a28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     a2c:	d2ed      	bcs.n	a0a <__addsf3+0x92>
     a2e:	fab0 fc80 	clz	ip, r0
     a32:	f1ac 0c08 	sub.w	ip, ip, #8
     a36:	ebb2 020c 	subs.w	r2, r2, ip
     a3a:	fa00 f00c 	lsl.w	r0, r0, ip
     a3e:	bfaa      	itet	ge
     a40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a44:	4252      	neglt	r2, r2
     a46:	4318      	orrge	r0, r3
     a48:	bfbc      	itt	lt
     a4a:	40d0      	lsrlt	r0, r2
     a4c:	4318      	orrlt	r0, r3
     a4e:	4770      	bx	lr
     a50:	f092 0f00 	teq	r2, #0
     a54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a58:	bf06      	itte	eq
     a5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a5e:	3201      	addeq	r2, #1
     a60:	3b01      	subne	r3, #1
     a62:	e7b5      	b.n	9d0 <__addsf3+0x58>
     a64:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a6c:	bf18      	it	ne
     a6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a72:	d021      	beq.n	ab8 <__addsf3+0x140>
     a74:	ea92 0f03 	teq	r2, r3
     a78:	d004      	beq.n	a84 <__addsf3+0x10c>
     a7a:	f092 0f00 	teq	r2, #0
     a7e:	bf08      	it	eq
     a80:	4608      	moveq	r0, r1
     a82:	4770      	bx	lr
     a84:	ea90 0f01 	teq	r0, r1
     a88:	bf1c      	itt	ne
     a8a:	2000      	movne	r0, #0
     a8c:	4770      	bxne	lr
     a8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a92:	d104      	bne.n	a9e <__addsf3+0x126>
     a94:	0040      	lsls	r0, r0, #1
     a96:	bf28      	it	cs
     a98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a9c:	4770      	bx	lr
     a9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     aa2:	bf3c      	itt	cc
     aa4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     aa8:	4770      	bxcc	lr
     aaa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     aae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     ab2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ab6:	4770      	bx	lr
     ab8:	ea7f 6222 	mvns.w	r2, r2, asr #24
     abc:	bf16      	itet	ne
     abe:	4608      	movne	r0, r1
     ac0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     ac4:	4601      	movne	r1, r0
     ac6:	0242      	lsls	r2, r0, #9
     ac8:	bf06      	itte	eq
     aca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     ace:	ea90 0f01 	teqeq	r0, r1
     ad2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     ad6:	4770      	bx	lr

00000ad8 <__aeabi_ui2f>:
     ad8:	f04f 0300 	mov.w	r3, #0
     adc:	e004      	b.n	ae8 <__aeabi_i2f+0x8>
     ade:	bf00      	nop

00000ae0 <__aeabi_i2f>:
     ae0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ae4:	bf48      	it	mi
     ae6:	4240      	negmi	r0, r0
     ae8:	ea5f 0c00 	movs.w	ip, r0
     aec:	bf08      	it	eq
     aee:	4770      	bxeq	lr
     af0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     af4:	4601      	mov	r1, r0
     af6:	f04f 0000 	mov.w	r0, #0
     afa:	e01c      	b.n	b36 <__aeabi_l2f+0x2a>

00000afc <__aeabi_ul2f>:
     afc:	ea50 0201 	orrs.w	r2, r0, r1
     b00:	bf08      	it	eq
     b02:	4770      	bxeq	lr
     b04:	f04f 0300 	mov.w	r3, #0
     b08:	e00a      	b.n	b20 <__aeabi_l2f+0x14>
     b0a:	bf00      	nop

00000b0c <__aeabi_l2f>:
     b0c:	ea50 0201 	orrs.w	r2, r0, r1
     b10:	bf08      	it	eq
     b12:	4770      	bxeq	lr
     b14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     b18:	d502      	bpl.n	b20 <__aeabi_l2f+0x14>
     b1a:	4240      	negs	r0, r0
     b1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b20:	ea5f 0c01 	movs.w	ip, r1
     b24:	bf02      	ittt	eq
     b26:	4684      	moveq	ip, r0
     b28:	4601      	moveq	r1, r0
     b2a:	2000      	moveq	r0, #0
     b2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b30:	bf08      	it	eq
     b32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b3a:	fabc f28c 	clz	r2, ip
     b3e:	3a08      	subs	r2, #8
     b40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b44:	db10      	blt.n	b68 <__aeabi_l2f+0x5c>
     b46:	fa01 fc02 	lsl.w	ip, r1, r2
     b4a:	4463      	add	r3, ip
     b4c:	fa00 fc02 	lsl.w	ip, r0, r2
     b50:	f1c2 0220 	rsb	r2, r2, #32
     b54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b58:	fa20 f202 	lsr.w	r2, r0, r2
     b5c:	eb43 0002 	adc.w	r0, r3, r2
     b60:	bf08      	it	eq
     b62:	f020 0001 	biceq.w	r0, r0, #1
     b66:	4770      	bx	lr
     b68:	f102 0220 	add.w	r2, r2, #32
     b6c:	fa01 fc02 	lsl.w	ip, r1, r2
     b70:	f1c2 0220 	rsb	r2, r2, #32
     b74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b78:	fa21 f202 	lsr.w	r2, r1, r2
     b7c:	eb43 0002 	adc.w	r0, r3, r2
     b80:	bf08      	it	eq
     b82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b86:	4770      	bx	lr

00000b88 <__aeabi_fmul>:
     b88:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     b90:	bf1e      	ittt	ne
     b92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     b96:	ea92 0f0c 	teqne	r2, ip
     b9a:	ea93 0f0c 	teqne	r3, ip
     b9e:	d06f      	beq.n	c80 <__aeabi_fmul+0xf8>
     ba0:	441a      	add	r2, r3
     ba2:	ea80 0c01 	eor.w	ip, r0, r1
     ba6:	0240      	lsls	r0, r0, #9
     ba8:	bf18      	it	ne
     baa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     bae:	d01e      	beq.n	bee <__aeabi_fmul+0x66>
     bb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     bb4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     bb8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     bbc:	fba0 3101 	umull	r3, r1, r0, r1
     bc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     bc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     bc8:	bf3e      	ittt	cc
     bca:	0049      	lslcc	r1, r1, #1
     bcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     bd0:	005b      	lslcc	r3, r3, #1
     bd2:	ea40 0001 	orr.w	r0, r0, r1
     bd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     bda:	2afd      	cmp	r2, #253	; 0xfd
     bdc:	d81d      	bhi.n	c1a <__aeabi_fmul+0x92>
     bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     be6:	bf08      	it	eq
     be8:	f020 0001 	biceq.w	r0, r0, #1
     bec:	4770      	bx	lr
     bee:	f090 0f00 	teq	r0, #0
     bf2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     bf6:	bf08      	it	eq
     bf8:	0249      	lsleq	r1, r1, #9
     bfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     bfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     c02:	3a7f      	subs	r2, #127	; 0x7f
     c04:	bfc2      	ittt	gt
     c06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     c0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     c0e:	4770      	bxgt	lr
     c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c14:	f04f 0300 	mov.w	r3, #0
     c18:	3a01      	subs	r2, #1
     c1a:	dc5d      	bgt.n	cd8 <__aeabi_fmul+0x150>
     c1c:	f112 0f19 	cmn.w	r2, #25
     c20:	bfdc      	itt	le
     c22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     c26:	4770      	bxle	lr
     c28:	f1c2 0200 	rsb	r2, r2, #0
     c2c:	0041      	lsls	r1, r0, #1
     c2e:	fa21 f102 	lsr.w	r1, r1, r2
     c32:	f1c2 0220 	rsb	r2, r2, #32
     c36:	fa00 fc02 	lsl.w	ip, r0, r2
     c3a:	ea5f 0031 	movs.w	r0, r1, rrx
     c3e:	f140 0000 	adc.w	r0, r0, #0
     c42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     c46:	bf08      	it	eq
     c48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c4c:	4770      	bx	lr
     c4e:	f092 0f00 	teq	r2, #0
     c52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c56:	bf02      	ittt	eq
     c58:	0040      	lsleq	r0, r0, #1
     c5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c5e:	3a01      	subeq	r2, #1
     c60:	d0f9      	beq.n	c56 <__aeabi_fmul+0xce>
     c62:	ea40 000c 	orr.w	r0, r0, ip
     c66:	f093 0f00 	teq	r3, #0
     c6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c6e:	bf02      	ittt	eq
     c70:	0049      	lsleq	r1, r1, #1
     c72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c76:	3b01      	subeq	r3, #1
     c78:	d0f9      	beq.n	c6e <__aeabi_fmul+0xe6>
     c7a:	ea41 010c 	orr.w	r1, r1, ip
     c7e:	e78f      	b.n	ba0 <__aeabi_fmul+0x18>
     c80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     c84:	ea92 0f0c 	teq	r2, ip
     c88:	bf18      	it	ne
     c8a:	ea93 0f0c 	teqne	r3, ip
     c8e:	d00a      	beq.n	ca6 <__aeabi_fmul+0x11e>
     c90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     c94:	bf18      	it	ne
     c96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     c9a:	d1d8      	bne.n	c4e <__aeabi_fmul+0xc6>
     c9c:	ea80 0001 	eor.w	r0, r0, r1
     ca0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     ca4:	4770      	bx	lr
     ca6:	f090 0f00 	teq	r0, #0
     caa:	bf17      	itett	ne
     cac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     cb0:	4608      	moveq	r0, r1
     cb2:	f091 0f00 	teqne	r1, #0
     cb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     cba:	d014      	beq.n	ce6 <__aeabi_fmul+0x15e>
     cbc:	ea92 0f0c 	teq	r2, ip
     cc0:	d101      	bne.n	cc6 <__aeabi_fmul+0x13e>
     cc2:	0242      	lsls	r2, r0, #9
     cc4:	d10f      	bne.n	ce6 <__aeabi_fmul+0x15e>
     cc6:	ea93 0f0c 	teq	r3, ip
     cca:	d103      	bne.n	cd4 <__aeabi_fmul+0x14c>
     ccc:	024b      	lsls	r3, r1, #9
     cce:	bf18      	it	ne
     cd0:	4608      	movne	r0, r1
     cd2:	d108      	bne.n	ce6 <__aeabi_fmul+0x15e>
     cd4:	ea80 0001 	eor.w	r0, r0, r1
     cd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ce4:	4770      	bx	lr
     ce6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     cea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     cee:	4770      	bx	lr

00000cf0 <__aeabi_fdiv>:
     cf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     cf4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     cf8:	bf1e      	ittt	ne
     cfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     cfe:	ea92 0f0c 	teqne	r2, ip
     d02:	ea93 0f0c 	teqne	r3, ip
     d06:	d069      	beq.n	ddc <__aeabi_fdiv+0xec>
     d08:	eba2 0203 	sub.w	r2, r2, r3
     d0c:	ea80 0c01 	eor.w	ip, r0, r1
     d10:	0249      	lsls	r1, r1, #9
     d12:	ea4f 2040 	mov.w	r0, r0, lsl #9
     d16:	d037      	beq.n	d88 <__aeabi_fdiv+0x98>
     d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     d1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     d20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     d24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d28:	428b      	cmp	r3, r1
     d2a:	bf38      	it	cc
     d2c:	005b      	lslcc	r3, r3, #1
     d2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d36:	428b      	cmp	r3, r1
     d38:	bf24      	itt	cs
     d3a:	1a5b      	subcs	r3, r3, r1
     d3c:	ea40 000c 	orrcs.w	r0, r0, ip
     d40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     d44:	bf24      	itt	cs
     d46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     d4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     d4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     d52:	bf24      	itt	cs
     d54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     d58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     d5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     d60:	bf24      	itt	cs
     d62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     d66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     d6a:	011b      	lsls	r3, r3, #4
     d6c:	bf18      	it	ne
     d6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     d72:	d1e0      	bne.n	d36 <__aeabi_fdiv+0x46>
     d74:	2afd      	cmp	r2, #253	; 0xfd
     d76:	f63f af50 	bhi.w	c1a <__aeabi_fmul+0x92>
     d7a:	428b      	cmp	r3, r1
     d7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d80:	bf08      	it	eq
     d82:	f020 0001 	biceq.w	r0, r0, #1
     d86:	4770      	bx	lr
     d88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d90:	327f      	adds	r2, #127	; 0x7f
     d92:	bfc2      	ittt	gt
     d94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d9c:	4770      	bxgt	lr
     d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     da2:	f04f 0300 	mov.w	r3, #0
     da6:	3a01      	subs	r2, #1
     da8:	e737      	b.n	c1a <__aeabi_fmul+0x92>
     daa:	f092 0f00 	teq	r2, #0
     dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     db2:	bf02      	ittt	eq
     db4:	0040      	lsleq	r0, r0, #1
     db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     dba:	3a01      	subeq	r2, #1
     dbc:	d0f9      	beq.n	db2 <__aeabi_fdiv+0xc2>
     dbe:	ea40 000c 	orr.w	r0, r0, ip
     dc2:	f093 0f00 	teq	r3, #0
     dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     dca:	bf02      	ittt	eq
     dcc:	0049      	lsleq	r1, r1, #1
     dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     dd2:	3b01      	subeq	r3, #1
     dd4:	d0f9      	beq.n	dca <__aeabi_fdiv+0xda>
     dd6:	ea41 010c 	orr.w	r1, r1, ip
     dda:	e795      	b.n	d08 <__aeabi_fdiv+0x18>
     ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     de0:	ea92 0f0c 	teq	r2, ip
     de4:	d108      	bne.n	df8 <__aeabi_fdiv+0x108>
     de6:	0242      	lsls	r2, r0, #9
     de8:	f47f af7d 	bne.w	ce6 <__aeabi_fmul+0x15e>
     dec:	ea93 0f0c 	teq	r3, ip
     df0:	f47f af70 	bne.w	cd4 <__aeabi_fmul+0x14c>
     df4:	4608      	mov	r0, r1
     df6:	e776      	b.n	ce6 <__aeabi_fmul+0x15e>
     df8:	ea93 0f0c 	teq	r3, ip
     dfc:	d104      	bne.n	e08 <__aeabi_fdiv+0x118>
     dfe:	024b      	lsls	r3, r1, #9
     e00:	f43f af4c 	beq.w	c9c <__aeabi_fmul+0x114>
     e04:	4608      	mov	r0, r1
     e06:	e76e      	b.n	ce6 <__aeabi_fmul+0x15e>
     e08:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e0c:	bf18      	it	ne
     e0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e12:	d1ca      	bne.n	daa <__aeabi_fdiv+0xba>
     e14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     e18:	f47f af5c 	bne.w	cd4 <__aeabi_fmul+0x14c>
     e1c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     e20:	f47f af3c 	bne.w	c9c <__aeabi_fmul+0x114>
     e24:	e75f      	b.n	ce6 <__aeabi_fmul+0x15e>
     e26:	bf00      	nop

00000e28 <__gesf2>:
     e28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     e2c:	e006      	b.n	e3c <__cmpsf2+0x4>
     e2e:	bf00      	nop

00000e30 <__lesf2>:
     e30:	f04f 0c01 	mov.w	ip, #1
     e34:	e002      	b.n	e3c <__cmpsf2+0x4>
     e36:	bf00      	nop

00000e38 <__cmpsf2>:
     e38:	f04f 0c01 	mov.w	ip, #1
     e3c:	f84d cd04 	str.w	ip, [sp, #-4]!
     e40:	ea4f 0240 	mov.w	r2, r0, lsl #1
     e44:	ea4f 0341 	mov.w	r3, r1, lsl #1
     e48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     e4c:	bf18      	it	ne
     e4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     e52:	d011      	beq.n	e78 <__cmpsf2+0x40>
     e54:	b001      	add	sp, #4
     e56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     e5a:	bf18      	it	ne
     e5c:	ea90 0f01 	teqne	r0, r1
     e60:	bf58      	it	pl
     e62:	ebb2 0003 	subspl.w	r0, r2, r3
     e66:	bf88      	it	hi
     e68:	17c8      	asrhi	r0, r1, #31
     e6a:	bf38      	it	cc
     e6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     e70:	bf18      	it	ne
     e72:	f040 0001 	orrne.w	r0, r0, #1
     e76:	4770      	bx	lr
     e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     e7c:	d102      	bne.n	e84 <__cmpsf2+0x4c>
     e7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     e82:	d105      	bne.n	e90 <__cmpsf2+0x58>
     e84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     e88:	d1e4      	bne.n	e54 <__cmpsf2+0x1c>
     e8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     e8e:	d0e1      	beq.n	e54 <__cmpsf2+0x1c>
     e90:	f85d 0b04 	ldr.w	r0, [sp], #4
     e94:	4770      	bx	lr
     e96:	bf00      	nop

00000e98 <__aeabi_cfrcmple>:
     e98:	4684      	mov	ip, r0
     e9a:	4608      	mov	r0, r1
     e9c:	4661      	mov	r1, ip
     e9e:	e7ff      	b.n	ea0 <__aeabi_cfcmpeq>

00000ea0 <__aeabi_cfcmpeq>:
     ea0:	b50f      	push	{r0, r1, r2, r3, lr}
     ea2:	f7ff ffc9 	bl	e38 <__cmpsf2>
     ea6:	2800      	cmp	r0, #0
     ea8:	bf48      	it	mi
     eaa:	f110 0f00 	cmnmi.w	r0, #0
     eae:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000eb0 <__aeabi_fcmpeq>:
     eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
     eb4:	f7ff fff4 	bl	ea0 <__aeabi_cfcmpeq>
     eb8:	bf0c      	ite	eq
     eba:	2001      	moveq	r0, #1
     ebc:	2000      	movne	r0, #0
     ebe:	f85d fb08 	ldr.w	pc, [sp], #8
     ec2:	bf00      	nop

00000ec4 <__aeabi_fcmplt>:
     ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ec8:	f7ff ffea 	bl	ea0 <__aeabi_cfcmpeq>
     ecc:	bf34      	ite	cc
     ece:	2001      	movcc	r0, #1
     ed0:	2000      	movcs	r0, #0
     ed2:	f85d fb08 	ldr.w	pc, [sp], #8
     ed6:	bf00      	nop

00000ed8 <__aeabi_fcmple>:
     ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
     edc:	f7ff ffe0 	bl	ea0 <__aeabi_cfcmpeq>
     ee0:	bf94      	ite	ls
     ee2:	2001      	movls	r0, #1
     ee4:	2000      	movhi	r0, #0
     ee6:	f85d fb08 	ldr.w	pc, [sp], #8
     eea:	bf00      	nop

00000eec <__aeabi_fcmpge>:
     eec:	f84d ed08 	str.w	lr, [sp, #-8]!
     ef0:	f7ff ffd2 	bl	e98 <__aeabi_cfrcmple>
     ef4:	bf94      	ite	ls
     ef6:	2001      	movls	r0, #1
     ef8:	2000      	movhi	r0, #0
     efa:	f85d fb08 	ldr.w	pc, [sp], #8
     efe:	bf00      	nop

00000f00 <__aeabi_fcmpgt>:
     f00:	f84d ed08 	str.w	lr, [sp, #-8]!
     f04:	f7ff ffc8 	bl	e98 <__aeabi_cfrcmple>
     f08:	bf34      	ite	cc
     f0a:	2001      	movcc	r0, #1
     f0c:	2000      	movcs	r0, #0
     f0e:	f85d fb08 	ldr.w	pc, [sp], #8
     f12:	bf00      	nop

00000f14 <__aeabi_ldivmod>:
     f14:	b97b      	cbnz	r3, f36 <__aeabi_ldivmod+0x22>
     f16:	b972      	cbnz	r2, f36 <__aeabi_ldivmod+0x22>
     f18:	2900      	cmp	r1, #0
     f1a:	bfbe      	ittt	lt
     f1c:	2000      	movlt	r0, #0
     f1e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     f22:	e006      	blt.n	f32 <__aeabi_ldivmod+0x1e>
     f24:	bf08      	it	eq
     f26:	2800      	cmpeq	r0, #0
     f28:	bf1c      	itt	ne
     f2a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     f2e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     f32:	f000 b9b9 	b.w	12a8 <__aeabi_idiv0>
     f36:	f1ad 0c08 	sub.w	ip, sp, #8
     f3a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     f3e:	2900      	cmp	r1, #0
     f40:	db09      	blt.n	f56 <__aeabi_ldivmod+0x42>
     f42:	2b00      	cmp	r3, #0
     f44:	db1a      	blt.n	f7c <__aeabi_ldivmod+0x68>
     f46:	f000 f84d 	bl	fe4 <__udivmoddi4>
     f4a:	f8dd e004 	ldr.w	lr, [sp, #4]
     f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f52:	b004      	add	sp, #16
     f54:	4770      	bx	lr
     f56:	4240      	negs	r0, r0
     f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     f5c:	2b00      	cmp	r3, #0
     f5e:	db1b      	blt.n	f98 <__aeabi_ldivmod+0x84>
     f60:	f000 f840 	bl	fe4 <__udivmoddi4>
     f64:	f8dd e004 	ldr.w	lr, [sp, #4]
     f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f6c:	b004      	add	sp, #16
     f6e:	4240      	negs	r0, r0
     f70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     f74:	4252      	negs	r2, r2
     f76:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f7a:	4770      	bx	lr
     f7c:	4252      	negs	r2, r2
     f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f82:	f000 f82f 	bl	fe4 <__udivmoddi4>
     f86:	f8dd e004 	ldr.w	lr, [sp, #4]
     f8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     f8e:	b004      	add	sp, #16
     f90:	4240      	negs	r0, r0
     f92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     f96:	4770      	bx	lr
     f98:	4252      	negs	r2, r2
     f9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f9e:	f000 f821 	bl	fe4 <__udivmoddi4>
     fa2:	f8dd e004 	ldr.w	lr, [sp, #4]
     fa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     faa:	b004      	add	sp, #16
     fac:	4252      	negs	r2, r2
     fae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     fb2:	4770      	bx	lr

00000fb4 <__aeabi_uldivmod>:
     fb4:	b953      	cbnz	r3, fcc <__aeabi_uldivmod+0x18>
     fb6:	b94a      	cbnz	r2, fcc <__aeabi_uldivmod+0x18>
     fb8:	2900      	cmp	r1, #0
     fba:	bf08      	it	eq
     fbc:	2800      	cmpeq	r0, #0
     fbe:	bf1c      	itt	ne
     fc0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     fc4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     fc8:	f000 b96e 	b.w	12a8 <__aeabi_idiv0>
     fcc:	f1ad 0c08 	sub.w	ip, sp, #8
     fd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     fd4:	f000 f806 	bl	fe4 <__udivmoddi4>
     fd8:	f8dd e004 	ldr.w	lr, [sp, #4]
     fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     fe0:	b004      	add	sp, #16
     fe2:	4770      	bx	lr

00000fe4 <__udivmoddi4>:
     fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fe8:	9d08      	ldr	r5, [sp, #32]
     fea:	460e      	mov	r6, r1
     fec:	4604      	mov	r4, r0
     fee:	468c      	mov	ip, r1
     ff0:	2b00      	cmp	r3, #0
     ff2:	f040 8081 	bne.w	10f8 <__udivmoddi4+0x114>
     ff6:	428a      	cmp	r2, r1
     ff8:	4617      	mov	r7, r2
     ffa:	d945      	bls.n	1088 <__udivmoddi4+0xa4>
     ffc:	fab2 f282 	clz	r2, r2
    1000:	b14a      	cbz	r2, 1016 <__udivmoddi4+0x32>
    1002:	f1c2 0120 	rsb	r1, r2, #32
    1006:	fa06 f302 	lsl.w	r3, r6, r2
    100a:	fa20 f101 	lsr.w	r1, r0, r1
    100e:	4097      	lsls	r7, r2
    1010:	ea41 0c03 	orr.w	ip, r1, r3
    1014:	4094      	lsls	r4, r2
    1016:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    101a:	0c23      	lsrs	r3, r4, #16
    101c:	fbbc f6fe 	udiv	r6, ip, lr
    1020:	b2b9      	uxth	r1, r7
    1022:	fb0e cc16 	mls	ip, lr, r6, ip
    1026:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    102a:	fb06 f001 	mul.w	r0, r6, r1
    102e:	4298      	cmp	r0, r3
    1030:	d909      	bls.n	1046 <__udivmoddi4+0x62>
    1032:	18fb      	adds	r3, r7, r3
    1034:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
    1038:	f080 8115 	bcs.w	1266 <__udivmoddi4+0x282>
    103c:	4298      	cmp	r0, r3
    103e:	f240 8112 	bls.w	1266 <__udivmoddi4+0x282>
    1042:	3e02      	subs	r6, #2
    1044:	443b      	add	r3, r7
    1046:	1a1b      	subs	r3, r3, r0
    1048:	b2a4      	uxth	r4, r4
    104a:	fbb3 f0fe 	udiv	r0, r3, lr
    104e:	fb0e 3310 	mls	r3, lr, r0, r3
    1052:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1056:	fb00 f101 	mul.w	r1, r0, r1
    105a:	42a1      	cmp	r1, r4
    105c:	d909      	bls.n	1072 <__udivmoddi4+0x8e>
    105e:	193c      	adds	r4, r7, r4
    1060:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    1064:	f080 8101 	bcs.w	126a <__udivmoddi4+0x286>
    1068:	42a1      	cmp	r1, r4
    106a:	f240 80fe 	bls.w	126a <__udivmoddi4+0x286>
    106e:	3802      	subs	r0, #2
    1070:	443c      	add	r4, r7
    1072:	1a64      	subs	r4, r4, r1
    1074:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    1078:	2100      	movs	r1, #0
    107a:	b11d      	cbz	r5, 1084 <__udivmoddi4+0xa0>
    107c:	40d4      	lsrs	r4, r2
    107e:	2300      	movs	r3, #0
    1080:	e9c5 4300 	strd	r4, r3, [r5]
    1084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1088:	b902      	cbnz	r2, 108c <__udivmoddi4+0xa8>
    108a:	deff      	udf	#255	; 0xff
    108c:	fab2 f282 	clz	r2, r2
    1090:	2a00      	cmp	r2, #0
    1092:	d14f      	bne.n	1134 <__udivmoddi4+0x150>
    1094:	1bcb      	subs	r3, r1, r7
    1096:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    109a:	fa1f f887 	uxth.w	r8, r7
    109e:	2101      	movs	r1, #1
    10a0:	fbb3 fcfe 	udiv	ip, r3, lr
    10a4:	0c26      	lsrs	r6, r4, #16
    10a6:	fb0e 331c 	mls	r3, lr, ip, r3
    10aa:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    10ae:	fb08 f30c 	mul.w	r3, r8, ip
    10b2:	42b3      	cmp	r3, r6
    10b4:	d907      	bls.n	10c6 <__udivmoddi4+0xe2>
    10b6:	19be      	adds	r6, r7, r6
    10b8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    10bc:	d202      	bcs.n	10c4 <__udivmoddi4+0xe0>
    10be:	42b3      	cmp	r3, r6
    10c0:	f200 80eb 	bhi.w	129a <__udivmoddi4+0x2b6>
    10c4:	4684      	mov	ip, r0
    10c6:	1af6      	subs	r6, r6, r3
    10c8:	b2a3      	uxth	r3, r4
    10ca:	fbb6 f0fe 	udiv	r0, r6, lr
    10ce:	fb0e 6610 	mls	r6, lr, r0, r6
    10d2:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
    10d6:	fb08 f800 	mul.w	r8, r8, r0
    10da:	45a0      	cmp	r8, r4
    10dc:	d907      	bls.n	10ee <__udivmoddi4+0x10a>
    10de:	193c      	adds	r4, r7, r4
    10e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    10e4:	d202      	bcs.n	10ec <__udivmoddi4+0x108>
    10e6:	45a0      	cmp	r8, r4
    10e8:	f200 80d2 	bhi.w	1290 <__udivmoddi4+0x2ac>
    10ec:	4618      	mov	r0, r3
    10ee:	eba4 0408 	sub.w	r4, r4, r8
    10f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    10f6:	e7c0      	b.n	107a <__udivmoddi4+0x96>
    10f8:	428b      	cmp	r3, r1
    10fa:	d908      	bls.n	110e <__udivmoddi4+0x12a>
    10fc:	2d00      	cmp	r5, #0
    10fe:	f000 80af 	beq.w	1260 <__udivmoddi4+0x27c>
    1102:	2100      	movs	r1, #0
    1104:	e9c5 0600 	strd	r0, r6, [r5]
    1108:	4608      	mov	r0, r1
    110a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    110e:	fab3 f183 	clz	r1, r3
    1112:	2900      	cmp	r1, #0
    1114:	d149      	bne.n	11aa <__udivmoddi4+0x1c6>
    1116:	42b3      	cmp	r3, r6
    1118:	d302      	bcc.n	1120 <__udivmoddi4+0x13c>
    111a:	4282      	cmp	r2, r0
    111c:	f200 80bb 	bhi.w	1296 <__udivmoddi4+0x2b2>
    1120:	1a84      	subs	r4, r0, r2
    1122:	eb66 0303 	sbc.w	r3, r6, r3
    1126:	2001      	movs	r0, #1
    1128:	469c      	mov	ip, r3
    112a:	2d00      	cmp	r5, #0
    112c:	d0aa      	beq.n	1084 <__udivmoddi4+0xa0>
    112e:	e9c5 4c00 	strd	r4, ip, [r5]
    1132:	e7a7      	b.n	1084 <__udivmoddi4+0xa0>
    1134:	f1c2 0320 	rsb	r3, r2, #32
    1138:	4097      	lsls	r7, r2
    113a:	40d8      	lsrs	r0, r3
    113c:	4091      	lsls	r1, r2
    113e:	40de      	lsrs	r6, r3
    1140:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1144:	4308      	orrs	r0, r1
    1146:	ea4f 4c10 	mov.w	ip, r0, lsr #16
    114a:	fbb6 f1fe 	udiv	r1, r6, lr
    114e:	fa1f f887 	uxth.w	r8, r7
    1152:	fb0e 6611 	mls	r6, lr, r1, r6
    1156:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
    115a:	fb01 f308 	mul.w	r3, r1, r8
    115e:	42b3      	cmp	r3, r6
    1160:	fa04 f402 	lsl.w	r4, r4, r2
    1164:	d909      	bls.n	117a <__udivmoddi4+0x196>
    1166:	19be      	adds	r6, r7, r6
    1168:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    116c:	f080 808e 	bcs.w	128c <__udivmoddi4+0x2a8>
    1170:	42b3      	cmp	r3, r6
    1172:	f240 808b 	bls.w	128c <__udivmoddi4+0x2a8>
    1176:	3902      	subs	r1, #2
    1178:	443e      	add	r6, r7
    117a:	1af3      	subs	r3, r6, r3
    117c:	b286      	uxth	r6, r0
    117e:	fbb3 f0fe 	udiv	r0, r3, lr
    1182:	fb0e 3310 	mls	r3, lr, r0, r3
    1186:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    118a:	fb00 f308 	mul.w	r3, r0, r8
    118e:	42b3      	cmp	r3, r6
    1190:	d907      	bls.n	11a2 <__udivmoddi4+0x1be>
    1192:	19be      	adds	r6, r7, r6
    1194:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    1198:	d274      	bcs.n	1284 <__udivmoddi4+0x2a0>
    119a:	42b3      	cmp	r3, r6
    119c:	d972      	bls.n	1284 <__udivmoddi4+0x2a0>
    119e:	3802      	subs	r0, #2
    11a0:	443e      	add	r6, r7
    11a2:	1af3      	subs	r3, r6, r3
    11a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    11a8:	e77a      	b.n	10a0 <__udivmoddi4+0xbc>
    11aa:	f1c1 0720 	rsb	r7, r1, #32
    11ae:	fa03 f401 	lsl.w	r4, r3, r1
    11b2:	fa22 f307 	lsr.w	r3, r2, r7
    11b6:	431c      	orrs	r4, r3
    11b8:	fa20 f907 	lsr.w	r9, r0, r7
    11bc:	fa06 f301 	lsl.w	r3, r6, r1
    11c0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    11c4:	40fe      	lsrs	r6, r7
    11c6:	ea49 0903 	orr.w	r9, r9, r3
    11ca:	ea4f 4319 	mov.w	r3, r9, lsr #16
    11ce:	fbb6 fefc 	udiv	lr, r6, ip
    11d2:	fa1f f884 	uxth.w	r8, r4
    11d6:	fb0c 661e 	mls	r6, ip, lr, r6
    11da:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
    11de:	fb0e fa08 	mul.w	sl, lr, r8
    11e2:	45b2      	cmp	sl, r6
    11e4:	fa02 f201 	lsl.w	r2, r2, r1
    11e8:	fa00 f301 	lsl.w	r3, r0, r1
    11ec:	d908      	bls.n	1200 <__udivmoddi4+0x21c>
    11ee:	19a6      	adds	r6, r4, r6
    11f0:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
    11f4:	d248      	bcs.n	1288 <__udivmoddi4+0x2a4>
    11f6:	45b2      	cmp	sl, r6
    11f8:	d946      	bls.n	1288 <__udivmoddi4+0x2a4>
    11fa:	f1ae 0e02 	sub.w	lr, lr, #2
    11fe:	4426      	add	r6, r4
    1200:	eba6 060a 	sub.w	r6, r6, sl
    1204:	fa1f f989 	uxth.w	r9, r9
    1208:	fbb6 f0fc 	udiv	r0, r6, ip
    120c:	fb0c 6610 	mls	r6, ip, r0, r6
    1210:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
    1214:	fb00 f808 	mul.w	r8, r0, r8
    1218:	45b0      	cmp	r8, r6
    121a:	d907      	bls.n	122c <__udivmoddi4+0x248>
    121c:	19a6      	adds	r6, r4, r6
    121e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    1222:	d22d      	bcs.n	1280 <__udivmoddi4+0x29c>
    1224:	45b0      	cmp	r8, r6
    1226:	d92b      	bls.n	1280 <__udivmoddi4+0x29c>
    1228:	3802      	subs	r0, #2
    122a:	4426      	add	r6, r4
    122c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    1230:	eba6 0608 	sub.w	r6, r6, r8
    1234:	fba0 8902 	umull	r8, r9, r0, r2
    1238:	454e      	cmp	r6, r9
    123a:	46c4      	mov	ip, r8
    123c:	46ce      	mov	lr, r9
    123e:	d318      	bcc.n	1272 <__udivmoddi4+0x28e>
    1240:	d015      	beq.n	126e <__udivmoddi4+0x28a>
    1242:	b375      	cbz	r5, 12a2 <__udivmoddi4+0x2be>
    1244:	ebb3 020c 	subs.w	r2, r3, ip
    1248:	eb66 060e 	sbc.w	r6, r6, lr
    124c:	fa06 f707 	lsl.w	r7, r6, r7
    1250:	fa22 f301 	lsr.w	r3, r2, r1
    1254:	40ce      	lsrs	r6, r1
    1256:	431f      	orrs	r7, r3
    1258:	e9c5 7600 	strd	r7, r6, [r5]
    125c:	2100      	movs	r1, #0
    125e:	e711      	b.n	1084 <__udivmoddi4+0xa0>
    1260:	4629      	mov	r1, r5
    1262:	4628      	mov	r0, r5
    1264:	e70e      	b.n	1084 <__udivmoddi4+0xa0>
    1266:	4666      	mov	r6, ip
    1268:	e6ed      	b.n	1046 <__udivmoddi4+0x62>
    126a:	4618      	mov	r0, r3
    126c:	e701      	b.n	1072 <__udivmoddi4+0x8e>
    126e:	4543      	cmp	r3, r8
    1270:	d2e7      	bcs.n	1242 <__udivmoddi4+0x25e>
    1272:	ebb8 0c02 	subs.w	ip, r8, r2
    1276:	eb69 0404 	sbc.w	r4, r9, r4
    127a:	3801      	subs	r0, #1
    127c:	46a6      	mov	lr, r4
    127e:	e7e0      	b.n	1242 <__udivmoddi4+0x25e>
    1280:	4660      	mov	r0, ip
    1282:	e7d3      	b.n	122c <__udivmoddi4+0x248>
    1284:	4660      	mov	r0, ip
    1286:	e78c      	b.n	11a2 <__udivmoddi4+0x1be>
    1288:	4686      	mov	lr, r0
    128a:	e7b9      	b.n	1200 <__udivmoddi4+0x21c>
    128c:	4661      	mov	r1, ip
    128e:	e774      	b.n	117a <__udivmoddi4+0x196>
    1290:	3802      	subs	r0, #2
    1292:	443c      	add	r4, r7
    1294:	e72b      	b.n	10ee <__udivmoddi4+0x10a>
    1296:	4608      	mov	r0, r1
    1298:	e747      	b.n	112a <__udivmoddi4+0x146>
    129a:	f1ac 0c02 	sub.w	ip, ip, #2
    129e:	443e      	add	r6, r7
    12a0:	e711      	b.n	10c6 <__udivmoddi4+0xe2>
    12a2:	4629      	mov	r1, r5
    12a4:	e6ee      	b.n	1084 <__udivmoddi4+0xa0>
    12a6:	bf00      	nop

000012a8 <__aeabi_idiv0>:
    12a8:	4770      	bx	lr
    12aa:	bf00      	nop
    12ac:	0000      	movs	r0, r0
	...

000012b0 <sensor_value_to_double>:
 *
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
    12b0:	b5d0      	push	{r4, r6, r7, lr}
    12b2:	4604      	mov	r4, r0
	return (double)val->val1 + (double)val->val2 / 1000000;
    12b4:	6840      	ldr	r0, [r0, #4]
    12b6:	f7ff f865 	bl	384 <__aeabi_i2d>
    12ba:	a309      	add	r3, pc, #36	; (adr r3, 12e0 <sensor_value_to_double+0x30>)
    12bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    12c0:	f7ff f9f4 	bl	6ac <__aeabi_ddiv>
    12c4:	4606      	mov	r6, r0
    12c6:	6820      	ldr	r0, [r4, #0]
    12c8:	460f      	mov	r7, r1
    12ca:	f7ff f85b 	bl	384 <__aeabi_i2d>
    12ce:	4602      	mov	r2, r0
    12d0:	460b      	mov	r3, r1
    12d2:	4630      	mov	r0, r6
    12d4:	4639      	mov	r1, r7
    12d6:	f7fe ff09 	bl	ec <__adddf3>
}
    12da:	bdd0      	pop	{r4, r6, r7, pc}
    12dc:	f3af 8000 	nop.w
    12e0:	00000000 	.word	0x00000000
    12e4:	412e8480 	.word	0x412e8480

000012e8 <lis2dh_attr_set>:

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
	switch (chan) {
    12e8:	2903      	cmp	r1, #3
{
    12ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    12ec:	4606      	mov	r6, r0
    12ee:	4614      	mov	r4, r2
	switch (chan) {
    12f0:	d85c      	bhi.n	13ac <lis2dh_attr_set+0xc4>
	switch (attr) {
    12f2:	2a00      	cmp	r2, #0
    12f4:	d03c      	beq.n	1370 <lis2dh_attr_set+0x88>
    12f6:	2a06      	cmp	r2, #6
    12f8:	d158      	bne.n	13ac <lis2dh_attr_set+0xc4>
 *
 * @return The converted value, in Gs.
 */
static inline int32_t sensor_ms2_to_g(const struct sensor_value *ms2)
{
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
    12fa:	685c      	ldr	r4, [r3, #4]
    12fc:	681a      	ldr	r2, [r3, #0]
    12fe:	4b36      	ldr	r3, [pc, #216]	; (13d8 <lis2dh_attr_set+0xf0>)
    1300:	17e5      	asrs	r5, r4, #31
    1302:	fbc3 4502 	smlal	r4, r5, r3, r2

	if (micro_ms2 > 0) {
    1306:	2c01      	cmp	r4, #1
    1308:	f175 0300 	sbcs.w	r3, r5, #0
    130c:	db22      	blt.n	1354 <lis2dh_attr_set+0x6c>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
    130e:	4833      	ldr	r0, [pc, #204]	; (13dc <lis2dh_attr_set+0xf4>)
    1310:	a32f      	add	r3, pc, #188	; (adr r3, 13d0 <lis2dh_attr_set+0xe8>)
    1312:	e9d3 2300 	ldrd	r2, r3, [r3]
    1316:	1820      	adds	r0, r4, r0
    1318:	f04f 0100 	mov.w	r1, #0
    131c:	eb45 0101 	adc.w	r1, r5, r1
	} else {
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
    1320:	f7ff fdf8 	bl	f14 <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    1324:	b280      	uxth	r0, r0
    1326:	2802      	cmp	r0, #2
    1328:	d01c      	beq.n	1364 <lis2dh_attr_set+0x7c>
    132a:	2804      	cmp	r0, #4
    132c:	d01c      	beq.n	1368 <lis2dh_attr_set+0x80>
    132e:	2808      	cmp	r0, #8
    1330:	d01c      	beq.n	136c <lis2dh_attr_set+0x84>
    1332:	2810      	cmp	r0, #16
    1334:	d122      	bne.n	137c <lis2dh_attr_set+0x94>
    1336:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    1338:	4929      	ldr	r1, [pc, #164]	; (13e0 <lis2dh_attr_set+0xf8>)
	struct lis2dh_data *lis2dh = dev->data;
    133a:	68f2      	ldr	r2, [r6, #12]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    133c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    1340:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    1342:	6852      	ldr	r2, [r2, #4]
    1344:	011b      	lsls	r3, r3, #4
    1346:	6914      	ldr	r4, [r2, #16]
    1348:	2123      	movs	r1, #35	; 0x23
    134a:	2230      	movs	r2, #48	; 0x30
    134c:	4630      	mov	r0, r6
    134e:	47a0      	blx	r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
    1350:	b002      	add	sp, #8
    1352:	bd70      	pop	{r4, r5, r6, pc}
    1354:	4823      	ldr	r0, [pc, #140]	; (13e4 <lis2dh_attr_set+0xfc>)
    1356:	1820      	adds	r0, r4, r0
    1358:	a31d      	add	r3, pc, #116	; (adr r3, 13d0 <lis2dh_attr_set+0xe8>)
    135a:	e9d3 2300 	ldrd	r2, r3, [r3]
    135e:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
    1362:	e7dd      	b.n	1320 <lis2dh_attr_set+0x38>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
    1364:	2300      	movs	r3, #0
    1366:	e7e7      	b.n	1338 <lis2dh_attr_set+0x50>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    1368:	2301      	movs	r3, #1
    136a:	e7e5      	b.n	1338 <lis2dh_attr_set+0x50>
    136c:	2302      	movs	r3, #2
    136e:	e7e3      	b.n	1338 <lis2dh_attr_set+0x50>
		return lis2dh_acc_odr_set(dev, val->val1);
    1370:	881b      	ldrh	r3, [r3, #0]
	if (freq == 0U) {
    1372:	b11b      	cbz	r3, 137c <lis2dh_attr_set+0x94>
		if (freq == lis2dh_odr_map[i]) {
    1374:	4a1c      	ldr	r2, [pc, #112]	; (13e8 <lis2dh_attr_set+0x100>)
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    1376:	3401      	adds	r4, #1
    1378:	2c0b      	cmp	r4, #11
    137a:	d102      	bne.n	1382 <lis2dh_attr_set+0x9a>
	return -EINVAL;
    137c:	f06f 0015 	mvn.w	r0, #21
    1380:	e7e6      	b.n	1350 <lis2dh_attr_set+0x68>
		if (freq == lis2dh_odr_map[i]) {
    1382:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
    1386:	4299      	cmp	r1, r3
    1388:	d1f5      	bne.n	1376 <lis2dh_attr_set+0x8e>
	struct lis2dh_data *data = dev->data;
    138a:	68f5      	ldr	r5, [r6, #12]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
    138c:	686b      	ldr	r3, [r5, #4]
    138e:	f10d 0207 	add.w	r2, sp, #7
    1392:	689b      	ldr	r3, [r3, #8]
    1394:	2120      	movs	r1, #32
    1396:	4630      	mov	r0, r6
    1398:	4798      	blx	r3
	if (status < 0) {
    139a:	2800      	cmp	r0, #0
    139c:	dbd8      	blt.n	1350 <lis2dh_attr_set+0x68>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    139e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    13a2:	0719      	lsls	r1, r3, #28
			return i;
    13a4:	4622      	mov	r2, r4
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    13a6:	d404      	bmi.n	13b2 <lis2dh_attr_set+0xca>
    13a8:	2c08      	cmp	r4, #8
    13aa:	d105      	bne.n	13b8 <lis2dh_attr_set+0xd0>
	switch (attr) {
    13ac:	f06f 0022 	mvn.w	r0, #34	; 0x22
    13b0:	e7ce      	b.n	1350 <lis2dh_attr_set+0x68>
		odr--;
    13b2:	2c0a      	cmp	r4, #10
    13b4:	bf08      	it	eq
    13b6:	2209      	moveq	r2, #9
				      (value & ~LIS2DH_ODR_MASK) |
    13b8:	f003 030f 	and.w	r3, r3, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    13bc:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
    13c0:	686b      	ldr	r3, [r5, #4]
    13c2:	b2d2      	uxtb	r2, r2
    13c4:	68db      	ldr	r3, [r3, #12]
    13c6:	2120      	movs	r1, #32
    13c8:	4630      	mov	r0, r6
    13ca:	4798      	blx	r3
    13cc:	e7c0      	b.n	1350 <lis2dh_attr_set+0x68>
    13ce:	bf00      	nop
    13d0:	0095a33a 	.word	0x0095a33a
    13d4:	00000000 	.word	0x00000000
    13d8:	000f4240 	.word	0x000f4240
    13dc:	004ad19d 	.word	0x004ad19d
    13e0:	20000030 	.word	0x20000030
    13e4:	ffb52e63 	.word	0xffb52e63
    13e8:	0000776c 	.word	0x0000776c
    13ec:	00000000 	.word	0x00000000

000013f0 <lsm6dsl_accel_convert>:
	return 0;
}

static inline void lsm6dsl_accel_convert(struct sensor_value *val, int raw_val,
					 float sensitivity)
{
    13f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13f2:	4604      	mov	r4, r0
	double dval;

	/* Sensitivity is exposed in mg/LSB */
	/* Convert to m/s^2 */
	dval = (double)(raw_val) * sensitivity * SENSOR_G_DOUBLE / 1000;
    13f4:	4608      	mov	r0, r1
{
    13f6:	4615      	mov	r5, r2
	dval = (double)(raw_val) * sensitivity * SENSOR_G_DOUBLE / 1000;
    13f8:	f7fe ffc4 	bl	384 <__aeabi_i2d>
    13fc:	4606      	mov	r6, r0
    13fe:	4628      	mov	r0, r5
    1400:	460f      	mov	r7, r1
    1402:	f7fe ffd1 	bl	3a8 <__aeabi_f2d>
    1406:	4602      	mov	r2, r0
    1408:	460b      	mov	r3, r1
    140a:	4630      	mov	r0, r6
    140c:	4639      	mov	r1, r7
    140e:	f7ff f823 	bl	458 <__aeabi_dmul>
    1412:	a30f      	add	r3, pc, #60	; (adr r3, 1450 <lsm6dsl_accel_convert+0x60>)
    1414:	e9d3 2300 	ldrd	r2, r3, [r3]
    1418:	f7ff f81e 	bl	458 <__aeabi_dmul>
    141c:	4b0e      	ldr	r3, [pc, #56]	; (1458 <lsm6dsl_accel_convert+0x68>)
    141e:	2200      	movs	r2, #0
    1420:	f7ff f944 	bl	6ac <__aeabi_ddiv>
    1424:	4606      	mov	r6, r0
    1426:	460f      	mov	r7, r1
	val->val1 = (int32_t)dval;
    1428:	f7ff fa28 	bl	87c <__aeabi_d2iz>
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
    142c:	4b0a      	ldr	r3, [pc, #40]	; (1458 <lsm6dsl_accel_convert+0x68>)
	val->val1 = (int32_t)dval;
    142e:	6020      	str	r0, [r4, #0]
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
    1430:	2200      	movs	r2, #0
    1432:	4630      	mov	r0, r6
    1434:	4639      	mov	r1, r7
    1436:	f7ff f80f 	bl	458 <__aeabi_dmul>
    143a:	f7ff fa1f 	bl	87c <__aeabi_d2iz>
    143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1442:	fb90 f2f3 	sdiv	r2, r0, r3
    1446:	fb02 0213 	mls	r2, r2, r3, r0
    144a:	4353      	muls	r3, r2
    144c:	6063      	str	r3, [r4, #4]

}
    144e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1450:	3a92a305 	.word	0x3a92a305
    1454:	40239d01 	.word	0x40239d01
    1458:	408f4000 	.word	0x408f4000
    145c:	00000000 	.word	0x00000000

00001460 <lsm6dsl_gyro_convert.constprop.0>:
{
	return lsm6dsl_accel_get_channel(chan, val, data,
					data->accel_sensitivity);
}

static inline void lsm6dsl_gyro_convert(struct sensor_value *val, int raw_val,
    1460:	b5d0      	push	{r4, r6, r7, lr}
    1462:	4604      	mov	r4, r0
{
	double dval;

	/* Sensitivity is exposed in mdps/LSB */
	/* Convert to rad/s */
	dval = (double)(raw_val * sensitivity * SENSOR_DEG2RAD_DOUBLE / 1000);
    1464:	4608      	mov	r0, r1
    1466:	f7ff fb3b 	bl	ae0 <__aeabi_i2f>
    146a:	4915      	ldr	r1, [pc, #84]	; (14c0 <lsm6dsl_gyro_convert.constprop.0+0x60>)
    146c:	f7ff fb8c 	bl	b88 <__aeabi_fmul>
    1470:	f7fe ff9a 	bl	3a8 <__aeabi_f2d>
    1474:	a310      	add	r3, pc, #64	; (adr r3, 14b8 <lsm6dsl_gyro_convert.constprop.0+0x58>)
    1476:	e9d3 2300 	ldrd	r2, r3, [r3]
    147a:	f7fe ffed 	bl	458 <__aeabi_dmul>
    147e:	4b11      	ldr	r3, [pc, #68]	; (14c4 <lsm6dsl_gyro_convert.constprop.0+0x64>)
    1480:	2200      	movs	r2, #0
    1482:	f7ff f913 	bl	6ac <__aeabi_ddiv>
    1486:	4606      	mov	r6, r0
    1488:	460f      	mov	r7, r1
	val->val1 = (int32_t)dval;
    148a:	f7ff f9f7 	bl	87c <__aeabi_d2iz>
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
    148e:	4b0d      	ldr	r3, [pc, #52]	; (14c4 <lsm6dsl_gyro_convert.constprop.0+0x64>)
	val->val1 = (int32_t)dval;
    1490:	6020      	str	r0, [r4, #0]
	val->val2 = (((int32_t)(dval * 1000)) % 1000) * 1000;
    1492:	2200      	movs	r2, #0
    1494:	4630      	mov	r0, r6
    1496:	4639      	mov	r1, r7
    1498:	f7fe ffde 	bl	458 <__aeabi_dmul>
    149c:	f7ff f9ee 	bl	87c <__aeabi_d2iz>
    14a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    14a4:	fb90 f2f3 	sdiv	r2, r0, r3
    14a8:	fb02 0213 	mls	r2, r2, r3, r0
    14ac:	4353      	muls	r3, r2
    14ae:	6063      	str	r3, [r4, #4]
}
    14b0:	bdd0      	pop	{r4, r6, r7, pc}
    14b2:	bf00      	nop
    14b4:	f3af 8000 	nop.w
    14b8:	63f11168 	.word	0x63f11168
    14bc:	3f91df46 	.word	0x3f91df46
    14c0:	408c0000 	.word	0x408c0000
    14c4:	408f4000 	.word	0x408f4000

000014c8 <lsm6dsl_attr_set>:
	switch (chan) {
    14c8:	2903      	cmp	r1, #3
{
    14ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14cc:	4604      	mov	r4, r0
    14ce:	460d      	mov	r5, r1
	switch (chan) {
    14d0:	d004      	beq.n	14dc <lsm6dsl_attr_set+0x14>
    14d2:	2907      	cmp	r1, #7
    14d4:	d054      	beq.n	1580 <lsm6dsl_attr_set+0xb8>
	switch (attr) {
    14d6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    14da:	e028      	b.n	152e <lsm6dsl_attr_set+0x66>
	switch (attr) {
    14dc:	2a00      	cmp	r2, #0
    14de:	d03c      	beq.n	155a <lsm6dsl_attr_set+0x92>
    14e0:	2a06      	cmp	r2, #6
    14e2:	d1f8      	bne.n	14d6 <lsm6dsl_attr_set+0xe>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
    14e4:	685e      	ldr	r6, [r3, #4]
    14e6:	681a      	ldr	r2, [r3, #0]
    14e8:	4b5d      	ldr	r3, [pc, #372]	; (1660 <lsm6dsl_attr_set+0x198>)
    14ea:	17f7      	asrs	r7, r6, #31
    14ec:	fbc3 6702 	smlal	r6, r7, r3, r2
	if (micro_ms2 > 0) {
    14f0:	2e01      	cmp	r6, #1
    14f2:	f177 0300 	sbcs.w	r3, r7, #0
    14f6:	db40      	blt.n	157a <lsm6dsl_attr_set+0xb2>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
    14f8:	485a      	ldr	r0, [pc, #360]	; (1664 <lsm6dsl_attr_set+0x19c>)
    14fa:	2100      	movs	r1, #0
    14fc:	1830      	adds	r0, r6, r0
    14fe:	eb47 0101 	adc.w	r1, r7, r1
    1502:	a351      	add	r3, pc, #324	; (adr r3, 1648 <lsm6dsl_attr_set+0x180>)
    1504:	e9d3 2300 	ldrd	r2, r3, [r3]
    1508:	f7ff fd04 	bl	f14 <__aeabi_ldivmod>
		if (range == lsm6dsl_accel_fs_map[i]) {
    150c:	2802      	cmp	r0, #2
    150e:	d00f      	beq.n	1530 <lsm6dsl_attr_set+0x68>
    1510:	2810      	cmp	r0, #16
    1512:	d00f      	beq.n	1534 <lsm6dsl_attr_set+0x6c>
    1514:	2804      	cmp	r0, #4
    1516:	d00f      	beq.n	1538 <lsm6dsl_attr_set+0x70>
    1518:	2808      	cmp	r0, #8
    151a:	d12e      	bne.n	157a <lsm6dsl_attr_set+0xb2>
	if (lsm6dsl_accel_set_fs_raw(dev, fs) < 0) {
    151c:	4629      	mov	r1, r5
    151e:	4620      	mov	r0, r4
	struct lsm6dsl_data *data = dev->data;
    1520:	68e6      	ldr	r6, [r4, #12]
	if (lsm6dsl_accel_set_fs_raw(dev, fs) < 0) {
    1522:	f005 fb3c 	bl	6b9e <lsm6dsl_accel_set_fs_raw>
    1526:	2800      	cmp	r0, #0
    1528:	da08      	bge.n	153c <lsm6dsl_attr_set+0x74>
		return -EIO;
    152a:	f06f 0004 	mvn.w	r0, #4
}
    152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_accel_fs_map); i++) {
    1530:	2500      	movs	r5, #0
    1532:	e7f3      	b.n	151c <lsm6dsl_attr_set+0x54>
    1534:	2501      	movs	r5, #1
    1536:	e7f1      	b.n	151c <lsm6dsl_attr_set+0x54>
    1538:	2502      	movs	r5, #2
    153a:	e7ef      	b.n	151c <lsm6dsl_attr_set+0x54>
						    * SENSI_GRAIN_XL);
    153c:	4b4a      	ldr	r3, [pc, #296]	; (1668 <lsm6dsl_attr_set+0x1a0>)
    153e:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
    1542:	f7fe ff1f 	bl	384 <__aeabi_i2d>
    1546:	a342      	add	r3, pc, #264	; (adr r3, 1650 <lsm6dsl_attr_set+0x188>)
    1548:	e9d3 2300 	ldrd	r2, r3, [r3]
    154c:	f7fe ff84 	bl	458 <__aeabi_dmul>
	data->accel_sensitivity = (float)(lsm6dsl_accel_fs_sens[fs]
    1550:	f7ff f9bc 	bl	8cc <__aeabi_d2f>
    1554:	6130      	str	r0, [r6, #16]
	return 0;
    1556:	2000      	movs	r0, #0
    1558:	e7e9      	b.n	152e <lsm6dsl_attr_set+0x66>
		return lsm6dsl_accel_odr_set(dev, val->val1);
    155a:	8819      	ldrh	r1, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
    155c:	4b43      	ldr	r3, [pc, #268]	; (166c <lsm6dsl_attr_set+0x1a4>)
		if (freq == lsm6dsl_odr_map[i]) {
    155e:	f833 0b02 	ldrh.w	r0, [r3], #2
    1562:	4281      	cmp	r1, r0
    1564:	d106      	bne.n	1574 <lsm6dsl_attr_set+0xac>
	if (lsm6dsl_accel_set_odr_raw(dev, odr) < 0) {
    1566:	b2d1      	uxtb	r1, r2
    1568:	4620      	mov	r0, r4
    156a:	f002 fd2d 	bl	3fc8 <lsm6dsl_accel_set_odr_raw>
	if (lsm6dsl_gyro_set_odr_raw(dev, odr) < 0) {
    156e:	2800      	cmp	r0, #0
    1570:	daf1      	bge.n	1556 <lsm6dsl_attr_set+0x8e>
    1572:	e7da      	b.n	152a <lsm6dsl_attr_set+0x62>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
    1574:	3201      	adds	r2, #1
    1576:	2a0b      	cmp	r2, #11
    1578:	d1f1      	bne.n	155e <lsm6dsl_attr_set+0x96>
	return -EINVAL;
    157a:	f06f 0015 	mvn.w	r0, #21
    157e:	e7d6      	b.n	152e <lsm6dsl_attr_set+0x66>
	switch (attr) {
    1580:	2a00      	cmp	r2, #0
    1582:	d050      	beq.n	1626 <lsm6dsl_attr_set+0x15e>
    1584:	2a06      	cmp	r2, #6
    1586:	d1a6      	bne.n	14d6 <lsm6dsl_attr_set+0xe>
 *
 * @return The converted value, in degrees.
 */
static inline int32_t sensor_rad_to_degrees(const struct sensor_value *rad)
{
	int64_t micro_rad_s = rad->val1 * 1000000LL + rad->val2;
    1588:	685a      	ldr	r2, [r3, #4]
    158a:	4610      	mov	r0, r2
    158c:	17d1      	asrs	r1, r2, #31
    158e:	681a      	ldr	r2, [r3, #0]
    1590:	4b33      	ldr	r3, [pc, #204]	; (1660 <lsm6dsl_attr_set+0x198>)
    1592:	fbc3 0102 	smlal	r0, r1, r3, r2
    1596:	460b      	mov	r3, r1
    1598:	4602      	mov	r2, r0

	if (micro_rad_s > 0) {
    159a:	21b4      	movs	r1, #180	; 0xb4
    159c:	fba2 6701 	umull	r6, r7, r2, r1
    15a0:	2a01      	cmp	r2, #1
    15a2:	fb01 7703 	mla	r7, r1, r3, r7
    15a6:	f173 0300 	sbcs.w	r3, r3, #0
    15aa:	db2c      	blt.n	1606 <lsm6dsl_attr_set+0x13e>
		return (micro_rad_s * 180LL + SENSOR_PI / 2) / SENSOR_PI;
    15ac:	4830      	ldr	r0, [pc, #192]	; (1670 <lsm6dsl_attr_set+0x1a8>)
    15ae:	a32a      	add	r3, pc, #168	; (adr r3, 1658 <lsm6dsl_attr_set+0x190>)
    15b0:	e9d3 2300 	ldrd	r2, r3, [r3]
    15b4:	1830      	adds	r0, r6, r0
    15b6:	f04f 0100 	mov.w	r1, #0
    15ba:	eb47 0101 	adc.w	r1, r7, r1
	} else {
		return (micro_rad_s * 180LL - SENSOR_PI / 2) / SENSOR_PI;
    15be:	f7ff fca9 	bl	f14 <__aeabi_ldivmod>
		if (range == lsm6dsl_gyro_fs_map[i]) {
    15c2:	28f5      	cmp	r0, #245	; 0xf5
    15c4:	d027      	beq.n	1616 <lsm6dsl_attr_set+0x14e>
    15c6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    15ca:	d026      	beq.n	161a <lsm6dsl_attr_set+0x152>
    15cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    15d0:	d025      	beq.n	161e <lsm6dsl_attr_set+0x156>
    15d2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
    15d6:	d024      	beq.n	1622 <lsm6dsl_attr_set+0x15a>
    15d8:	287d      	cmp	r0, #125	; 0x7d
    15da:	d1ce      	bne.n	157a <lsm6dsl_attr_set+0xb2>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_gyro_fs_map); i++) {
    15dc:	2504      	movs	r5, #4
	if (lsm6dsl_gyro_set_fs_raw(dev, fs) < 0) {
    15de:	4629      	mov	r1, r5
    15e0:	4620      	mov	r0, r4
	struct lsm6dsl_data *data = dev->data;
    15e2:	68e6      	ldr	r6, [r4, #12]
	if (lsm6dsl_gyro_set_fs_raw(dev, fs) < 0) {
    15e4:	f005 faee 	bl	6bc4 <lsm6dsl_gyro_set_fs_raw>
    15e8:	2800      	cmp	r0, #0
    15ea:	db9e      	blt.n	152a <lsm6dsl_attr_set+0x62>
						    * SENSI_GRAIN_G);
    15ec:	4b21      	ldr	r3, [pc, #132]	; (1674 <lsm6dsl_attr_set+0x1ac>)
    15ee:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
    15f2:	f7fe fec7 	bl	384 <__aeabi_i2d>
    15f6:	4b20      	ldr	r3, [pc, #128]	; (1678 <lsm6dsl_attr_set+0x1b0>)
    15f8:	2200      	movs	r2, #0
    15fa:	f7fe ff2d 	bl	458 <__aeabi_dmul>
	data->gyro_sensitivity = (float)(lsm6dsl_gyro_fs_sens[fs]
    15fe:	f7ff f965 	bl	8cc <__aeabi_d2f>
    1602:	6230      	str	r0, [r6, #32]
    1604:	e7a7      	b.n	1556 <lsm6dsl_attr_set+0x8e>
    1606:	481d      	ldr	r0, [pc, #116]	; (167c <lsm6dsl_attr_set+0x1b4>)
    1608:	1830      	adds	r0, r6, r0
    160a:	a313      	add	r3, pc, #76	; (adr r3, 1658 <lsm6dsl_attr_set+0x190>)
    160c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1610:	f147 31ff 	adc.w	r1, r7, #4294967295	; 0xffffffff
    1614:	e7d3      	b.n	15be <lsm6dsl_attr_set+0xf6>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_gyro_fs_map); i++) {
    1616:	2500      	movs	r5, #0
    1618:	e7e1      	b.n	15de <lsm6dsl_attr_set+0x116>
    161a:	2501      	movs	r5, #1
    161c:	e7df      	b.n	15de <lsm6dsl_attr_set+0x116>
    161e:	2502      	movs	r5, #2
    1620:	e7dd      	b.n	15de <lsm6dsl_attr_set+0x116>
    1622:	2503      	movs	r5, #3
    1624:	e7db      	b.n	15de <lsm6dsl_attr_set+0x116>
		return lsm6dsl_gyro_odr_set(dev, val->val1);
    1626:	8819      	ldrh	r1, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
    1628:	4b10      	ldr	r3, [pc, #64]	; (166c <lsm6dsl_attr_set+0x1a4>)
		if (freq == lsm6dsl_odr_map[i]) {
    162a:	f833 0b02 	ldrh.w	r0, [r3], #2
    162e:	4281      	cmp	r1, r0
    1630:	d104      	bne.n	163c <lsm6dsl_attr_set+0x174>
	if (lsm6dsl_gyro_set_odr_raw(dev, odr) < 0) {
    1632:	b2d1      	uxtb	r1, r2
    1634:	4620      	mov	r0, r4
    1636:	f005 fada 	bl	6bee <lsm6dsl_gyro_set_odr_raw>
    163a:	e798      	b.n	156e <lsm6dsl_attr_set+0xa6>
	for (i = 0; i < ARRAY_SIZE(lsm6dsl_odr_map); i++) {
    163c:	3201      	adds	r2, #1
    163e:	2a0b      	cmp	r2, #11
    1640:	d1f3      	bne.n	162a <lsm6dsl_attr_set+0x162>
    1642:	e79a      	b.n	157a <lsm6dsl_attr_set+0xb2>
    1644:	f3af 8000 	nop.w
    1648:	0095a33a 	.word	0x0095a33a
    164c:	00000000 	.word	0x00000000
    1650:	5a1cac08 	.word	0x5a1cac08
    1654:	3faf3b64 	.word	0x3faf3b64
    1658:	002fefd8 	.word	0x002fefd8
    165c:	00000000 	.word	0x00000000
    1660:	000f4240 	.word	0x000f4240
    1664:	004ad19d 	.word	0x004ad19d
    1668:	00007782 	.word	0x00007782
    166c:	00007794 	.word	0x00007794
    1670:	0017f7ec 	.word	0x0017f7ec
    1674:	0000778a 	.word	0x0000778a
    1678:	40118000 	.word	0x40118000
    167c:	ffe80814 	.word	0xffe80814

00001680 <lsm6dsl_trigger_handler>:
#ifdef CONFIG_LSM6DSL_TRIGGER
static int lsm6dsl_trig_cnt;

static void lsm6dsl_trigger_handler(const struct device *dev,
				     struct sensor_trigger *trig)
{
    1680:	b508      	push	{r3, lr}
	return api->sample_fetch(dev, type);
    1682:	6883      	ldr	r3, [r0, #8]
    1684:	2138      	movs	r1, #56	; 0x38
    1686:	68db      	ldr	r3, [r3, #12]
    1688:	4798      	blx	r3
	sensor_sample_fetch_chan(dev, SENSOR_CHAN_ALL);
	lsm6dsl_trig_cnt++;
    168a:	4a02      	ldr	r2, [pc, #8]	; (1694 <lsm6dsl_trigger_handler+0x14>)
    168c:	6813      	ldr	r3, [r2, #0]
    168e:	3301      	adds	r3, #1
    1690:	6013      	str	r3, [r2, #0]
}
    1692:	bd08      	pop	{r3, pc}
    1694:	20000748 	.word	0x20000748

00001698 <main>:
#define LPS22HB_DEVNAME		DT_LABEL(DT_INST(0, st_lps22hb_press))
#define LIS2DH_DEVNAME		DT_LABEL(DT_INST(0, st_lis2dh))
#define LIS2MDL_DEVNAME		DT_LABEL(DT_INST(0, st_lis2mdl))

void main(void)
{
    1698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    169c:	b0af      	sub	sp, #188	; 0xbc
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    169e:	4847      	ldr	r0, [pc, #284]	; (17bc <main+0x124>)
    16a0:	f003 fbe6 	bl	4e70 <z_impl_device_get_binding>
    16a4:	4680      	mov	r8, r0
    16a6:	4846      	ldr	r0, [pc, #280]	; (17c0 <main+0x128>)
    16a8:	f003 fbe2 	bl	4e70 <z_impl_device_get_binding>
    16ac:	4607      	mov	r7, r0
    16ae:	4845      	ldr	r0, [pc, #276]	; (17c4 <main+0x12c>)
    16b0:	f003 fbde 	bl	4e70 <z_impl_device_get_binding>
    16b4:	4604      	mov	r4, r0
    16b6:	4844      	ldr	r0, [pc, #272]	; (17c8 <main+0x130>)
    16b8:	f003 fbda 	bl	4e70 <z_impl_device_get_binding>
    16bc:	4682      	mov	sl, r0
    16be:	4843      	ldr	r0, [pc, #268]	; (17cc <main+0x134>)
    16c0:	f003 fbd6 	bl	4e70 <z_impl_device_get_binding>
    16c4:	4683      	mov	fp, r0
    16c6:	4842      	ldr	r0, [pc, #264]	; (17d0 <main+0x138>)
    16c8:	f003 fbd2 	bl	4e70 <z_impl_device_get_binding>
	const struct device *dev;
	bool led_is_on = true;
	int ret;
		
	dev = device_get_binding(LED0);
	if (dev == NULL) {
    16cc:	4605      	mov	r5, r0
    16ce:	b1a0      	cbz	r0, 16fa <main+0x62>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    16d0:	68c6      	ldr	r6, [r0, #12]
	return api->pin_configure(port, pin, flags);
    16d2:	6883      	ldr	r3, [r0, #8]
    16d4:	f240 6201 	movw	r2, #1537	; 0x601
    16d8:	681b      	ldr	r3, [r3, #0]
    16da:	2111      	movs	r1, #17
    16dc:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    16de:	2800      	cmp	r0, #0
    16e0:	d10a      	bne.n	16f8 <main+0x60>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    16e2:	6833      	ldr	r3, [r6, #0]
    16e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    16e8:	6033      	str	r3, [r6, #0]
	ret = gpio_pin_configure(dev, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
	if (ret < 0) {
		return;
	}

	if (hts221 == NULL) {
    16ea:	f1b8 0f00 	cmp.w	r8, #0
    16ee:	d107      	bne.n	1700 <main+0x68>
		printf("Could not get HTS221 device\n");
    16f0:	4838      	ldr	r0, [pc, #224]	; (17d4 <main+0x13c>)
		if (ret < 0 && ret != -EBADMSG) {
			printf("LSM303AGR Accel Sensor sample update error\n");
			return;
		}
		if (sensor_sample_fetch(lsm303agr_m) < 0) {
			printf("LSM303AGR Magn Sensor sample update error\n");
    16f2:	f001 ffa9 	bl	3648 <printf>
			return;
    16f6:	e000      	b.n	16fa <main+0x62>
	if (ret < 0) {
    16f8:	daf7      	bge.n	16ea <main+0x52>
		       sensor_value_to_double(&magn[1]),
		       sensor_value_to_double(&magn[2]));

		k_sleep(K_MSEC(2000));
	}
}
    16fa:	b02f      	add	sp, #188	; 0xbc
    16fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (lps22hb == NULL) {
    1700:	b90f      	cbnz	r7, 1706 <main+0x6e>
		printf("Could not get LPS22HB device\n");
    1702:	4835      	ldr	r0, [pc, #212]	; (17d8 <main+0x140>)
    1704:	e7f5      	b.n	16f2 <main+0x5a>
	if (lsm6dsl == NULL) {
    1706:	b90c      	cbnz	r4, 170c <main+0x74>
		printf("Could not get LSM6DSL device\n");
    1708:	4834      	ldr	r0, [pc, #208]	; (17dc <main+0x144>)
    170a:	e7f2      	b.n	16f2 <main+0x5a>
	if (lsm303agr_a == NULL) {
    170c:	f1ba 0f00 	cmp.w	sl, #0
    1710:	d101      	bne.n	1716 <main+0x7e>
		printf("Could not get LSM303AGR Accel device\n");
    1712:	4833      	ldr	r0, [pc, #204]	; (17e0 <main+0x148>)
    1714:	e7ed      	b.n	16f2 <main+0x5a>
	if (lsm303agr_m == NULL) {
    1716:	f1bb 0f00 	cmp.w	fp, #0
    171a:	d101      	bne.n	1720 <main+0x88>
		printf("Could not get LSM303AGR Magn device\n");
    171c:	4831      	ldr	r0, [pc, #196]	; (17e4 <main+0x14c>)
    171e:	e7e8      	b.n	16f2 <main+0x5a>
	odr_attr.val2 = 0;
    1720:	23d0      	movs	r3, #208	; 0xd0
    1722:	2600      	movs	r6, #0
    1724:	e9cd 3614 	strd	r3, r6, [sp, #80]	; 0x50
	if (api->attr_set == NULL) {
    1728:	68a3      	ldr	r3, [r4, #8]
    172a:	f8d3 9000 	ldr.w	r9, [r3]
    172e:	f1b9 0f00 	cmp.w	r9, #0
    1732:	d103      	bne.n	173c <main+0xa4>
		printk("Cannot set sampling frequency for accelerometer.\n");
    1734:	482c      	ldr	r0, [pc, #176]	; (17e8 <main+0x150>)
		printk("Cannot set sampling frequency for gyro.\n");
    1736:	f004 faca 	bl	5cce <printk>
		return;
    173a:	e7de      	b.n	16fa <main+0x62>
	return api->attr_set(dev, chan, attr, val);
    173c:	ab14      	add	r3, sp, #80	; 0x50
    173e:	4632      	mov	r2, r6
    1740:	2103      	movs	r1, #3
    1742:	4620      	mov	r0, r4
    1744:	47c8      	blx	r9
	if (sensor_attr_set(lsm6dsl, SENSOR_CHAN_ACCEL_XYZ,
    1746:	2800      	cmp	r0, #0
    1748:	dbf4      	blt.n	1734 <main+0x9c>
	if (api->attr_set == NULL) {
    174a:	68a3      	ldr	r3, [r4, #8]
    174c:	f8d3 9000 	ldr.w	r9, [r3]
    1750:	f1b9 0f00 	cmp.w	r9, #0
    1754:	d101      	bne.n	175a <main+0xc2>
		printk("Cannot set sampling frequency for gyro.\n");
    1756:	4825      	ldr	r0, [pc, #148]	; (17ec <main+0x154>)
    1758:	e7ed      	b.n	1736 <main+0x9e>
	return api->attr_set(dev, chan, attr, val);
    175a:	ab14      	add	r3, sp, #80	; 0x50
    175c:	4632      	mov	r2, r6
    175e:	2107      	movs	r1, #7
    1760:	4620      	mov	r0, r4
    1762:	47c8      	blx	r9
	if (sensor_attr_set(lsm6dsl, SENSOR_CHAN_GYRO_XYZ,
    1764:	2800      	cmp	r0, #0
    1766:	dbf6      	blt.n	1756 <main+0xbe>
	trig.type = SENSOR_TRIG_DATA_READY;
    1768:	4b21      	ldr	r3, [pc, #132]	; (17f0 <main+0x158>)
    176a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (api->trigger_set == NULL) {
    176c:	68a3      	ldr	r3, [r4, #8]
    176e:	689b      	ldr	r3, [r3, #8]
    1770:	b11b      	cbz	r3, 177a <main+0xe2>
	return api->trigger_set(dev, trig, handler);
    1772:	4a20      	ldr	r2, [pc, #128]	; (17f4 <main+0x15c>)
    1774:	a90b      	add	r1, sp, #44	; 0x2c
    1776:	4620      	mov	r0, r4
    1778:	4798      	blx	r3
{
    177a:	2601      	movs	r6, #1
    177c:	f04f 0900 	mov.w	r9, #0
		if (sensor_sample_fetch(hts221) < 0) {
    1780:	4640      	mov	r0, r8
    1782:	f004 fa7d 	bl	5c80 <sensor_sample_fetch>
    1786:	2800      	cmp	r0, #0
    1788:	da01      	bge.n	178e <main+0xf6>
			printf("HTS221 Sensor sample update error\n");
    178a:	481b      	ldr	r0, [pc, #108]	; (17f8 <main+0x160>)
    178c:	e7b1      	b.n	16f2 <main+0x5a>
		if (sensor_sample_fetch(lps22hb) < 0) {
    178e:	4638      	mov	r0, r7
    1790:	f004 fa76 	bl	5c80 <sensor_sample_fetch>
    1794:	2800      	cmp	r0, #0
    1796:	da01      	bge.n	179c <main+0x104>
			printf("LPS22HB Sensor sample update error\n");
    1798:	4818      	ldr	r0, [pc, #96]	; (17fc <main+0x164>)
    179a:	e7aa      	b.n	16f2 <main+0x5a>
		ret = sensor_sample_fetch(lsm303agr_a);
    179c:	4650      	mov	r0, sl
    179e:	f004 fa6f 	bl	5c80 <sensor_sample_fetch>
		if (ret < 0 && ret != -EBADMSG) {
    17a2:	2800      	cmp	r0, #0
    17a4:	da03      	bge.n	17ae <main+0x116>
    17a6:	304d      	adds	r0, #77	; 0x4d
    17a8:	d001      	beq.n	17ae <main+0x116>
			printf("LSM303AGR Accel Sensor sample update error\n");
    17aa:	4815      	ldr	r0, [pc, #84]	; (1800 <main+0x168>)
    17ac:	e7a1      	b.n	16f2 <main+0x5a>
		if (sensor_sample_fetch(lsm303agr_m) < 0) {
    17ae:	4658      	mov	r0, fp
    17b0:	f004 fa66 	bl	5c80 <sensor_sample_fetch>
    17b4:	2800      	cmp	r0, #0
    17b6:	da27      	bge.n	1808 <main+0x170>
			printf("LSM303AGR Magn Sensor sample update error\n");
    17b8:	4812      	ldr	r0, [pc, #72]	; (1804 <main+0x16c>)
    17ba:	e79a      	b.n	16f2 <main+0x5a>
    17bc:	000077aa 	.word	0x000077aa
    17c0:	000077b1 	.word	0x000077b1
    17c4:	000077b9 	.word	0x000077b9
    17c8:	000077c1 	.word	0x000077c1
    17cc:	000077d1 	.word	0x000077d1
    17d0:	000077e0 	.word	0x000077e0
    17d4:	000077e7 	.word	0x000077e7
    17d8:	00007804 	.word	0x00007804
    17dc:	00007822 	.word	0x00007822
    17e0:	00007840 	.word	0x00007840
    17e4:	00007866 	.word	0x00007866
    17e8:	0000788b 	.word	0x0000788b
    17ec:	000078bd 	.word	0x000078bd
    17f0:	00030001 	.word	0x00030001
    17f4:	00001681 	.word	0x00001681
    17f8:	000078e6 	.word	0x000078e6
    17fc:	00007909 	.word	0x00007909
    1800:	0000792d 	.word	0x0000792d
    1804:	00007959 	.word	0x00007959
		sensor_channel_get(hts221, SENSOR_CHAN_AMBIENT_TEMP, &temp1);
    1808:	aa0c      	add	r2, sp, #48	; 0x30
    180a:	210d      	movs	r1, #13
    180c:	4640      	mov	r0, r8
    180e:	f004 fa3b 	bl	5c88 <sensor_channel_get>
		sensor_channel_get(hts221, SENSOR_CHAN_HUMIDITY, &hum);
    1812:	aa10      	add	r2, sp, #64	; 0x40
    1814:	2110      	movs	r1, #16
    1816:	4640      	mov	r0, r8
    1818:	f004 fa36 	bl	5c88 <sensor_channel_get>
		sensor_channel_get(lps22hb, SENSOR_CHAN_PRESS, &press);
    181c:	aa12      	add	r2, sp, #72	; 0x48
    181e:	210e      	movs	r1, #14
    1820:	4638      	mov	r0, r7
    1822:	f004 fa31 	bl	5c88 <sensor_channel_get>
		sensor_channel_get(lps22hb, SENSOR_CHAN_AMBIENT_TEMP, &temp2);
    1826:	aa0e      	add	r2, sp, #56	; 0x38
    1828:	210d      	movs	r1, #13
    182a:	4638      	mov	r0, r7
    182c:	f004 fa2c 	bl	5c88 <sensor_channel_get>
		sensor_channel_get(lsm6dsl, SENSOR_CHAN_ACCEL_XYZ, accel1);
    1830:	aa16      	add	r2, sp, #88	; 0x58
    1832:	2103      	movs	r1, #3
    1834:	4620      	mov	r0, r4
    1836:	f004 fa27 	bl	5c88 <sensor_channel_get>
		sensor_channel_get(lsm6dsl, SENSOR_CHAN_GYRO_XYZ, gyro);
    183a:	aa22      	add	r2, sp, #136	; 0x88
    183c:	2107      	movs	r1, #7
    183e:	4620      	mov	r0, r4
    1840:	f004 fa22 	bl	5c88 <sensor_channel_get>
		sensor_channel_get(lsm303agr_a, SENSOR_CHAN_ACCEL_XYZ, accel2);
    1844:	aa1c      	add	r2, sp, #112	; 0x70
    1846:	2103      	movs	r1, #3
    1848:	4650      	mov	r0, sl
    184a:	f004 fa1d 	bl	5c88 <sensor_channel_get>
		sensor_channel_get(lsm303agr_m, SENSOR_CHAN_MAGN_XYZ, magn);
    184e:	aa28      	add	r2, sp, #160	; 0xa0
    1850:	210b      	movs	r1, #11
    1852:	4658      	mov	r0, fp
    1854:	f004 fa18 	bl	5c88 <sensor_channel_get>
		printf("\0033\014");
    1858:	4871      	ldr	r0, [pc, #452]	; (1a20 <main+0x388>)
    185a:	f001 fef5 	bl	3648 <printf>
		printf("X-NUCLEO-IKS01A2 sensor dashboard\n\n");
    185e:	4871      	ldr	r0, [pc, #452]	; (1a24 <main+0x38c>)
    1860:	f001 fef2 	bl	3648 <printf>
		HTS221_temp += sensor_value_to_double(&temp1);
    1864:	a80c      	add	r0, sp, #48	; 0x30
    1866:	f7ff fd23 	bl	12b0 <sensor_value_to_double>
    186a:	4602      	mov	r2, r0
    186c:	460b      	mov	r3, r1
    186e:	4648      	mov	r0, r9
    1870:	e9cd 2304 	strd	r2, r3, [sp, #16]
    1874:	f7fe fd98 	bl	3a8 <__aeabi_f2d>
    1878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    187c:	f7fe fc36 	bl	ec <__adddf3>
    1880:	f7ff f824 	bl	8cc <__aeabi_d2f>
    1884:	4681      	mov	r9, r0
		HTS221_temp_avg = HTS221_temp / cnt_temp;
    1886:	4630      	mov	r0, r6
    1888:	f7ff f92a 	bl	ae0 <__aeabi_i2f>
    188c:	4601      	mov	r1, r0
    188e:	4648      	mov	r0, r9
    1890:	f7ff fa2e 	bl	cf0 <__aeabi_fdiv>
		if(HTS221_temp_avg > 22){
    1894:	4964      	ldr	r1, [pc, #400]	; (1a28 <main+0x390>)
		HTS221_temp_avg = HTS221_temp / cnt_temp;
    1896:	9004      	str	r0, [sp, #16]
		if(HTS221_temp_avg > 22){
    1898:	f7ff fb32 	bl	f00 <__aeabi_fcmpgt>
    189c:	2800      	cmp	r0, #0
    189e:	f000 80b3 	beq.w	1a08 <main+0x370>
			printf("LED is on in iteration %ld\n", cnt_temp);	
    18a2:	4862      	ldr	r0, [pc, #392]	; (1a2c <main+0x394>)
    18a4:	4631      	mov	r1, r6
    18a6:	f001 fecf 	bl	3648 <printf>
			led_is_on = true;
    18aa:	2001      	movs	r0, #1

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    18ac:	68eb      	ldr	r3, [r5, #12]
    18ae:	681b      	ldr	r3, [r3, #0]
    18b0:	039b      	lsls	r3, r3, #14
		value = (value != 0) ? 0 : 1;
    18b2:	bf48      	it	mi
    18b4:	f080 0001 	eormi.w	r0, r0, #1
	if (value != 0)	{
    18b8:	2800      	cmp	r0, #0
    18ba:	f000 80ad 	beq.w	1a18 <main+0x380>
	return api->port_set_bits_raw(port, pins);
    18be:	68ab      	ldr	r3, [r5, #8]
    18c0:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    18c2:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    18c6:	4628      	mov	r0, r5
    18c8:	4798      	blx	r3
		printf("HTS221: Current temperature: %.1f C\n",
    18ca:	a80c      	add	r0, sp, #48	; 0x30
    18cc:	f7ff fcf0 	bl	12b0 <sensor_value_to_double>
    18d0:	4602      	mov	r2, r0
    18d2:	460b      	mov	r3, r1
    18d4:	4856      	ldr	r0, [pc, #344]	; (1a30 <main+0x398>)
    18d6:	f001 feb7 	bl	3648 <printf>
		printf("HTS221: Average temperature: %.1f C\n",
    18da:	9804      	ldr	r0, [sp, #16]
    18dc:	f7fe fd64 	bl	3a8 <__aeabi_f2d>
    18e0:	4602      	mov	r2, r0
    18e2:	460b      	mov	r3, r1
    18e4:	4853      	ldr	r0, [pc, #332]	; (1a34 <main+0x39c>)
    18e6:	f001 feaf 	bl	3648 <printf>
		printf("HTS221: Relative Humidity: %.1f%%\n",
    18ea:	a810      	add	r0, sp, #64	; 0x40
    18ec:	f7ff fce0 	bl	12b0 <sensor_value_to_double>
    18f0:	4602      	mov	r2, r0
    18f2:	460b      	mov	r3, r1
    18f4:	4850      	ldr	r0, [pc, #320]	; (1a38 <main+0x3a0>)
    18f6:	f001 fea7 	bl	3648 <printf>
		printf("LPS22HB: Pressure:%.3f kpa\n",
    18fa:	a812      	add	r0, sp, #72	; 0x48
    18fc:	f7ff fcd8 	bl	12b0 <sensor_value_to_double>
    1900:	4602      	mov	r2, r0
    1902:	460b      	mov	r3, r1
    1904:	484d      	ldr	r0, [pc, #308]	; (1a3c <main+0x3a4>)
    1906:	f001 fe9f 	bl	3648 <printf>
		printf("LPS22HB: Temperature: %.1f C\n",
    190a:	a80e      	add	r0, sp, #56	; 0x38
    190c:	f7ff fcd0 	bl	12b0 <sensor_value_to_double>
    1910:	4602      	mov	r2, r0
    1912:	460b      	mov	r3, r1
    1914:	484a      	ldr	r0, [pc, #296]	; (1a40 <main+0x3a8>)
    1916:	f001 fe97 	bl	3648 <printf>
		printf("LSM6DSL: Accel (m.s-2): x: %.1f, y: %.1f, z: %.1f\n",
    191a:	a816      	add	r0, sp, #88	; 0x58
    191c:	f7ff fcc8 	bl	12b0 <sensor_value_to_double>
    1920:	4602      	mov	r2, r0
    1922:	460b      	mov	r3, r1
    1924:	a818      	add	r0, sp, #96	; 0x60
    1926:	e9cd 2306 	strd	r2, r3, [sp, #24]
    192a:	f7ff fcc1 	bl	12b0 <sensor_value_to_double>
    192e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1932:	a81a      	add	r0, sp, #104	; 0x68
    1934:	f7ff fcbc 	bl	12b0 <sensor_value_to_double>
    1938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    193c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1940:	e9cd 2300 	strd	r2, r3, [sp]
    1944:	483f      	ldr	r0, [pc, #252]	; (1a44 <main+0x3ac>)
    1946:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    194a:	f001 fe7d 	bl	3648 <printf>
		printf("LSM6DSL: Gyro (dps): x: %.3f, y: %.3f, z: %.3f\n",
    194e:	a822      	add	r0, sp, #136	; 0x88
    1950:	f7ff fcae 	bl	12b0 <sensor_value_to_double>
    1954:	4602      	mov	r2, r0
    1956:	460b      	mov	r3, r1
    1958:	a824      	add	r0, sp, #144	; 0x90
    195a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    195e:	f7ff fca7 	bl	12b0 <sensor_value_to_double>
    1962:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1966:	a826      	add	r0, sp, #152	; 0x98
    1968:	f7ff fca2 	bl	12b0 <sensor_value_to_double>
    196c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1970:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1974:	e9cd 2300 	strd	r2, r3, [sp]
    1978:	4833      	ldr	r0, [pc, #204]	; (1a48 <main+0x3b0>)
    197a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    197e:	f001 fe63 	bl	3648 <printf>
		printf("%d:: lsm6dsl trig %d\n", cnt++, lsm6dsl_trig_cnt);
    1982:	1c73      	adds	r3, r6, #1
    1984:	9306      	str	r3, [sp, #24]
    1986:	4b31      	ldr	r3, [pc, #196]	; (1a4c <main+0x3b4>)
    1988:	4831      	ldr	r0, [pc, #196]	; (1a50 <main+0x3b8>)
    198a:	681a      	ldr	r2, [r3, #0]
    198c:	4631      	mov	r1, r6
    198e:	f001 fe5b 	bl	3648 <printf>
		printf("LSM303AGR: Accel (m.s-2): x: %.1f, y: %.1f, z: %.1f\n",
    1992:	a81c      	add	r0, sp, #112	; 0x70
    1994:	f7ff fc8c 	bl	12b0 <sensor_value_to_double>
    1998:	4602      	mov	r2, r0
    199a:	460b      	mov	r3, r1
    199c:	a81e      	add	r0, sp, #120	; 0x78
    199e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    19a2:	f7ff fc85 	bl	12b0 <sensor_value_to_double>
    19a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    19aa:	a820      	add	r0, sp, #128	; 0x80
    19ac:	f7ff fc80 	bl	12b0 <sensor_value_to_double>
    19b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    19b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    19b8:	e9cd 2300 	strd	r2, r3, [sp]
    19bc:	4825      	ldr	r0, [pc, #148]	; (1a54 <main+0x3bc>)
    19be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    19c2:	f001 fe41 	bl	3648 <printf>
		printf("LSM303AGR: Magn (gauss): x: %.3f, y: %.3f, z: %.3f\n",
    19c6:	a828      	add	r0, sp, #160	; 0xa0
    19c8:	f7ff fc72 	bl	12b0 <sensor_value_to_double>
    19cc:	4602      	mov	r2, r0
    19ce:	460b      	mov	r3, r1
    19d0:	a82a      	add	r0, sp, #168	; 0xa8
    19d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    19d6:	f7ff fc6b 	bl	12b0 <sensor_value_to_double>
    19da:	e9cd 0104 	strd	r0, r1, [sp, #16]
    19de:	a82c      	add	r0, sp, #176	; 0xb0
    19e0:	f7ff fc66 	bl	12b0 <sensor_value_to_double>
    19e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    19e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    19ec:	e9cd 2300 	strd	r2, r3, [sp]
    19f0:	4819      	ldr	r0, [pc, #100]	; (1a58 <main+0x3c0>)
    19f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    19f6:	f001 fe27 	bl	3648 <printf>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    19fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    19fe:	2100      	movs	r1, #0
    1a00:	f003 fe66 	bl	56d0 <z_impl_k_sleep>
		printf("%d:: lsm6dsl trig %d\n", cnt++, lsm6dsl_trig_cnt);
    1a04:	9e06      	ldr	r6, [sp, #24]
	while (1) {
    1a06:	e6bb      	b.n	1780 <main+0xe8>
    1a08:	9006      	str	r0, [sp, #24]
			printf("LED is off in iteration %ld\n", cnt_temp);			
    1a0a:	4631      	mov	r1, r6
    1a0c:	4813      	ldr	r0, [pc, #76]	; (1a5c <main+0x3c4>)
    1a0e:	f001 fe1b 	bl	3648 <printf>
			led_is_on = false;
    1a12:	9b06      	ldr	r3, [sp, #24]
    1a14:	4618      	mov	r0, r3
    1a16:	e749      	b.n	18ac <main+0x214>
    1a18:	68ab      	ldr	r3, [r5, #8]
    1a1a:	691b      	ldr	r3, [r3, #16]
    1a1c:	e751      	b.n	18c2 <main+0x22a>
    1a1e:	bf00      	nop
    1a20:	00007984 	.word	0x00007984
    1a24:	00007988 	.word	0x00007988
    1a28:	41b00000 	.word	0x41b00000
    1a2c:	000079ac 	.word	0x000079ac
    1a30:	000079e5 	.word	0x000079e5
    1a34:	00007a0a 	.word	0x00007a0a
    1a38:	00007a2f 	.word	0x00007a2f
    1a3c:	00007a52 	.word	0x00007a52
    1a40:	00007a6e 	.word	0x00007a6e
    1a44:	00007a8c 	.word	0x00007a8c
    1a48:	00007abf 	.word	0x00007abf
    1a4c:	20000748 	.word	0x20000748
    1a50:	00007aef 	.word	0x00007aef
    1a54:	00007b05 	.word	0x00007b05
    1a58:	00007b3a 	.word	0x00007b3a
    1a5c:	000079c8 	.word	0x000079c8

00001a60 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1a60:	680b      	ldr	r3, [r1, #0]
    1a62:	3301      	adds	r3, #1
    1a64:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1a66:	4b01      	ldr	r3, [pc, #4]	; (1a6c <char_out+0xc>)
    1a68:	681b      	ldr	r3, [r3, #0]
    1a6a:	4718      	bx	r3
    1a6c:	20000000 	.word	0x20000000

00001a70 <__printk_hook_install>:
	_char_out = fn;
    1a70:	4b01      	ldr	r3, [pc, #4]	; (1a78 <__printk_hook_install+0x8>)
    1a72:	6018      	str	r0, [r3, #0]
}
    1a74:	4770      	bx	lr
    1a76:	bf00      	nop
    1a78:	20000000 	.word	0x20000000

00001a7c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1a7c:	b507      	push	{r0, r1, r2, lr}
    1a7e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1a80:	2100      	movs	r1, #0
{
    1a82:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1a84:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1a86:	4803      	ldr	r0, [pc, #12]	; (1a94 <vprintk+0x18>)
    1a88:	a901      	add	r1, sp, #4
    1a8a:	f000 f8eb 	bl	1c64 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1a8e:	b003      	add	sp, #12
    1a90:	f85d fb04 	ldr.w	pc, [sp], #4
    1a94:	00001a61 	.word	0x00001a61

00001a98 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1a98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1a9c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1aa0:	f019 0808 	ands.w	r8, r9, #8
{
    1aa4:	4604      	mov	r4, r0
    1aa6:	4693      	mov	fp, r2
	if (processing) {
    1aa8:	d00d      	beq.n	1ac6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1aaa:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1aac:	bf0c      	ite	eq
    1aae:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1ab2:	f049 0920 	orrne.w	r9, r9, #32
    1ab6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1aba:	f38b 8811 	msr	BASEPRI, fp
    1abe:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1ac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ac6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1aca:	2902      	cmp	r1, #2
    1acc:	d107      	bne.n	1ade <process_event+0x46>
			evt = process_recheck(mgr);
    1ace:	4620      	mov	r0, r4
    1ad0:	f004 f90a 	bl	5ce8 <process_recheck>
		if (evt == EVT_NOP) {
    1ad4:	2800      	cmp	r0, #0
    1ad6:	d0f0      	beq.n	1aba <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1ad8:	2801      	cmp	r0, #1
    1ada:	8b23      	ldrh	r3, [r4, #24]
    1adc:	d150      	bne.n	1b80 <process_event+0xe8>
			res = mgr->last_res;
    1ade:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ae0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1ae2:	2f00      	cmp	r7, #0
    1ae4:	da15      	bge.n	1b12 <process_event+0x7a>
		*clients = mgr->clients;
    1ae6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ae8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1aec:	e9c4 8800 	strd	r8, r8, [r4]
    1af0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1af4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1af6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1af8:	8b21      	ldrh	r1, [r4, #24]
    1afa:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1afe:	45ca      	cmp	sl, r9
    1b00:	d002      	beq.n	1b08 <process_event+0x70>
		if (do_monitors
    1b02:	68a3      	ldr	r3, [r4, #8]
    1b04:	2b00      	cmp	r3, #0
    1b06:	d15c      	bne.n	1bc2 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1b08:	b90d      	cbnz	r5, 1b0e <process_event+0x76>
		    || (transit != NULL)) {
    1b0a:	2e00      	cmp	r6, #0
    1b0c:	d074      	beq.n	1bf8 <process_event+0x160>
    1b0e:	2300      	movs	r3, #0
    1b10:	e058      	b.n	1bc4 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b12:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1b16:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1b18:	2a01      	cmp	r2, #1
    1b1a:	d820      	bhi.n	1b5e <process_event+0xc6>
		*clients = mgr->clients;
    1b1c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1b20:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1b22:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    1b24:	b289      	uxth	r1, r1
	list->tail = NULL;
    1b26:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1b2a:	d10c      	bne.n	1b46 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1b2c:	2d00      	cmp	r5, #0
    1b2e:	462b      	mov	r3, r5
    1b30:	bf38      	it	cc
    1b32:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1b34:	b12b      	cbz	r3, 1b42 <process_event+0xaa>
				mgr->refs += 1U;
    1b36:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1b38:	681b      	ldr	r3, [r3, #0]
    1b3a:	3201      	adds	r2, #1
    1b3c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1b3e:	2b00      	cmp	r3, #0
    1b40:	d1f8      	bne.n	1b34 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b42:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b46:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1b48:	4620      	mov	r0, r4
    1b4a:	f004 f8cd 	bl	5ce8 <process_recheck>
    1b4e:	4606      	mov	r6, r0
    1b50:	2800      	cmp	r0, #0
    1b52:	d0d1      	beq.n	1af8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b54:	8b23      	ldrh	r3, [r4, #24]
    1b56:	f043 0320 	orr.w	r3, r3, #32
    1b5a:	8323      	strh	r3, [r4, #24]
    1b5c:	e7cb      	b.n	1af6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1b5e:	2b04      	cmp	r3, #4
    1b60:	d10c      	bne.n	1b7c <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b62:	f021 0107 	bic.w	r1, r1, #7
    1b66:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b68:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1b6a:	4620      	mov	r0, r4
    1b6c:	f004 f8bc 	bl	5ce8 <process_recheck>
    1b70:	4605      	mov	r5, r0
    1b72:	2800      	cmp	r0, #0
    1b74:	d0bf      	beq.n	1af6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b76:	f041 0120 	orr.w	r1, r1, #32
    1b7a:	8321      	strh	r1, [r4, #24]
    1b7c:	2500      	movs	r5, #0
    1b7e:	e7ba      	b.n	1af6 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1b80:	2803      	cmp	r0, #3
    1b82:	d109      	bne.n	1b98 <process_event+0x100>
			transit = mgr->transitions->start;
    1b84:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b86:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1b8a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b8c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b90:	8323      	strh	r3, [r4, #24]
}
    1b92:	2500      	movs	r5, #0
		res = 0;
    1b94:	462f      	mov	r7, r5
    1b96:	e7af      	b.n	1af8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1b98:	2804      	cmp	r0, #4
    1b9a:	d106      	bne.n	1baa <process_event+0x112>
			transit = mgr->transitions->stop;
    1b9c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b9e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1ba2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ba4:	f043 0304 	orr.w	r3, r3, #4
    1ba8:	e7f2      	b.n	1b90 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    1baa:	2805      	cmp	r0, #5
    1bac:	d106      	bne.n	1bbc <process_event+0x124>
			transit = mgr->transitions->reset;
    1bae:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bb0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1bb4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1bb6:	f043 0305 	orr.w	r3, r3, #5
    1bba:	e7e9      	b.n	1b90 <process_event+0xf8>
    1bbc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1bbe:	462e      	mov	r6, r5
    1bc0:	e7e8      	b.n	1b94 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    1bc2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1bc4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1bc8:	8321      	strh	r1, [r4, #24]
    1bca:	f38b 8811 	msr	BASEPRI, fp
    1bce:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1bd2:	bb03      	cbnz	r3, 1c16 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    1bd4:	2d00      	cmp	r5, #0
    1bd6:	d133      	bne.n	1c40 <process_event+0x1a8>
			if (transit != NULL) {
    1bd8:	b116      	cbz	r6, 1be0 <process_event+0x148>
				transit(mgr, transition_complete);
    1bda:	4921      	ldr	r1, [pc, #132]	; (1c60 <process_event+0x1c8>)
    1bdc:	4620      	mov	r0, r4
    1bde:	47b0      	blx	r6
	__asm__ volatile(
    1be0:	f04f 0320 	mov.w	r3, #32
    1be4:	f3ef 8b11 	mrs	fp, BASEPRI
    1be8:	f383 8811 	msr	BASEPRI, r3
    1bec:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1bf0:	8b23      	ldrh	r3, [r4, #24]
    1bf2:	f023 0308 	bic.w	r3, r3, #8
    1bf6:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1bf8:	8b23      	ldrh	r3, [r4, #24]
    1bfa:	06da      	lsls	r2, r3, #27
    1bfc:	d528      	bpl.n	1c50 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1bfe:	f023 0310 	bic.w	r3, r3, #16
    1c02:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1c04:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1c06:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1c0a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1c0e:	2900      	cmp	r1, #0
    1c10:	f47f af5b 	bne.w	1aca <process_event+0x32>
out:
    1c14:	e751      	b.n	1aba <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1c16:	68a1      	ldr	r1, [r4, #8]
    1c18:	2900      	cmp	r1, #0
    1c1a:	d0db      	beq.n	1bd4 <process_event+0x13c>
	return node->next;
    1c1c:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1c1e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1c22:	2b00      	cmp	r3, #0
    1c24:	bf38      	it	cc
    1c26:	2300      	movcc	r3, #0
    1c28:	4699      	mov	r9, r3
    1c2a:	4652      	mov	r2, sl
    1c2c:	463b      	mov	r3, r7
    1c2e:	4620      	mov	r0, r4
    1c30:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1c32:	f1b9 0f00 	cmp.w	r9, #0
    1c36:	d0cd      	beq.n	1bd4 <process_event+0x13c>
    1c38:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1c3c:	4649      	mov	r1, r9
    1c3e:	e7ee      	b.n	1c1e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    1c40:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1c42:	463b      	mov	r3, r7
    1c44:	4652      	mov	r2, sl
    1c46:	4620      	mov	r0, r4
    1c48:	682d      	ldr	r5, [r5, #0]
    1c4a:	f004 f869 	bl	5d20 <notify_one>
    1c4e:	e7c1      	b.n	1bd4 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1c50:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1c54:	bf1e      	ittt	ne
    1c56:	f023 0320 	bicne.w	r3, r3, #32
    1c5a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1c5c:	2102      	movne	r1, #2
    1c5e:	e7d2      	b.n	1c06 <process_event+0x16e>
    1c60:	00005d4d 	.word	0x00005d4d

00001c64 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c68:	b0a5      	sub	sp, #148	; 0x94
    1c6a:	4688      	mov	r8, r1
    1c6c:	9003      	str	r0, [sp, #12]
    1c6e:	4691      	mov	r9, r2
    1c70:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1c72:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1c74:	f899 0000 	ldrb.w	r0, [r9]
    1c78:	b910      	cbnz	r0, 1c80 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1c7a:	4628      	mov	r0, r5
    1c7c:	f000 be15 	b.w	28aa <cbvprintf+0xc46>
		if (*fp != '%') {
    1c80:	f109 0301 	add.w	r3, r9, #1
    1c84:	2825      	cmp	r0, #37	; 0x25
    1c86:	9309      	str	r3, [sp, #36]	; 0x24
    1c88:	d007      	beq.n	1c9a <cbvprintf+0x36>
			OUTC(*fp++);
    1c8a:	4641      	mov	r1, r8
			OUTC('%');
    1c8c:	9b03      	ldr	r3, [sp, #12]
    1c8e:	4798      	blx	r3
    1c90:	2800      	cmp	r0, #0
    1c92:	f2c0 860a 	blt.w	28aa <cbvprintf+0xc46>
    1c96:	3501      	adds	r5, #1
		if (bps == NULL) {
    1c98:	e245      	b.n	2126 <cbvprintf+0x4c2>
		} state = {
    1c9a:	2218      	movs	r2, #24
    1c9c:	2100      	movs	r1, #0
    1c9e:	a816      	add	r0, sp, #88	; 0x58
    1ca0:	f004 fc2a 	bl	64f8 <memset>
	if (*sp == '%') {
    1ca4:	f899 3001 	ldrb.w	r3, [r9, #1]
    1ca8:	2b25      	cmp	r3, #37	; 0x25
    1caa:	d079      	beq.n	1da0 <cbvprintf+0x13c>
    1cac:	2200      	movs	r2, #0
    1cae:	9809      	ldr	r0, [sp, #36]	; 0x24
    1cb0:	4616      	mov	r6, r2
    1cb2:	4696      	mov	lr, r2
    1cb4:	4617      	mov	r7, r2
    1cb6:	4694      	mov	ip, r2
    1cb8:	4601      	mov	r1, r0
		switch (*sp) {
    1cba:	f810 3b01 	ldrb.w	r3, [r0], #1
    1cbe:	2b2b      	cmp	r3, #43	; 0x2b
    1cc0:	f000 809e 	beq.w	1e00 <cbvprintf+0x19c>
    1cc4:	f200 8095 	bhi.w	1df2 <cbvprintf+0x18e>
    1cc8:	2b20      	cmp	r3, #32
    1cca:	f000 809b 	beq.w	1e04 <cbvprintf+0x1a0>
    1cce:	2b23      	cmp	r3, #35	; 0x23
    1cd0:	f000 809b 	beq.w	1e0a <cbvprintf+0x1a6>
    1cd4:	f1bc 0f00 	cmp.w	ip, #0
    1cd8:	d005      	beq.n	1ce6 <cbvprintf+0x82>
    1cda:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    1cde:	f040 0004 	orr.w	r0, r0, #4
    1ce2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    1ce6:	b12f      	cbz	r7, 1cf4 <cbvprintf+0x90>
    1ce8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    1cec:	f040 0008 	orr.w	r0, r0, #8
    1cf0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    1cf4:	f1be 0f00 	cmp.w	lr, #0
    1cf8:	d005      	beq.n	1d06 <cbvprintf+0xa2>
    1cfa:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    1cfe:	f040 0010 	orr.w	r0, r0, #16
    1d02:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    1d06:	b12e      	cbz	r6, 1d14 <cbvprintf+0xb0>
    1d08:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    1d0c:	f040 0020 	orr.w	r0, r0, #32
    1d10:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    1d14:	b12a      	cbz	r2, 1d22 <cbvprintf+0xbe>
    1d16:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    1d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1d1e:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (conv->flag_zero && conv->flag_dash) {
    1d22:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    1d26:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1d2a:	2844      	cmp	r0, #68	; 0x44
    1d2c:	d103      	bne.n	1d36 <cbvprintf+0xd2>
		conv->flag_zero = false;
    1d2e:	f36f 1286 	bfc	r2, #6, #1
    1d32:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	conv->width_present = true;
    1d36:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
    1d3a:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1d3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1d40:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
    1d44:	d17c      	bne.n	1e40 <cbvprintf+0x1dc>
		conv->width_star = true;
    1d46:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1d4a:	f042 0201 	orr.w	r2, r2, #1
    1d4e:	1c4b      	adds	r3, r1, #1
    1d50:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	conv->prec_present = (*sp == '.');
    1d54:	781a      	ldrb	r2, [r3, #0]
    1d56:	2a2e      	cmp	r2, #46	; 0x2e
    1d58:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1d5c:	bf0c      	ite	eq
    1d5e:	2101      	moveq	r1, #1
    1d60:	2100      	movne	r1, #0
    1d62:	f361 0241 	bfi	r2, r1, #1, #1
    1d66:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	if (!conv->prec_present) {
    1d6a:	d175      	bne.n	1e58 <cbvprintf+0x1f4>
	if (*sp == '*') {
    1d6c:	785a      	ldrb	r2, [r3, #1]
    1d6e:	2a2a      	cmp	r2, #42	; 0x2a
    1d70:	d06b      	beq.n	1e4a <cbvprintf+0x1e6>
    1d72:	3301      	adds	r3, #1
	size_t val = 0;
    1d74:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1d76:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1d78:	4618      	mov	r0, r3
    1d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
    1d7e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1d82:	2f09      	cmp	r7, #9
    1d84:	f240 80aa 	bls.w	1edc <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    1d88:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	conv->prec_value = prec;
    1d8c:	911a      	str	r1, [sp, #104]	; 0x68
	conv->unsupported |= ((conv->prec_value < 0)
    1d8e:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1d92:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1d96:	f361 0241 	bfi	r2, r1, #1, #1
    1d9a:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
    1d9e:	e05b      	b.n	1e58 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    1da0:	f109 0202 	add.w	r2, r9, #2
    1da4:	9209      	str	r2, [sp, #36]	; 0x24
    1da6:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		if (conv->width_star) {
    1daa:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1dae:	07de      	lsls	r6, r3, #31
    1db0:	f140 816f 	bpl.w	2092 <cbvprintf+0x42e>
			width = va_arg(ap, int);
    1db4:	f854 2b04 	ldr.w	r2, [r4], #4
    1db8:	9208      	str	r2, [sp, #32]
			if (width < 0) {
    1dba:	2a00      	cmp	r2, #0
    1dbc:	da08      	bge.n	1dd0 <cbvprintf+0x16c>
				conv->flag_dash = true;
    1dbe:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    1dc2:	f042 0204 	orr.w	r2, r2, #4
    1dc6:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				width = -width;
    1dca:	9a08      	ldr	r2, [sp, #32]
    1dcc:	4252      	negs	r2, r2
		int width = -1;
    1dce:	9208      	str	r2, [sp, #32]
		if (conv->prec_star) {
    1dd0:	0758      	lsls	r0, r3, #29
    1dd2:	f140 8166 	bpl.w	20a2 <cbvprintf+0x43e>
			int arg = va_arg(ap, int);
    1dd6:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    1dda:	2f00      	cmp	r7, #0
    1ddc:	f280 8165 	bge.w	20aa <cbvprintf+0x446>
				conv->prec_present = false;
    1de0:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1de4:	f36f 0341 	bfc	r3, #1, #1
    1de8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		int precision = -1;
    1dec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1df0:	e15b      	b.n	20aa <cbvprintf+0x446>
		switch (*sp) {
    1df2:	2b2d      	cmp	r3, #45	; 0x2d
    1df4:	d00b      	beq.n	1e0e <cbvprintf+0x1aa>
    1df6:	2b30      	cmp	r3, #48	; 0x30
    1df8:	f47f af6c 	bne.w	1cd4 <cbvprintf+0x70>
			conv->flag_zero = true;
    1dfc:	2201      	movs	r2, #1
	} while (loop);
    1dfe:	e75b      	b.n	1cb8 <cbvprintf+0x54>
			conv->flag_plus = true;
    1e00:	2701      	movs	r7, #1
    1e02:	e759      	b.n	1cb8 <cbvprintf+0x54>
			conv->flag_space = true;
    1e04:	f04f 0e01 	mov.w	lr, #1
    1e08:	e756      	b.n	1cb8 <cbvprintf+0x54>
			conv->flag_hash = true;
    1e0a:	2601      	movs	r6, #1
    1e0c:	e754      	b.n	1cb8 <cbvprintf+0x54>
		switch (*sp) {
    1e0e:	f04f 0c01 	mov.w	ip, #1
    1e12:	e751      	b.n	1cb8 <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
    1e14:	fb0c 0202 	mla	r2, ip, r2, r0
    1e18:	3a30      	subs	r2, #48	; 0x30
    1e1a:	4633      	mov	r3, r6
    1e1c:	461e      	mov	r6, r3
    1e1e:	f816 0b01 	ldrb.w	r0, [r6], #1
    1e22:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1e26:	2f09      	cmp	r7, #9
    1e28:	d9f4      	bls.n	1e14 <cbvprintf+0x1b0>
	if (sp != wp) {
    1e2a:	4299      	cmp	r1, r3
    1e2c:	d092      	beq.n	1d54 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
    1e2e:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
		conv->width_value = width;
    1e32:	9219      	str	r2, [sp, #100]	; 0x64
				      || (width != (size_t)conv->width_value));
    1e34:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1e36:	f362 0141 	bfi	r1, r2, #1, #1
    1e3a:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
    1e3e:	e789      	b.n	1d54 <cbvprintf+0xf0>
    1e40:	460b      	mov	r3, r1
	size_t val = 0;
    1e42:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1e44:	f04f 0c0a 	mov.w	ip, #10
    1e48:	e7e8      	b.n	1e1c <cbvprintf+0x1b8>
		conv->prec_star = true;
    1e4a:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1e4e:	f042 0204 	orr.w	r2, r2, #4
    1e52:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
		return ++sp;
    1e56:	3302      	adds	r3, #2
	switch (*sp) {
    1e58:	4619      	mov	r1, r3
    1e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
    1e5e:	2a6c      	cmp	r2, #108	; 0x6c
    1e60:	d05c      	beq.n	1f1c <cbvprintf+0x2b8>
    1e62:	d840      	bhi.n	1ee6 <cbvprintf+0x282>
    1e64:	2a68      	cmp	r2, #104	; 0x68
    1e66:	d046      	beq.n	1ef6 <cbvprintf+0x292>
    1e68:	2a6a      	cmp	r2, #106	; 0x6a
    1e6a:	d061      	beq.n	1f30 <cbvprintf+0x2cc>
    1e6c:	2a4c      	cmp	r2, #76	; 0x4c
    1e6e:	d067      	beq.n	1f40 <cbvprintf+0x2dc>
    1e70:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    1e72:	460b      	mov	r3, r1
    1e74:	f813 2b01 	ldrb.w	r2, [r3], #1
    1e78:	9309      	str	r3, [sp, #36]	; 0x24
	switch (conv->specifier) {
    1e7a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    1e7c:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
	switch (conv->specifier) {
    1e80:	f200 80df 	bhi.w	2042 <cbvprintf+0x3de>
    1e84:	2a57      	cmp	r2, #87	; 0x57
    1e86:	d868      	bhi.n	1f5a <cbvprintf+0x2f6>
    1e88:	2a41      	cmp	r2, #65	; 0x41
    1e8a:	d004      	beq.n	1e96 <cbvprintf+0x232>
    1e8c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1e90:	2b02      	cmp	r3, #2
    1e92:	f200 80d6 	bhi.w	2042 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    1e96:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
    1e9a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    1e9e:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    1ea0:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    1ea4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    1ea8:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
    1eac:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		conv->specifier_cat = SPECIFIER_FP;
    1eb0:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
    1eb4:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
    1eb8:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    1ebc:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    1ebe:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
		if (conv->specifier_a
    1ec2:	b2cb      	uxtb	r3, r1
    1ec4:	f100 80e3 	bmi.w	208e <cbvprintf+0x42a>
		if (conv->length_mod == LENGTH_L) {
    1ec8:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1ecc:	2a18      	cmp	r2, #24
    1ece:	f040 80b5 	bne.w	203c <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    1ed2:	f36f 03c6 	bfc	r3, #3, #4
    1ed6:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
    1eda:	e09c      	b.n	2016 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    1edc:	fb06 2101 	mla	r1, r6, r1, r2
    1ee0:	3930      	subs	r1, #48	; 0x30
    1ee2:	4603      	mov	r3, r0
    1ee4:	e748      	b.n	1d78 <cbvprintf+0x114>
	switch (*sp) {
    1ee6:	2a74      	cmp	r2, #116	; 0x74
    1ee8:	d026      	beq.n	1f38 <cbvprintf+0x2d4>
    1eea:	2a7a      	cmp	r2, #122	; 0x7a
    1eec:	d1c0      	bne.n	1e70 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    1eee:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1ef2:	2206      	movs	r2, #6
    1ef4:	e00d      	b.n	1f12 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    1ef6:	785a      	ldrb	r2, [r3, #1]
    1ef8:	2a68      	cmp	r2, #104	; 0x68
    1efa:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1efe:	d106      	bne.n	1f0e <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    1f00:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1f02:	f361 02c6 	bfi	r2, r1, #3, #4
    1f06:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
			++sp;
    1f0a:	1c99      	adds	r1, r3, #2
    1f0c:	e7b1      	b.n	1e72 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    1f0e:	4613      	mov	r3, r2
    1f10:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1f12:	f362 03c6 	bfi	r3, r2, #3, #4
    1f16:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		break;
    1f1a:	e7aa      	b.n	1e72 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    1f1c:	785a      	ldrb	r2, [r3, #1]
    1f1e:	2a6c      	cmp	r2, #108	; 0x6c
    1f20:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
    1f24:	d101      	bne.n	1f2a <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    1f26:	2104      	movs	r1, #4
    1f28:	e7eb      	b.n	1f02 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    1f2a:	4613      	mov	r3, r2
    1f2c:	2203      	movs	r2, #3
    1f2e:	e7f0      	b.n	1f12 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    1f30:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1f34:	2205      	movs	r2, #5
    1f36:	e7ec      	b.n	1f12 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    1f38:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1f3c:	2207      	movs	r2, #7
    1f3e:	e7e8      	b.n	1f12 <cbvprintf+0x2ae>
		conv->unsupported = true;
    1f40:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    1f44:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1f48:	f023 0302 	bic.w	r3, r3, #2
    1f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1f50:	f043 0302 	orr.w	r3, r3, #2
    1f54:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		break;
    1f58:	e78b      	b.n	1e72 <cbvprintf+0x20e>
    1f5a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    1f5e:	2b20      	cmp	r3, #32
    1f60:	d86f      	bhi.n	2042 <cbvprintf+0x3de>
    1f62:	a101      	add	r1, pc, #4	; (adr r1, 1f68 <cbvprintf+0x304>)
    1f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    1f68:	0000201b 	.word	0x0000201b
    1f6c:	00002043 	.word	0x00002043
    1f70:	00002043 	.word	0x00002043
    1f74:	00002043 	.word	0x00002043
    1f78:	00002043 	.word	0x00002043
    1f7c:	00002043 	.word	0x00002043
    1f80:	00002043 	.word	0x00002043
    1f84:	00002043 	.word	0x00002043
    1f88:	00002043 	.word	0x00002043
    1f8c:	00001e97 	.word	0x00001e97
    1f90:	00002043 	.word	0x00002043
    1f94:	0000201b 	.word	0x0000201b
    1f98:	00001fed 	.word	0x00001fed
    1f9c:	00001e97 	.word	0x00001e97
    1fa0:	00001e97 	.word	0x00001e97
    1fa4:	00001e97 	.word	0x00001e97
    1fa8:	00002043 	.word	0x00002043
    1fac:	00001fed 	.word	0x00001fed
    1fb0:	00002043 	.word	0x00002043
    1fb4:	00002043 	.word	0x00002043
    1fb8:	00002043 	.word	0x00002043
    1fbc:	00002043 	.word	0x00002043
    1fc0:	00002051 	.word	0x00002051
    1fc4:	0000201b 	.word	0x0000201b
    1fc8:	00002071 	.word	0x00002071
    1fcc:	00002043 	.word	0x00002043
    1fd0:	00002043 	.word	0x00002043
    1fd4:	00002071 	.word	0x00002071
    1fd8:	00002043 	.word	0x00002043
    1fdc:	0000201b 	.word	0x0000201b
    1fe0:	00002043 	.word	0x00002043
    1fe4:	00002043 	.word	0x00002043
    1fe8:	0000201b 	.word	0x0000201b
		conv->specifier_cat = SPECIFIER_SINT;
    1fec:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    1ff0:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    1ff2:	f361 0302 	bfi	r3, r1, #0, #3
    1ff6:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ffa:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    1ffe:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2002:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    2004:	bf02      	ittt	eq
    2006:	f89d 1060 	ldrbeq.w	r1, [sp, #96]	; 0x60
    200a:	f041 0101 	orreq.w	r1, r1, #1
    200e:	f88d 1060 	strbeq.w	r1, [sp, #96]	; 0x60
		if (conv->specifier == 'c') {
    2012:	2a63      	cmp	r2, #99	; 0x63
    2014:	d005      	beq.n	2022 <cbvprintf+0x3be>
	bool unsupported = false;
    2016:	2300      	movs	r3, #0
    2018:	e006      	b.n	2028 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    201a:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    201e:	2102      	movs	r1, #2
    2020:	e7e7      	b.n	1ff2 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2022:	3b00      	subs	r3, #0
    2024:	bf18      	it	ne
    2026:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2028:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    202c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2030:	430b      	orrs	r3, r1
    2032:	f363 0241 	bfi	r2, r3, #1, #1
    2036:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
    203a:	e6b6      	b.n	1daa <cbvprintf+0x146>
		} else if ((conv->length_mod != LENGTH_NONE)
    203c:	f013 0f38 	tst.w	r3, #56	; 0x38
    2040:	d0e9      	beq.n	2016 <cbvprintf+0x3b2>
			conv->invalid = true;
    2042:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    2046:	f043 0301 	orr.w	r3, r3, #1
    204a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    204e:	e7e2      	b.n	2016 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    2050:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    2054:	2203      	movs	r2, #3
    2056:	f362 0302 	bfi	r3, r2, #0, #3
    205a:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
    205e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    2062:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2066:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
    206a:	427b      	negs	r3, r7
    206c:	417b      	adcs	r3, r7
    206e:	e7db      	b.n	2028 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    2070:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
    2074:	2203      	movs	r2, #3
    2076:	f362 0302 	bfi	r3, r2, #0, #3
    207a:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod != LENGTH_NONE) {
    207e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    2082:	f013 0f78 	tst.w	r3, #120	; 0x78
    2086:	bf14      	ite	ne
    2088:	2301      	movne	r3, #1
    208a:	2300      	moveq	r3, #0
    208c:	e7cc      	b.n	2028 <cbvprintf+0x3c4>
			unsupported = true;
    208e:	2301      	movs	r3, #1
    2090:	e7ca      	b.n	2028 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    2092:	f99d 2060 	ldrsb.w	r2, [sp, #96]	; 0x60
    2096:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2098:	bfb4      	ite	lt
    209a:	9a19      	ldrlt	r2, [sp, #100]	; 0x64
		int width = -1;
    209c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    20a0:	e695      	b.n	1dce <cbvprintf+0x16a>
		} else if (conv->prec_present) {
    20a2:	0799      	lsls	r1, r3, #30
    20a4:	f57f aea2 	bpl.w	1dec <cbvprintf+0x188>
			precision = conv->prec_value;
    20a8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		conv->pad0_value = 0;
    20aa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    20ac:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
		    && (conv->specifier_cat == SPECIFIER_FP)
    20b0:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    20b4:	f003 0307 	and.w	r3, r3, #7
    20b8:	2b04      	cmp	r3, #4
    20ba:	d109      	bne.n	20d0 <cbvprintf+0x46c>
		    && !conv->prec_present) {
    20bc:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
    20c0:	079a      	lsls	r2, r3, #30
    20c2:	d405      	bmi.n	20d0 <cbvprintf+0x46c>
			if (conv->specifier_a) {
    20c4:	f99d 3061 	ldrsb.w	r3, [sp, #97]	; 0x61
				precision = 6;
    20c8:	2b00      	cmp	r3, #0
    20ca:	bfb4      	ite	lt
    20cc:	270d      	movlt	r7, #13
    20ce:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
    20d0:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			= (enum length_mod_enum)conv->length_mod;
    20d4:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		enum specifier_cat_enum specifier_cat
    20d8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    20dc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    20de:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    20e2:	d136      	bne.n	2152 <cbvprintf+0x4ee>
			switch (length_mod) {
    20e4:	1ecb      	subs	r3, r1, #3
    20e6:	2b04      	cmp	r3, #4
    20e8:	d820      	bhi.n	212c <cbvprintf+0x4c8>
    20ea:	e8df f003 	tbb	[pc, r3]
    20ee:	0703      	.short	0x0703
    20f0:	1f07      	.short	0x1f07
    20f2:	1f          	.byte	0x1f
    20f3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    20f4:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    20f8:	17d3      	asrs	r3, r2, #31
    20fa:	e004      	b.n	2106 <cbvprintf+0x4a2>
					(sint_value_type)va_arg(ap, intmax_t);
    20fc:	3407      	adds	r4, #7
    20fe:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    2102:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    2106:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		if (conv->invalid || conv->unsupported) {
    210a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
    210e:	07b3      	lsls	r3, r6, #30
    2110:	d055      	beq.n	21be <cbvprintf+0x55a>
			OUTS(sp, fp);
    2112:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2114:	9803      	ldr	r0, [sp, #12]
    2116:	464a      	mov	r2, r9
    2118:	4641      	mov	r1, r8
    211a:	f003 fff8 	bl	610e <outs>
    211e:	2800      	cmp	r0, #0
    2120:	f2c0 83c3 	blt.w	28aa <cbvprintf+0xc46>
    2124:	4405      	add	r5, r0
			while (pad_len-- > 0) {
    2126:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    212a:	e5a3      	b.n	1c74 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    212c:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    2130:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2132:	ea4f 73e2 	mov.w	r3, r2, asr #31
    2136:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
    213a:	d105      	bne.n	2148 <cbvprintf+0x4e4>
				value->uint = (unsigned char)value->uint;
    213c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
				value->uint = (unsigned short)value->uint;
    2140:	9316      	str	r3, [sp, #88]	; 0x58
    2142:	2300      	movs	r3, #0
    2144:	9317      	str	r3, [sp, #92]	; 0x5c
    2146:	e7e0      	b.n	210a <cbvprintf+0x4a6>
			} else if (length_mod == LENGTH_H) {
    2148:	2902      	cmp	r1, #2
    214a:	d1de      	bne.n	210a <cbvprintf+0x4a6>
				value->sint = (short)value->sint;
    214c:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
    2150:	e7d2      	b.n	20f8 <cbvprintf+0x494>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2152:	2b02      	cmp	r3, #2
    2154:	d123      	bne.n	219e <cbvprintf+0x53a>
			switch (length_mod) {
    2156:	1ecb      	subs	r3, r1, #3
    2158:	2b04      	cmp	r3, #4
    215a:	d813      	bhi.n	2184 <cbvprintf+0x520>
    215c:	e8df f003 	tbb	[pc, r3]
    2160:	120a0a03 	.word	0x120a0a03
    2164:	12          	.byte	0x12
    2165:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    2166:	6822      	ldr	r2, [r4, #0]
    2168:	9216      	str	r2, [sp, #88]	; 0x58
    216a:	2300      	movs	r3, #0
    216c:	1d20      	adds	r0, r4, #4
    216e:	9317      	str	r3, [sp, #92]	; 0x5c
					(uint_value_type)va_arg(ap, size_t);
    2170:	4604      	mov	r4, r0
    2172:	e7ca      	b.n	210a <cbvprintf+0x4a6>
					(uint_value_type)va_arg(ap,
    2174:	3407      	adds	r4, #7
    2176:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    217a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    217e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				break;
    2182:	e7f5      	b.n	2170 <cbvprintf+0x50c>
					(uint_value_type)va_arg(ap, size_t);
    2184:	f854 3b04 	ldr.w	r3, [r4], #4
    2188:	9316      	str	r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
    218a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    218c:	f04f 0300 	mov.w	r3, #0
    2190:	9317      	str	r3, [sp, #92]	; 0x5c
			if (length_mod == LENGTH_HH) {
    2192:	d0d3      	beq.n	213c <cbvprintf+0x4d8>
			} else if (length_mod == LENGTH_H) {
    2194:	2902      	cmp	r1, #2
    2196:	d1b8      	bne.n	210a <cbvprintf+0x4a6>
				value->uint = (unsigned short)value->uint;
    2198:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    219c:	e7d0      	b.n	2140 <cbvprintf+0x4dc>
		} else if (specifier_cat == SPECIFIER_FP) {
    219e:	2b04      	cmp	r3, #4
    21a0:	d107      	bne.n	21b2 <cbvprintf+0x54e>
			if (length_mod == LENGTH_UPPER_L) {
    21a2:	3407      	adds	r4, #7
    21a4:	f024 0407 	bic.w	r4, r4, #7
    21a8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    21ac:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    21b0:	e7ab      	b.n	210a <cbvprintf+0x4a6>
		} else if (specifier_cat == SPECIFIER_PTR) {
    21b2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    21b4:	bf04      	itt	eq
    21b6:	f854 3b04 	ldreq.w	r3, [r4], #4
    21ba:	9316      	streq	r3, [sp, #88]	; 0x58
    21bc:	e7a5      	b.n	210a <cbvprintf+0x4a6>
		switch (conv->specifier) {
    21be:	f89d 9063 	ldrb.w	r9, [sp, #99]	; 0x63
    21c2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
    21c6:	d8ae      	bhi.n	2126 <cbvprintf+0x4c2>
    21c8:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
    21cc:	f200 80a6 	bhi.w	231c <cbvprintf+0x6b8>
    21d0:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    21d4:	f000 80ec 	beq.w	23b0 <cbvprintf+0x74c>
    21d8:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
    21dc:	d9a3      	bls.n	2126 <cbvprintf+0x4c2>
    21de:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
    21e2:	d003      	beq.n	21ec <cbvprintf+0x588>
    21e4:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
    21e8:	2b02      	cmp	r3, #2
    21ea:	d89c      	bhi.n	2126 <cbvprintf+0x4c2>
	} u = {
    21ec:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
	if ((u.u64 & SIGN_MASK) != 0U) {
    21f0:	2a00      	cmp	r2, #0
    21f2:	f173 0100 	sbcs.w	r1, r3, #0
    21f6:	f2c0 81d3 	blt.w	25a0 <cbvprintf+0x93c>
	} else if (conv->flag_plus) {
    21fa:	0731      	lsls	r1, r6, #28
    21fc:	f100 81d2 	bmi.w	25a4 <cbvprintf+0x940>
		*sign = ' ';
    2200:	f016 0610 	ands.w	r6, r6, #16
    2204:	bf18      	it	ne
    2206:	2620      	movne	r6, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2208:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    220c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    2210:	9206      	str	r2, [sp, #24]
    2212:	9307      	str	r3, [sp, #28]
    2214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2218:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
    221c:	f1bb 0f00 	cmp.w	fp, #0
    2220:	f040 81c2 	bne.w	25a8 <cbvprintf+0x944>
    2224:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    2228:	4313      	orrs	r3, r2
    222a:	bf14      	ite	ne
    222c:	f04f 0c01 	movne.w	ip, #1
    2230:	f04f 0c00 	moveq.w	ip, #0
	fract <<= EXPONENT_BITS;
    2234:	9907      	ldr	r1, [sp, #28]
    2236:	02cb      	lsls	r3, r1, #11
    2238:	9906      	ldr	r1, [sp, #24]
    223a:	02ca      	lsls	r2, r1, #11
    223c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
    2240:	4658      	mov	r0, fp
    2242:	ea4b 0102 	orr.w	r1, fp, r2
    2246:	910c      	str	r1, [sp, #48]	; 0x30
    2248:	17c1      	asrs	r1, r0, #31
    224a:	4319      	orrs	r1, r3
    224c:	910d      	str	r1, [sp, #52]	; 0x34
    224e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
		c = 'f';
    2252:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
    2256:	bf08      	it	eq
    2258:	f04f 0966 	moveq.w	r9, #102	; 0x66
	if ((exp | fract) != 0) {
    225c:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
    225e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
    2262:	f000 8214 	beq.w	268e <cbvprintf+0xa2a>
		if (is_subnormal) {
    2266:	f1bc 0f00 	cmp.w	ip, #0
    226a:	f040 81d4 	bne.w	2616 <cbvprintf+0x9b2>
		fract |= BIT_63;
    226e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2270:	9304      	str	r3, [sp, #16]
    2272:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2278:	9305      	str	r3, [sp, #20]
    227a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    227e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    2282:	2300      	movs	r3, #0
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2284:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
    2288:	461a      	mov	r2, r3
		fract *= 5U;
    228a:	2105      	movs	r1, #5
	while (exp < -2) {
    228c:	f11b 0f02 	cmn.w	fp, #2
    2290:	f2c0 81ca 	blt.w	2628 <cbvprintf+0x9c4>
    2294:	b11b      	cbz	r3, 229e <cbvprintf+0x63a>
    2296:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    229a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (exp > 0) {
    229e:	f1bb 0f00 	cmp.w	fp, #0
    22a2:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
    22a6:	f300 81da 	bgt.w	265e <cbvprintf+0x9fa>
	fract >>= (4 - exp);
    22aa:	9913      	ldr	r1, [sp, #76]	; 0x4c
    22ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    22ae:	f1cb 0004 	rsb	r0, fp, #4
    22b2:	f10b 0b1c 	add.w	fp, fp, #28
    22b6:	fa01 fb0b 	lsl.w	fp, r1, fp
    22ba:	f1a0 0c20 	sub.w	ip, r0, #32
    22be:	40c3      	lsrs	r3, r0
    22c0:	fa21 fc0c 	lsr.w	ip, r1, ip
    22c4:	ea43 030b 	orr.w	r3, r3, fp
    22c8:	ea43 030c 	orr.w	r3, r3, ip
    22cc:	40c1      	lsrs	r1, r0
    22ce:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	if ((c == 'g') || (c == 'G')) {
    22d2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
    22d6:	2b47      	cmp	r3, #71	; 0x47
    22d8:	f040 81e0 	bne.w	269c <cbvprintf+0xa38>
		if (decexp < (-4 + 1) || decexp > precision) {
    22dc:	1cd0      	adds	r0, r2, #3
    22de:	db02      	blt.n	22e6 <cbvprintf+0x682>
    22e0:	4297      	cmp	r7, r2
    22e2:	f280 81d7 	bge.w	2694 <cbvprintf+0xa30>
			c += 'e' - 'g';  /* e or E */
    22e6:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
    22ea:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    22ec:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
    22f0:	dd00      	ble.n	22f4 <cbvprintf+0x690>
				precision--;
    22f2:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
    22f4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    22f8:	0699      	lsls	r1, r3, #26
    22fa:	f100 81cf 	bmi.w	269c <cbvprintf+0xa38>
    22fe:	2f00      	cmp	r7, #0
    2300:	bfd4      	ite	le
    2302:	2300      	movle	r3, #0
    2304:	2301      	movgt	r3, #1
	if (c == 'f') {
    2306:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
    230a:	930e      	str	r3, [sp, #56]	; 0x38
	if (c == 'f') {
    230c:	f040 81c8 	bne.w	26a0 <cbvprintf+0xa3c>
		if (decimals < 0) {
    2310:	18bb      	adds	r3, r7, r2
    2312:	f140 81c6 	bpl.w	26a2 <cbvprintf+0xa3e>
			decimals = 0;
    2316:	f04f 0a00 	mov.w	sl, #0
    231a:	e1c6      	b.n	26aa <cbvprintf+0xa46>
    231c:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
    2320:	2b20      	cmp	r3, #32
    2322:	f63f af00 	bhi.w	2126 <cbvprintf+0x4c2>
    2326:	a201      	add	r2, pc, #4	; (adr r2, 232c <cbvprintf+0x6c8>)
    2328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    232c:	00002541 	.word	0x00002541
    2330:	00002127 	.word	0x00002127
    2334:	00002127 	.word	0x00002127
    2338:	00002127 	.word	0x00002127
    233c:	00002127 	.word	0x00002127
    2340:	00002127 	.word	0x00002127
    2344:	00002127 	.word	0x00002127
    2348:	00002127 	.word	0x00002127
    234c:	00002127 	.word	0x00002127
    2350:	000021ed 	.word	0x000021ed
    2354:	00002127 	.word	0x00002127
    2358:	000023dd 	.word	0x000023dd
    235c:	000024e1 	.word	0x000024e1
    2360:	000021ed 	.word	0x000021ed
    2364:	000021ed 	.word	0x000021ed
    2368:	000021ed 	.word	0x000021ed
    236c:	00002127 	.word	0x00002127
    2370:	000024e1 	.word	0x000024e1
    2374:	00002127 	.word	0x00002127
    2378:	00002127 	.word	0x00002127
    237c:	00002127 	.word	0x00002127
    2380:	00002127 	.word	0x00002127
    2384:	00002577 	.word	0x00002577
    2388:	00002541 	.word	0x00002541
    238c:	00002545 	.word	0x00002545
    2390:	00002127 	.word	0x00002127
    2394:	00002127 	.word	0x00002127
    2398:	000023b7 	.word	0x000023b7
    239c:	00002127 	.word	0x00002127
    23a0:	00002541 	.word	0x00002541
    23a4:	00002127 	.word	0x00002127
    23a8:	00002127 	.word	0x00002127
    23ac:	00002541 	.word	0x00002541
			OUTC('%');
    23b0:	4641      	mov	r1, r8
    23b2:	4648      	mov	r0, r9
    23b4:	e46a      	b.n	1c8c <cbvprintf+0x28>
			if (precision >= 0) {
    23b6:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    23b8:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
			if (precision >= 0) {
    23bc:	db0a      	blt.n	23d4 <cbvprintf+0x770>
				len = strnlen(bps, precision);
    23be:	4639      	mov	r1, r7
    23c0:	4648      	mov	r0, r9
    23c2:	f004 f859 	bl	6478 <strnlen>
			bpe = bps + len;
    23c6:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    23ca:	2600      	movs	r6, #0
		if (bps == NULL) {
    23cc:	f1b9 0f00 	cmp.w	r9, #0
    23d0:	d10c      	bne.n	23ec <cbvprintf+0x788>
    23d2:	e6a8      	b.n	2126 <cbvprintf+0x4c2>
				len = strlen(bps);
    23d4:	4648      	mov	r0, r9
    23d6:	f004 f848 	bl	646a <strlen>
    23da:	e7f4      	b.n	23c6 <cbvprintf+0x762>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    23dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    23de:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
		char sign = 0;
    23e2:	2600      	movs	r6, #0
			bpe = buf + 1;
    23e4:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
				bps = encode_float(value->dbl, conv, precision,
    23e8:	f10d 0974 	add.w	r9, sp, #116	; 0x74
		size_t nj_len = (bpe - bps);
    23ec:	ebaa 0209 	sub.w	r2, sl, r9
		if (sign != 0) {
    23f0:	b106      	cbz	r6, 23f4 <cbvprintf+0x790>
			nj_len += 1U;
    23f2:	3201      	adds	r2, #1
		if (conv->altform_0c) {
    23f4:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    23f8:	06c3      	lsls	r3, r0, #27
    23fa:	f140 824b 	bpl.w	2894 <cbvprintf+0xc30>
			nj_len += 2U;
    23fe:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
    2400:	9919      	ldr	r1, [sp, #100]	; 0x64
		if (width > 0) {
    2402:	9b08      	ldr	r3, [sp, #32]
		if (conv->pad_fp) {
    2404:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    2406:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
    2408:	bf44      	itt	mi
    240a:	991a      	ldrmi	r1, [sp, #104]	; 0x68
    240c:	1852      	addmi	r2, r2, r1
		if (width > 0) {
    240e:	2b00      	cmp	r3, #0
    2410:	dd25      	ble.n	245e <cbvprintf+0x7fa>
			width -= (int)nj_len;
    2412:	1a9b      	subs	r3, r3, r2
			if (!conv->flag_dash) {
    2414:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
    2418:	0751      	lsls	r1, r2, #29
    241a:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    241e:	f100 824b 	bmi.w	28b8 <cbvprintf+0xc54>
				if (conv->flag_zero) {
    2422:	0657      	lsls	r7, r2, #25
    2424:	f140 8244 	bpl.w	28b0 <cbvprintf+0xc4c>
					if (sign != 0) {
    2428:	2e00      	cmp	r6, #0
    242a:	f000 8243 	beq.w	28b4 <cbvprintf+0xc50>
    242e:	9308      	str	r3, [sp, #32]
						OUTC(sign);
    2430:	4641      	mov	r1, r8
    2432:	9b03      	ldr	r3, [sp, #12]
    2434:	4630      	mov	r0, r6
    2436:	4798      	blx	r3
    2438:	2800      	cmp	r0, #0
    243a:	f2c0 8236 	blt.w	28aa <cbvprintf+0xc46>
    243e:	9b08      	ldr	r3, [sp, #32]
    2440:	3501      	adds	r5, #1
						sign = 0;
    2442:	465e      	mov	r6, fp
					pad = '0';
    2444:	2730      	movs	r7, #48	; 0x30
    2446:	9308      	str	r3, [sp, #32]
    2448:	eb03 0b05 	add.w	fp, r3, r5
    244c:	9b08      	ldr	r3, [sp, #32]
    244e:	ebab 0503 	sub.w	r5, fp, r3
				while (width-- > 0) {
    2452:	2b00      	cmp	r3, #0
    2454:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    2458:	9308      	str	r3, [sp, #32]
    245a:	f300 821f 	bgt.w	289c <cbvprintf+0xc38>
		if (sign != 0) {
    245e:	b13e      	cbz	r6, 2470 <cbvprintf+0x80c>
			OUTC(sign);
    2460:	9b03      	ldr	r3, [sp, #12]
    2462:	4641      	mov	r1, r8
    2464:	4630      	mov	r0, r6
    2466:	4798      	blx	r3
    2468:	2800      	cmp	r0, #0
    246a:	f2c0 821e 	blt.w	28aa <cbvprintf+0xc46>
    246e:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    2470:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    2474:	0656      	lsls	r6, r2, #25
    2476:	f140 827d 	bpl.w	2974 <cbvprintf+0xd10>
			if (conv->specifier_a) {
    247a:	f99d 2061 	ldrsb.w	r2, [sp, #97]	; 0x61
    247e:	2a00      	cmp	r2, #0
    2480:	f2c0 821c 	blt.w	28bc <cbvprintf+0xc58>
    2484:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
    2488:	f899 0000 	ldrb.w	r0, [r9]
    248c:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    2490:	2a09      	cmp	r2, #9
    2492:	464f      	mov	r7, r9
    2494:	eb05 0b09 	add.w	fp, r5, r9
    2498:	f109 0901 	add.w	r9, r9, #1
    249c:	f240 823e 	bls.w	291c <cbvprintf+0xcb8>
				if (!conv->pad_postdp) {
    24a0:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
				pad_len = conv->pad0_value;
    24a4:	9e19      	ldr	r6, [sp, #100]	; 0x64
				if (!conv->pad_postdp) {
    24a6:	0690      	lsls	r0, r2, #26
    24a8:	d408      	bmi.n	24bc <cbvprintf+0x858>
    24aa:	eb06 090b 	add.w	r9, r6, fp
					while (pad_len-- > 0) {
    24ae:	2e00      	cmp	r6, #0
    24b0:	eba9 0b06 	sub.w	fp, r9, r6
    24b4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    24b8:	f300 8237 	bgt.w	292a <cbvprintf+0xcc6>
				if (*cp == '.') {
    24bc:	7838      	ldrb	r0, [r7, #0]
    24be:	282e      	cmp	r0, #46	; 0x2e
    24c0:	d10b      	bne.n	24da <cbvprintf+0x876>
					OUTC(*cp++);
    24c2:	9b03      	ldr	r3, [sp, #12]
    24c4:	4641      	mov	r1, r8
    24c6:	4798      	blx	r3
						OUTC('0');
    24c8:	2800      	cmp	r0, #0
    24ca:	f2c0 81ee 	blt.w	28aa <cbvprintf+0xc46>
					while (pad_len-- > 0) {
    24ce:	2e00      	cmp	r6, #0
						OUTC('0');
    24d0:	f10b 0b01 	add.w	fp, fp, #1
					while (pad_len-- > 0) {
    24d4:	f300 8231 	bgt.w	293a <cbvprintf+0xcd6>
					OUTC(*cp++);
    24d8:	3701      	adds	r7, #1
    24da:	ebab 0b07 	sub.w	fp, fp, r7
    24de:	e237      	b.n	2950 <cbvprintf+0xcec>
			if (conv->flag_plus) {
    24e0:	0730      	lsls	r0, r6, #28
    24e2:	d42b      	bmi.n	253c <cbvprintf+0x8d8>
				sign = ' ';
    24e4:	f016 0610 	ands.w	r6, r6, #16
    24e8:	bf18      	it	ne
    24ea:	2620      	movne	r6, #32
			if (value->sint < 0) {
    24ec:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
    24f0:	2a00      	cmp	r2, #0
    24f2:	f173 0100 	sbcs.w	r1, r3, #0
    24f6:	da05      	bge.n	2504 <cbvprintf+0x8a0>
				value->uint = (uint_value_type)-value->sint;
    24f8:	4252      	negs	r2, r2
    24fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    24fe:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				sign = '-';
    2502:	262d      	movs	r6, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    2504:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    2508:	9300      	str	r3, [sp, #0]
    250a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
    250e:	ab1d      	add	r3, sp, #116	; 0x74
    2510:	aa18      	add	r2, sp, #96	; 0x60
    2512:	f003 fdb1 	bl	6078 <encode_uint>
    2516:	4681      	mov	r9, r0
			if (precision >= 0) {
    2518:	2f00      	cmp	r7, #0
    251a:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    251e:	db0b      	blt.n	2538 <cbvprintf+0x8d4>
				conv->flag_zero = false;
    2520:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
				size_t len = bpe - bps;
    2524:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
    2528:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    252c:	4297      	cmp	r7, r2
				conv->flag_zero = false;
    252e:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
				if (len < (size_t)precision) {
    2532:	d901      	bls.n	2538 <cbvprintf+0x8d4>
					conv->pad0_value = precision - (int)len;
    2534:	1abf      	subs	r7, r7, r2
    2536:	9719      	str	r7, [sp, #100]	; 0x64
		const char *bpe = buf + sizeof(buf);
    2538:	469a      	mov	sl, r3
    253a:	e747      	b.n	23cc <cbvprintf+0x768>
				sign = '+';
    253c:	262b      	movs	r6, #43	; 0x2b
    253e:	e7d5      	b.n	24ec <cbvprintf+0x888>
		switch (conv->specifier) {
    2540:	2600      	movs	r6, #0
    2542:	e7df      	b.n	2504 <cbvprintf+0x8a0>
			if (value->ptr != NULL) {
    2544:	9816      	ldr	r0, [sp, #88]	; 0x58
    2546:	2800      	cmp	r0, #0
    2548:	f000 819e 	beq.w	2888 <cbvprintf+0xc24>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    254c:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
    2550:	9300      	str	r3, [sp, #0]
    2552:	aa18      	add	r2, sp, #96	; 0x60
    2554:	ab1d      	add	r3, sp, #116	; 0x74
    2556:	2100      	movs	r1, #0
    2558:	f003 fd8e 	bl	6078 <encode_uint>
				conv->altform_0c = true;
    255c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
    2560:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2564:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2568:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    256c:	4681      	mov	r9, r0
				conv->altform_0c = true;
    256e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
		char sign = 0;
    2572:	2600      	movs	r6, #0
				goto prec_int_pad0;
    2574:	e7d0      	b.n	2518 <cbvprintf+0x8b4>
				store_count(conv, value->ptr, count);
    2576:	9b16      	ldr	r3, [sp, #88]	; 0x58
	switch ((enum length_mod_enum)conv->length_mod) {
    2578:	2907      	cmp	r1, #7
    257a:	f63f add4 	bhi.w	2126 <cbvprintf+0x4c2>
    257e:	e8df f001 	tbb	[pc, r1]
    2582:	040d      	.short	0x040d
    2584:	08080d06 	.word	0x08080d06
    2588:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    258a:	701d      	strb	r5, [r3, #0]
		break;
    258c:	e5cb      	b.n	2126 <cbvprintf+0x4c2>
		*(short *)dp = (short)count;
    258e:	801d      	strh	r5, [r3, #0]
		break;
    2590:	e5c9      	b.n	2126 <cbvprintf+0x4c2>
		*(intmax_t *)dp = (intmax_t)count;
    2592:	4628      	mov	r0, r5
    2594:	17e9      	asrs	r1, r5, #31
    2596:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    259a:	e5c4      	b.n	2126 <cbvprintf+0x4c2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    259c:	601d      	str	r5, [r3, #0]
		break;
    259e:	e5c2      	b.n	2126 <cbvprintf+0x4c2>
		*sign = '-';
    25a0:	262d      	movs	r6, #45	; 0x2d
    25a2:	e631      	b.n	2208 <cbvprintf+0x5a4>
		*sign = '+';
    25a4:	262b      	movs	r6, #43	; 0x2b
    25a6:	e62f      	b.n	2208 <cbvprintf+0x5a4>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    25a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
    25ac:	459b      	cmp	fp, r3
    25ae:	d12d      	bne.n	260c <cbvprintf+0x9a8>
		if (fract == 0) {
    25b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    25b4:	4313      	orrs	r3, r2
    25b6:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
    25ba:	d118      	bne.n	25ee <cbvprintf+0x98a>
			if (isupper((int)c)) {
    25bc:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'I';
    25c0:	bf95      	itete	ls
    25c2:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
    25c6:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
    25ca:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'i';
    25ce:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'F';
    25d2:	bf94      	ite	ls
    25d4:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
    25d6:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
    25d8:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
		conv->flag_zero = false;
    25dc:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
    25e0:	f36f 1386 	bfc	r3, #6, #1
    25e4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		*bpe = buf;
    25e8:	f10d 0a77 	add.w	sl, sp, #119	; 0x77
		return bps;
    25ec:	e6fc      	b.n	23e8 <cbvprintf+0x784>
			if (isupper((int)c)) {
    25ee:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'N';
    25f2:	bf95      	itete	ls
    25f4:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
    25f8:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
    25fc:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'n';
    2600:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'N';
    2604:	bf94      	ite	ls
    2606:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
    2608:	236e      	movhi	r3, #110	; 0x6e
    260a:	e7e5      	b.n	25d8 <cbvprintf+0x974>
	bool is_subnormal = (exp == 0) && (fract != 0);
    260c:	f04f 0c00 	mov.w	ip, #0
    2610:	e610      	b.n	2234 <cbvprintf+0x5d0>
				exp--;
    2612:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			while (((fract <<= 1) & BIT_63) == 0) {
    2616:	1892      	adds	r2, r2, r2
    2618:	415b      	adcs	r3, r3
    261a:	2a00      	cmp	r2, #0
    261c:	f173 0100 	sbcs.w	r1, r3, #0
    2620:	daf7      	bge.n	2612 <cbvprintf+0x9ae>
    2622:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    2626:	e622      	b.n	226e <cbvprintf+0x60a>
			fract >>= 1;
    2628:	9b04      	ldr	r3, [sp, #16]
    262a:	9805      	ldr	r0, [sp, #20]
    262c:	085b      	lsrs	r3, r3, #1
    262e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
    2632:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2634:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
    2638:	46dc      	mov	ip, fp
			fract >>= 1;
    263a:	e9cd 3004 	strd	r3, r0, [sp, #16]
			exp++;
    263e:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2642:	d2f1      	bcs.n	2628 <cbvprintf+0x9c4>
		fract *= 5U;
    2644:	fba3 ab01 	umull	sl, fp, r3, r1
    2648:	e9cd ab04 	strd	sl, fp, [sp, #16]
    264c:	9b05      	ldr	r3, [sp, #20]
    264e:	4348      	muls	r0, r1
    2650:	18c3      	adds	r3, r0, r3
    2652:	9305      	str	r3, [sp, #20]
		exp++;
    2654:	f10c 0b02 	add.w	fp, ip, #2
		decexp--;
    2658:	3a01      	subs	r2, #1
    265a:	2301      	movs	r3, #1
    265c:	e616      	b.n	228c <cbvprintf+0x628>
		fract += 2;
    265e:	3302      	adds	r3, #2
    2660:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    2664:	a812      	add	r0, sp, #72	; 0x48
		fract += 2;
    2666:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
    266a:	920e      	str	r2, [sp, #56]	; 0x38
		_ldiv5(&fract);
    266c:	f003 fccd 	bl	600a <_ldiv5>
		decexp++;
    2670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2672:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
		exp--;
    2676:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
		decexp++;
    267a:	3201      	adds	r2, #1
			fract <<= 1;
    267c:	1800      	adds	r0, r0, r0
    267e:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    2680:	2800      	cmp	r0, #0
    2682:	f171 0300 	sbcs.w	r3, r1, #0
			exp--;
    2686:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    268a:	daf7      	bge.n	267c <cbvprintf+0xa18>
    268c:	e605      	b.n	229a <cbvprintf+0x636>
    268e:	2200      	movs	r2, #0
    2690:	4693      	mov	fp, r2
    2692:	e60a      	b.n	22aa <cbvprintf+0x646>
			precision -= decexp;
    2694:	1abf      	subs	r7, r7, r2
			c = 'f';
    2696:	f04f 0966 	mov.w	r9, #102	; 0x66
    269a:	e62b      	b.n	22f4 <cbvprintf+0x690>
	bool prune_zero = false;
    269c:	2300      	movs	r3, #0
    269e:	e632      	b.n	2306 <cbvprintf+0x6a2>
		decimals = precision + 1;
    26a0:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
    26a2:	2b10      	cmp	r3, #16
    26a4:	bfa8      	it	ge
    26a6:	2310      	movge	r3, #16
    26a8:	469a      	mov	sl, r3
    26aa:	2110      	movs	r1, #16
    26ac:	9111      	str	r1, [sp, #68]	; 0x44
	uint64_t round = BIT64(59); /* 0.5 */
    26ae:	2000      	movs	r0, #0
    26b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    26b4:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	while (decimals--) {
    26b8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    26bc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    26c0:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    26c4:	d11f      	bne.n	2706 <cbvprintf+0xaa2>
	fract += round;
    26c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    26c8:	18cb      	adds	r3, r1, r3
    26ca:	930a      	str	r3, [sp, #40]	; 0x28
    26cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    26ce:	eb40 0303 	adc.w	r3, r0, r3
    26d2:	930b      	str	r3, [sp, #44]	; 0x2c
	if (fract >= BIT64(60)) {
    26d4:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
    26d8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
    26dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    26e0:	4559      	cmp	r1, fp
    26e2:	bf08      	it	eq
    26e4:	4550      	cmpeq	r0, sl
    26e6:	d31a      	bcc.n	271e <cbvprintf+0xaba>
	fract += round;
    26e8:	4650      	mov	r0, sl
    26ea:	4659      	mov	r1, fp
    26ec:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	if (c == 'f') {
    26f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
    26f4:	d153      	bne.n	279e <cbvprintf+0xb3a>
		if (decexp > 0) {
    26f6:	2a00      	cmp	r2, #0
    26f8:	dc20      	bgt.n	273c <cbvprintf+0xad8>
			*buf++ = '0';
    26fa:	2330      	movs	r3, #48	; 0x30
    26fc:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
    2700:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    2704:	e02b      	b.n	275e <cbvprintf+0xafa>
	*v >>= 1;
    2706:	0849      	lsrs	r1, r1, #1
    2708:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    270c:	0840      	lsrs	r0, r0, #1
    270e:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
	_ldiv5(v);
    2712:	a814      	add	r0, sp, #80	; 0x50
    2714:	920f      	str	r2, [sp, #60]	; 0x3c
    2716:	f003 fc78 	bl	600a <_ldiv5>
    271a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
}
    271c:	e7cc      	b.n	26b8 <cbvprintf+0xa54>
	*v >>= 1;
    271e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2720:	920f      	str	r2, [sp, #60]	; 0x3c
    2722:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2724:	085b      	lsrs	r3, r3, #1
    2726:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
    272a:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
    272c:	a812      	add	r0, sp, #72	; 0x48
	*v >>= 1;
    272e:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	_ldiv5(v);
    2732:	f003 fc6a 	bl	600a <_ldiv5>
		decexp++;
    2736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2738:	3201      	adds	r2, #1
    273a:	e7d9      	b.n	26f0 <cbvprintf+0xa8c>
	char *buf = bps;
    273c:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
			while (decexp > 0 && digit_count > 0) {
    2740:	9911      	ldr	r1, [sp, #68]	; 0x44
    2742:	2900      	cmp	r1, #0
    2744:	dd09      	ble.n	275a <cbvprintf+0xaf6>
				*buf++ = _get_digit(&fract, &digit_count);
    2746:	a911      	add	r1, sp, #68	; 0x44
    2748:	a812      	add	r0, sp, #72	; 0x48
    274a:	920f      	str	r2, [sp, #60]	; 0x3c
    274c:	f003 fc7d 	bl	604a <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				*buf++ = _get_digit(&fract, &digit_count);
    2752:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
    2756:	3a01      	subs	r2, #1
    2758:	d1f2      	bne.n	2740 <cbvprintf+0xadc>
			conv->pad0_value = decexp;
    275a:	9219      	str	r2, [sp, #100]	; 0x64
			decexp = 0;
    275c:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
    275e:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
    2762:	0688      	lsls	r0, r1, #26
    2764:	d401      	bmi.n	276a <cbvprintf+0xb06>
    2766:	2f00      	cmp	r7, #0
    2768:	dd3f      	ble.n	27ea <cbvprintf+0xb86>
			*buf++ = '.';
    276a:	4653      	mov	r3, sl
    276c:	212e      	movs	r1, #46	; 0x2e
    276e:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
    2772:	b192      	cbz	r2, 279a <cbvprintf+0xb36>
    2774:	2f00      	cmp	r7, #0
    2776:	dd75      	ble.n	2864 <cbvprintf+0xc00>
			conv->pad0_value = -decexp;
    2778:	4251      	negs	r1, r2
    277a:	42b9      	cmp	r1, r7
    277c:	bfa8      	it	ge
    277e:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    2780:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
			conv->pad0_value = -decexp;
    2784:	9119      	str	r1, [sp, #100]	; 0x64
			conv->pad_postdp = (conv->pad0_value > 0);
    2786:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    2788:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    278c:	bfd4      	ite	le
    278e:	2100      	movle	r1, #0
    2790:	2101      	movgt	r1, #1
    2792:	f361 1045 	bfi	r0, r1, #5, #1
    2796:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
			*buf++ = '.';
    279a:	469a      	mov	sl, r3
    279c:	e020      	b.n	27e0 <cbvprintf+0xb7c>
		*buf = _get_digit(&fract, &digit_count);
    279e:	a911      	add	r1, sp, #68	; 0x44
    27a0:	a812      	add	r0, sp, #72	; 0x48
    27a2:	920f      	str	r2, [sp, #60]	; 0x3c
    27a4:	f003 fc51 	bl	604a <_get_digit>
		if (*buf++ != '0') {
    27a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		if (conv->flag_hash || (precision > 0)) {
    27aa:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		*buf = _get_digit(&fract, &digit_count);
    27ae:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
		if (*buf++ != '0') {
    27b2:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    27b4:	bf18      	it	ne
    27b6:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    27ba:	0699      	lsls	r1, r3, #26
    27bc:	d401      	bmi.n	27c2 <cbvprintf+0xb5e>
    27be:	2f00      	cmp	r7, #0
    27c0:	dd52      	ble.n	2868 <cbvprintf+0xc04>
			*buf++ = '.';
    27c2:	232e      	movs	r3, #46	; 0x2e
    27c4:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    27c8:	f10d 0376 	add.w	r3, sp, #118	; 0x76
    27cc:	e7e5      	b.n	279a <cbvprintf+0xb36>
		*buf++ = _get_digit(&fract, &digit_count);
    27ce:	a911      	add	r1, sp, #68	; 0x44
    27d0:	a812      	add	r0, sp, #72	; 0x48
    27d2:	920f      	str	r2, [sp, #60]	; 0x3c
    27d4:	f003 fc39 	bl	604a <_get_digit>
    27d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    27da:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
    27de:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
    27e0:	2f00      	cmp	r7, #0
    27e2:	dd02      	ble.n	27ea <cbvprintf+0xb86>
    27e4:	9911      	ldr	r1, [sp, #68]	; 0x44
    27e6:	2900      	cmp	r1, #0
    27e8:	dcf1      	bgt.n	27ce <cbvprintf+0xb6a>
	if (prune_zero) {
    27ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    27ec:	2b00      	cmp	r3, #0
    27ee:	d13e      	bne.n	286e <cbvprintf+0xc0a>
	conv->pad0_pre_exp = precision;
    27f0:	971a      	str	r7, [sp, #104]	; 0x68
	if ((c == 'e') || (c == 'E')) {
    27f2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
    27f6:	2945      	cmp	r1, #69	; 0x45
    27f8:	d122      	bne.n	2840 <cbvprintf+0xbdc>
		if (decexp < 0) {
    27fa:	2a00      	cmp	r2, #0
		*buf++ = c;
    27fc:	4650      	mov	r0, sl
			decexp = -decexp;
    27fe:	bfba      	itte	lt
    2800:	4252      	neglt	r2, r2
			*buf++ = '-';
    2802:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
    2804:	212b      	movge	r1, #43	; 0x2b
		if (decexp >= 100) {
    2806:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
    2808:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
    280c:	f88a 1001 	strb.w	r1, [sl, #1]
		if (decexp >= 100) {
    2810:	dd0a      	ble.n	2828 <cbvprintf+0xbc4>
			*buf++ = (decexp / 100) + '0';
    2812:	2764      	movs	r7, #100	; 0x64
    2814:	fb92 f1f7 	sdiv	r1, r2, r7
    2818:	f101 0c30 	add.w	ip, r1, #48	; 0x30
    281c:	f10a 0003 	add.w	r0, sl, #3
    2820:	f88a c002 	strb.w	ip, [sl, #2]
			decexp %= 100;
    2824:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    2828:	270a      	movs	r7, #10
    282a:	4682      	mov	sl, r0
    282c:	fb92 f1f7 	sdiv	r1, r2, r7
		*buf++ = (decexp % 10) + '0';
    2830:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
    2834:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2838:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    283a:	f80a cb02 	strb.w	ip, [sl], #2
		*buf++ = (decexp % 10) + '0';
    283e:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
    2840:	9a19      	ldr	r2, [sp, #100]	; 0x64
    2842:	2a00      	cmp	r2, #0
    2844:	dc1e      	bgt.n	2884 <cbvprintf+0xc20>
    2846:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2848:	2a00      	cmp	r2, #0
    284a:	bfd4      	ite	le
    284c:	2200      	movle	r2, #0
    284e:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2850:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
    2854:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
    2858:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
    285a:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
	*buf = 0;
    285e:	f88a 2000 	strb.w	r2, [sl]
	return bps;
    2862:	e5c1      	b.n	23e8 <cbvprintf+0x784>
			*buf++ = '.';
    2864:	469a      	mov	sl, r3
    2866:	e7c0      	b.n	27ea <cbvprintf+0xb86>
		if (*buf++ != '0') {
    2868:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
    286c:	e7bd      	b.n	27ea <cbvprintf+0xb86>
		conv->pad0_pre_exp = 0;
    286e:	2100      	movs	r1, #0
    2870:	911a      	str	r1, [sp, #104]	; 0x68
		while (*--buf == '0') {
    2872:	4650      	mov	r0, sl
    2874:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
    2878:	2930      	cmp	r1, #48	; 0x30
    287a:	d0fa      	beq.n	2872 <cbvprintf+0xc0e>
		if (*buf != '.') {
    287c:	292e      	cmp	r1, #46	; 0x2e
    287e:	bf18      	it	ne
    2880:	4682      	movne	sl, r0
    2882:	e7b6      	b.n	27f2 <cbvprintf+0xb8e>
		|| (conv->pad0_pre_exp > 0);
    2884:	2201      	movs	r2, #1
    2886:	e7e3      	b.n	2850 <cbvprintf+0xbec>
			bpe = bps + 5;
    2888:	f8df a138 	ldr.w	sl, [pc, #312]	; 29c4 <cbvprintf+0xd60>
		char sign = 0;
    288c:	4606      	mov	r6, r0
			bps = "(nil)";
    288e:	f1aa 0905 	sub.w	r9, sl, #5
    2892:	e5ab      	b.n	23ec <cbvprintf+0x788>
		} else if (conv->altform_0) {
    2894:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
    2896:	bf48      	it	mi
    2898:	3201      	addmi	r2, #1
    289a:	e5b1      	b.n	2400 <cbvprintf+0x79c>
					OUTC(pad);
    289c:	9b03      	ldr	r3, [sp, #12]
    289e:	4641      	mov	r1, r8
    28a0:	4638      	mov	r0, r7
    28a2:	4798      	blx	r3
    28a4:	2800      	cmp	r0, #0
    28a6:	f6bf add1 	bge.w	244c <cbvprintf+0x7e8>
#undef OUTS
#undef OUTC
}
    28aa:	b025      	add	sp, #148	; 0x94
    28ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    28b0:	2720      	movs	r7, #32
    28b2:	e5c8      	b.n	2446 <cbvprintf+0x7e2>
					pad = '0';
    28b4:	2730      	movs	r7, #48	; 0x30
    28b6:	e5c6      	b.n	2446 <cbvprintf+0x7e2>
			width -= (int)nj_len;
    28b8:	9308      	str	r3, [sp, #32]
    28ba:	e5d0      	b.n	245e <cbvprintf+0x7fa>
    28bc:	eba5 0b09 	sub.w	fp, r5, r9
    28c0:	464e      	mov	r6, r9
    28c2:	eb0b 0509 	add.w	r5, fp, r9
				while (*cp != 'p') {
    28c6:	f819 0b01 	ldrb.w	r0, [r9], #1
    28ca:	2870      	cmp	r0, #112	; 0x70
    28cc:	d120      	bne.n	2910 <cbvprintf+0xcac>
			while (pad_len-- > 0) {
    28ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    28d0:	eb02 0905 	add.w	r9, r2, r5
    28d4:	eba9 0205 	sub.w	r2, r9, r5
    28d8:	2a00      	cmp	r2, #0
    28da:	dc43      	bgt.n	2964 <cbvprintf+0xd00>
			OUTS(cp, bpe);
    28dc:	4653      	mov	r3, sl
    28de:	4632      	mov	r2, r6
			OUTS(bps, bpe);
    28e0:	9803      	ldr	r0, [sp, #12]
    28e2:	4641      	mov	r1, r8
    28e4:	f003 fc13 	bl	610e <outs>
    28e8:	2800      	cmp	r0, #0
    28ea:	dbde      	blt.n	28aa <cbvprintf+0xc46>
    28ec:	9b08      	ldr	r3, [sp, #32]
    28ee:	4428      	add	r0, r5
    28f0:	4403      	add	r3, r0
			while (pad_len-- > 0) {
    28f2:	4605      	mov	r5, r0
    28f4:	469a      	mov	sl, r3
		while (width > 0) {
    28f6:	ebaa 0305 	sub.w	r3, sl, r5
    28fa:	2b00      	cmp	r3, #0
    28fc:	f77f ac13 	ble.w	2126 <cbvprintf+0x4c2>
			OUTC(' ');
    2900:	9b03      	ldr	r3, [sp, #12]
    2902:	4641      	mov	r1, r8
    2904:	2020      	movs	r0, #32
    2906:	4798      	blx	r3
    2908:	2800      	cmp	r0, #0
    290a:	dbce      	blt.n	28aa <cbvprintf+0xc46>
    290c:	3501      	adds	r5, #1
			--width;
    290e:	e7f2      	b.n	28f6 <cbvprintf+0xc92>
					OUTC(*cp++);
    2910:	9b03      	ldr	r3, [sp, #12]
    2912:	4641      	mov	r1, r8
    2914:	4798      	blx	r3
    2916:	2800      	cmp	r0, #0
    2918:	dad2      	bge.n	28c0 <cbvprintf+0xc5c>
    291a:	e7c6      	b.n	28aa <cbvprintf+0xc46>
					OUTC(*cp++);
    291c:	9b03      	ldr	r3, [sp, #12]
    291e:	4641      	mov	r1, r8
    2920:	4798      	blx	r3
    2922:	2800      	cmp	r0, #0
    2924:	f6bf adb0 	bge.w	2488 <cbvprintf+0x824>
    2928:	e7bf      	b.n	28aa <cbvprintf+0xc46>
						OUTC('0');
    292a:	9b03      	ldr	r3, [sp, #12]
    292c:	4641      	mov	r1, r8
    292e:	2030      	movs	r0, #48	; 0x30
    2930:	4798      	blx	r3
    2932:	2800      	cmp	r0, #0
    2934:	f6bf adbb 	bge.w	24ae <cbvprintf+0x84a>
    2938:	e7b7      	b.n	28aa <cbvprintf+0xc46>
						OUTC('0');
    293a:	9b03      	ldr	r3, [sp, #12]
    293c:	4641      	mov	r1, r8
    293e:	2030      	movs	r0, #48	; 0x30
    2940:	4798      	blx	r3
    2942:	3e01      	subs	r6, #1
    2944:	e5c0      	b.n	24c8 <cbvprintf+0x864>
					OUTC(*cp++);
    2946:	9b03      	ldr	r3, [sp, #12]
    2948:	4641      	mov	r1, r8
    294a:	4798      	blx	r3
    294c:	2800      	cmp	r0, #0
    294e:	dbac      	blt.n	28aa <cbvprintf+0xc46>
    2950:	463e      	mov	r6, r7
    2952:	eb0b 0507 	add.w	r5, fp, r7
				while (isdigit((int)*cp)) {
    2956:	f817 0b01 	ldrb.w	r0, [r7], #1
    295a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    295e:	2a09      	cmp	r2, #9
    2960:	d9f1      	bls.n	2946 <cbvprintf+0xce2>
    2962:	e7b4      	b.n	28ce <cbvprintf+0xc6a>
				OUTC('0');
    2964:	9b03      	ldr	r3, [sp, #12]
    2966:	4641      	mov	r1, r8
    2968:	2030      	movs	r0, #48	; 0x30
    296a:	4798      	blx	r3
    296c:	2800      	cmp	r0, #0
    296e:	db9c      	blt.n	28aa <cbvprintf+0xc46>
    2970:	3501      	adds	r5, #1
    2972:	e7af      	b.n	28d4 <cbvprintf+0xc70>
			if (conv->altform_0c | conv->altform_0) {
    2974:	06d1      	lsls	r1, r2, #27
    2976:	d401      	bmi.n	297c <cbvprintf+0xd18>
    2978:	0712      	lsls	r2, r2, #28
    297a:	d506      	bpl.n	298a <cbvprintf+0xd26>
				OUTC('0');
    297c:	9b03      	ldr	r3, [sp, #12]
    297e:	4641      	mov	r1, r8
    2980:	2030      	movs	r0, #48	; 0x30
    2982:	4798      	blx	r3
    2984:	2800      	cmp	r0, #0
    2986:	db90      	blt.n	28aa <cbvprintf+0xc46>
    2988:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    298a:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
    298e:	06d3      	lsls	r3, r2, #27
    2990:	d507      	bpl.n	29a2 <cbvprintf+0xd3e>
				OUTC(conv->specifier);
    2992:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
    2996:	9b03      	ldr	r3, [sp, #12]
    2998:	4641      	mov	r1, r8
    299a:	4798      	blx	r3
    299c:	2800      	cmp	r0, #0
    299e:	db84      	blt.n	28aa <cbvprintf+0xc46>
    29a0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    29a2:	9e19      	ldr	r6, [sp, #100]	; 0x64
    29a4:	442e      	add	r6, r5
    29a6:	1b72      	subs	r2, r6, r5
    29a8:	2a00      	cmp	r2, #0
    29aa:	dc02      	bgt.n	29b2 <cbvprintf+0xd4e>
			OUTS(bps, bpe);
    29ac:	4653      	mov	r3, sl
    29ae:	464a      	mov	r2, r9
    29b0:	e796      	b.n	28e0 <cbvprintf+0xc7c>
				OUTC('0');
    29b2:	9b03      	ldr	r3, [sp, #12]
    29b4:	4641      	mov	r1, r8
    29b6:	2030      	movs	r0, #48	; 0x30
    29b8:	4798      	blx	r3
    29ba:	2800      	cmp	r0, #0
    29bc:	f6ff af75 	blt.w	28aa <cbvprintf+0xc46>
    29c0:	3501      	adds	r5, #1
    29c2:	e7f0      	b.n	29a6 <cbvprintf+0xd42>
    29c4:	00007b73 	.word	0x00007b73

000029c8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    29c8:	b510      	push	{r4, lr}
    29ca:	4807      	ldr	r0, [pc, #28]	; (29e8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    29cc:	4c07      	ldr	r4, [pc, #28]	; (29ec <uart_console_init+0x24>)
    29ce:	f002 fa4f 	bl	4e70 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    29d2:	4b07      	ldr	r3, [pc, #28]	; (29f0 <uart_console_init+0x28>)
    29d4:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    29d6:	4620      	mov	r0, r4
    29d8:	f000 fe24 	bl	3624 <__stdout_hook_install>
	__printk_hook_install(console_out);
    29dc:	4620      	mov	r0, r4
    29de:	f7ff f847 	bl	1a70 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    29e2:	2000      	movs	r0, #0
    29e4:	bd10      	pop	{r4, pc}
    29e6:	bf00      	nop
    29e8:	00007b74 	.word	0x00007b74
    29ec:	000029f5 	.word	0x000029f5
    29f0:	2000074c 	.word	0x2000074c

000029f4 <console_out>:
	if ('\n' == c) {
    29f4:	280a      	cmp	r0, #10
{
    29f6:	b538      	push	{r3, r4, r5, lr}
    29f8:	4d07      	ldr	r5, [pc, #28]	; (2a18 <console_out+0x24>)
    29fa:	4604      	mov	r4, r0
	if ('\n' == c) {
    29fc:	d104      	bne.n	2a08 <console_out+0x14>
    29fe:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2a00:	6883      	ldr	r3, [r0, #8]
    2a02:	210d      	movs	r1, #13
    2a04:	685b      	ldr	r3, [r3, #4]
    2a06:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2a08:	6828      	ldr	r0, [r5, #0]
    2a0a:	6883      	ldr	r3, [r0, #8]
    2a0c:	b2e1      	uxtb	r1, r4
    2a0e:	685b      	ldr	r3, [r3, #4]
    2a10:	4798      	blx	r3
}
    2a12:	4620      	mov	r0, r4
    2a14:	bd38      	pop	{r3, r4, r5, pc}
    2a16:	bf00      	nop
    2a18:	2000074c 	.word	0x2000074c

00002a1c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2a1c:	4a0e      	ldr	r2, [pc, #56]	; (2a58 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2a1e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2a20:	1a84      	subs	r4, r0, r2
    2a22:	10a3      	asrs	r3, r4, #2
    2a24:	4c0d      	ldr	r4, [pc, #52]	; (2a5c <onoff_stop+0x40>)
    2a26:	435c      	muls	r4, r3
{
    2a28:	4605      	mov	r5, r0
    2a2a:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    2a2c:	200c      	movs	r0, #12
    2a2e:	fb00 2004 	mla	r0, r0, r4, r2
{
    2a32:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    2a34:	2140      	movs	r1, #64	; 0x40
    2a36:	4408      	add	r0, r1
    2a38:	f003 fb89 	bl	614e <set_off_state>
	if (err < 0) {
    2a3c:	1e01      	subs	r1, r0, #0
    2a3e:	db05      	blt.n	2a4c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    2a40:	4b07      	ldr	r3, [pc, #28]	; (2a60 <onoff_stop+0x44>)
    2a42:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    2a46:	6863      	ldr	r3, [r4, #4]
    2a48:	4798      	blx	r3
	return 0;
    2a4a:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    2a4c:	4628      	mov	r0, r5
    2a4e:	4633      	mov	r3, r6
}
    2a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2a54:	4718      	bx	r3
    2a56:	bf00      	nop
    2a58:	20000760 	.word	0x20000760
    2a5c:	b6db6db7 	.word	0xb6db6db7
    2a60:	000075cc 	.word	0x000075cc

00002a64 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2a68:	4e10      	ldr	r6, [pc, #64]	; (2aac <onoff_start+0x48>)
    2a6a:	1b84      	subs	r4, r0, r6
    2a6c:	10a3      	asrs	r3, r4, #2
    2a6e:	4c10      	ldr	r4, [pc, #64]	; (2ab0 <onoff_start+0x4c>)
    2a70:	435c      	muls	r4, r3
    2a72:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    2a74:	250c      	movs	r5, #12
    2a76:	4365      	muls	r5, r4
{
    2a78:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    2a7a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    2a7e:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    2a80:	4430      	add	r0, r6
    2a82:	2140      	movs	r1, #64	; 0x40
    2a84:	f003 fb7c 	bl	6180 <set_starting_state>
	if (err < 0) {
    2a88:	1e01      	subs	r1, r0, #0
    2a8a:	db09      	blt.n	2aa0 <onoff_start+0x3c>
	subdata->cb = cb;
    2a8c:	4a09      	ldr	r2, [pc, #36]	; (2ab4 <onoff_start+0x50>)
    2a8e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
    2a90:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    2a94:	4b08      	ldr	r3, [pc, #32]	; (2ab8 <onoff_start+0x54>)
    2a96:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    2a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2a9e:	4718      	bx	r3
		notify(mgr, err);
    2aa0:	4640      	mov	r0, r8
    2aa2:	463b      	mov	r3, r7
}
    2aa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    2aa8:	4718      	bx	r3
    2aaa:	bf00      	nop
    2aac:	20000760 	.word	0x20000760
    2ab0:	b6db6db7 	.word	0xb6db6db7
    2ab4:	000061e3 	.word	0x000061e3
    2ab8:	000075cc 	.word	0x000075cc

00002abc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2abc:	2200      	movs	r2, #0
{
    2abe:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2ac0:	2101      	movs	r1, #1
{
    2ac2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2ac4:	4610      	mov	r0, r2
    2ac6:	f000 fae3 	bl	3090 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    2aca:	2000      	movs	r0, #0
    2acc:	f000 fac2 	bl	3054 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2ad0:	480f      	ldr	r0, [pc, #60]	; (2b10 <clk_init+0x54>)
    2ad2:	f001 fe69 	bl	47a8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2ad6:	4b0f      	ldr	r3, [pc, #60]	; (2b14 <clk_init+0x58>)
    2ad8:	4298      	cmp	r0, r3
    2ada:	d115      	bne.n	2b08 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2adc:	f004 faa1 	bl	7022 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2ae0:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2ae2:	490d      	ldr	r1, [pc, #52]	; (2b18 <clk_init+0x5c>)
    2ae4:	4630      	mov	r0, r6
    2ae6:	f003 f94e 	bl	5d86 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2aea:	2800      	cmp	r0, #0
    2aec:	db0b      	blt.n	2b06 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2aee:	2501      	movs	r5, #1
    2af0:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    2af2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2af4:	4908      	ldr	r1, [pc, #32]	; (2b18 <clk_init+0x5c>)
    2af6:	f104 001c 	add.w	r0, r4, #28
    2afa:	f003 f944 	bl	5d86 <onoff_manager_init>
		if (err < 0) {
    2afe:	2800      	cmp	r0, #0
    2b00:	db01      	blt.n	2b06 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2b02:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2b04:	2000      	movs	r0, #0
}
    2b06:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2b08:	f06f 0004 	mvn.w	r0, #4
    2b0c:	e7fb      	b.n	2b06 <clk_init+0x4a>
    2b0e:	bf00      	nop
    2b10:	00002b51 	.word	0x00002b51
    2b14:	0bad0000 	.word	0x0bad0000
    2b18:	000075dc 	.word	0x000075dc

00002b1c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2b1c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2b1e:	230c      	movs	r3, #12
    2b20:	4809      	ldr	r0, [pc, #36]	; (2b48 <clkstarted_handle.constprop.0+0x2c>)
    2b22:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2b24:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2b26:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2b28:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2b2c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2b2e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2b30:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2b32:	4418      	add	r0, r3
    2b34:	f003 fb42 	bl	61bc <set_on_state>
	if (callback) {
    2b38:	b12d      	cbz	r5, 2b46 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2b3a:	4632      	mov	r2, r6
    2b3c:	462b      	mov	r3, r5
    2b3e:	4803      	ldr	r0, [pc, #12]	; (2b4c <clkstarted_handle.constprop.0+0x30>)
}
    2b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2b44:	4718      	bx	r3
}
    2b46:	bd70      	pop	{r4, r5, r6, pc}
    2b48:	20000760 	.word	0x20000760
    2b4c:	20000060 	.word	0x20000060

00002b50 <clock_event_handler>:
	switch (event) {
    2b50:	b110      	cbz	r0, 2b58 <clock_event_handler+0x8>
    2b52:	2801      	cmp	r0, #1
    2b54:	d004      	beq.n	2b60 <clock_event_handler+0x10>
    2b56:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2b58:	4b03      	ldr	r3, [pc, #12]	; (2b68 <clock_event_handler+0x18>)
    2b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2b5c:	075b      	lsls	r3, r3, #29
    2b5e:	d101      	bne.n	2b64 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2b60:	f7ff bfdc 	b.w	2b1c <clkstarted_handle.constprop.0>
}
    2b64:	4770      	bx	lr
    2b66:	bf00      	nop
    2b68:	20000760 	.word	0x20000760

00002b6c <generic_hfclk_start>:
{
    2b6c:	b508      	push	{r3, lr}
    2b6e:	f04f 0320 	mov.w	r3, #32
    2b72:	f3ef 8111 	mrs	r1, BASEPRI
    2b76:	f383 8811 	msr	BASEPRI, r3
    2b7a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2b7e:	4a12      	ldr	r2, [pc, #72]	; (2bc8 <generic_hfclk_start+0x5c>)
    2b80:	6813      	ldr	r3, [r2, #0]
    2b82:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2b86:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2b8a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2b8c:	d00c      	beq.n	2ba8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2b92:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2b96:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2b9a:	f013 0301 	ands.w	r3, r3, #1
    2b9e:	d003      	beq.n	2ba8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2ba0:	480a      	ldr	r0, [pc, #40]	; (2bcc <generic_hfclk_start+0x60>)
    2ba2:	f003 fb0b 	bl	61bc <set_on_state>
			already_started = true;
    2ba6:	2301      	movs	r3, #1
	__asm__ volatile(
    2ba8:	f381 8811 	msr	BASEPRI, r1
    2bac:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2bb0:	b123      	cbz	r3, 2bbc <generic_hfclk_start+0x50>
}
    2bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2bb6:	2000      	movs	r0, #0
    2bb8:	f7ff bfb0 	b.w	2b1c <clkstarted_handle.constprop.0>
}
    2bbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2bc0:	2001      	movs	r0, #1
    2bc2:	f001 be01 	b.w	47c8 <nrfx_clock_start>
    2bc6:	bf00      	nop
    2bc8:	200007b0 	.word	0x200007b0
    2bcc:	200007a0 	.word	0x200007a0

00002bd0 <lfclk_start>:
{
    2bd0:	b510      	push	{r4, lr}
	if (!once) {
    2bd2:	4c07      	ldr	r4, [pc, #28]	; (2bf0 <lfclk_start+0x20>)
    2bd4:	7823      	ldrb	r3, [r4, #0]
    2bd6:	b92b      	cbnz	r3, 2be4 <lfclk_start+0x14>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2bd8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    2bdc:	f004 fbbb 	bl	7356 <z_impl_k_busy_wait>
		once = true;
    2be0:	2301      	movs	r3, #1
    2be2:	7023      	strb	r3, [r4, #0]
}
    2be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    2be8:	2000      	movs	r0, #0
    2bea:	f001 bded 	b.w	47c8 <nrfx_clock_start>
    2bee:	bf00      	nop
    2bf0:	20000984 	.word	0x20000984

00002bf4 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2bf4:	4b09      	ldr	r3, [pc, #36]	; (2c1c <generic_hfclk_stop+0x28>)
    2bf6:	f3bf 8f5b 	dmb	ish
    2bfa:	e853 2f00 	ldrex	r2, [r3]
    2bfe:	f022 0102 	bic.w	r1, r2, #2
    2c02:	e843 1000 	strex	r0, r1, [r3]
    2c06:	2800      	cmp	r0, #0
    2c08:	d1f7      	bne.n	2bfa <generic_hfclk_stop+0x6>
    2c0a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2c0e:	07d3      	lsls	r3, r2, #31
    2c10:	d402      	bmi.n	2c18 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2c12:	2001      	movs	r0, #1
    2c14:	f001 be24 	b.w	4860 <nrfx_clock_stop>
}
    2c18:	4770      	bx	lr
    2c1a:	bf00      	nop
    2c1c:	200007b0 	.word	0x200007b0

00002c20 <api_blocking_start>:
{
    2c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2c22:	2200      	movs	r2, #0
    2c24:	2301      	movs	r3, #1
    2c26:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2c2a:	4a09      	ldr	r2, [pc, #36]	; (2c50 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2c2c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2c30:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2c32:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2c36:	f003 faf7 	bl	6228 <api_start>
	if (err < 0) {
    2c3a:	2800      	cmp	r0, #0
    2c3c:	db05      	blt.n	2c4a <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2c42:	2300      	movs	r3, #0
    2c44:	4668      	mov	r0, sp
    2c46:	f002 fd8b 	bl	5760 <z_impl_k_sem_take>
}
    2c4a:	b005      	add	sp, #20
    2c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    2c50:	000061fb 	.word	0x000061fb

00002c54 <z_nrf_clock_control_lf_on>:
{
    2c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2c58:	493a      	ldr	r1, [pc, #232]	; (2d44 <z_nrf_clock_control_lf_on+0xf0>)
    2c5a:	f3bf 8f5b 	dmb	ish
    2c5e:	4606      	mov	r6, r0
    2c60:	2201      	movs	r2, #1
    2c62:	e851 3f00 	ldrex	r3, [r1]
    2c66:	e841 2000 	strex	r0, r2, [r1]
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d1f9      	bne.n	2c62 <z_nrf_clock_control_lf_on+0xe>
    2c6e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2c72:	b933      	cbnz	r3, 2c82 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2c74:	4934      	ldr	r1, [pc, #208]	; (2d48 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    2c76:	4835      	ldr	r0, [pc, #212]	; (2d4c <z_nrf_clock_control_lf_on+0xf8>)
    2c78:	604b      	str	r3, [r1, #4]
    2c7a:	60cb      	str	r3, [r1, #12]
    2c7c:	608a      	str	r2, [r1, #8]
    2c7e:	f003 f895 	bl	5dac <onoff_request>
	switch (start_mode) {
    2c82:	1e73      	subs	r3, r6, #1
    2c84:	2b01      	cmp	r3, #1
    2c86:	d832      	bhi.n	2cee <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2c88:	2e01      	cmp	r6, #1
    2c8a:	d107      	bne.n	2c9c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2c8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c90:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2c94:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2c98:	2b01      	cmp	r3, #1
    2c9a:	d028      	beq.n	2cee <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2c9c:	f004 fb55 	bl	734a <k_is_in_isr>
    2ca0:	4604      	mov	r4, r0
    2ca2:	b918      	cbnz	r0, 2cac <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    2ca4:	4b2a      	ldr	r3, [pc, #168]	; (2d50 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    2ca6:	781b      	ldrb	r3, [r3, #0]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d144      	bne.n	2d36 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    2cac:	f04f 0320 	mov.w	r3, #32
    2cb0:	f3ef 8511 	mrs	r5, BASEPRI
    2cb4:	f383 8811 	msr	BASEPRI, r3
    2cb8:	f3bf 8f6f 	isb	sy
    2cbc:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2cbe:	4f25      	ldr	r7, [pc, #148]	; (2d54 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cc0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2d58 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2cc4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 2d5c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2cc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ccc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2cd0:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    2cd4:	03d2      	lsls	r2, r2, #15
    2cd6:	d50c      	bpl.n	2cf2 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2cd8:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2cdc:	2b01      	cmp	r3, #1
    2cde:	d001      	beq.n	2ce4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2ce0:	2e01      	cmp	r6, #1
    2ce2:	d106      	bne.n	2cf2 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    2ce4:	b30c      	cbz	r4, 2d2a <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    2ce6:	f385 8811 	msr	BASEPRI, r5
    2cea:	f3bf 8f6f 	isb	sy
}
    2cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    2cf2:	b1ac      	cbz	r4, 2d20 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2cf4:	4628      	mov	r0, r5
    2cf6:	f000 fa47 	bl	3188 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2cfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2cfe:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2d02:	2b00      	cmp	r3, #0
    2d04:	d1e0      	bne.n	2cc8 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2d06:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    2d08:	2900      	cmp	r1, #0
    2d0a:	d0dd      	beq.n	2cc8 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d0c:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2d0e:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d10:	2301      	movs	r3, #1
    2d12:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    2d16:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d1a:	f8c9 3000 	str.w	r3, [r9]
}
    2d1e:	e7d3      	b.n	2cc8 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    2d20:	2100      	movs	r1, #0
    2d22:	2021      	movs	r0, #33	; 0x21
    2d24:	f002 fcd4 	bl	56d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2d28:	e7e7      	b.n	2cfa <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    2d2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d2e:	2202      	movs	r2, #2
    2d30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2d34:	e7db      	b.n	2cee <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    2d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d3a:	2202      	movs	r2, #2
    2d3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2d40:	4605      	mov	r5, r0
}
    2d42:	e7bc      	b.n	2cbe <z_nrf_clock_control_lf_on+0x6a>
    2d44:	200007b4 	.word	0x200007b4
    2d48:	20000750 	.word	0x20000750
    2d4c:	2000077c 	.word	0x2000077c
    2d50:	20000d97 	.word	0x20000d97
    2d54:	40000104 	.word	0x40000104
    2d58:	e000e100 	.word	0xe000e100
    2d5c:	40000008 	.word	0x40000008

00002d60 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    2d60:	4a04      	ldr	r2, [pc, #16]	; (2d74 <sys_clock_timeout_handler+0x14>)
    2d62:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    2d64:	1ac8      	subs	r0, r1, r3
    2d66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    2d6a:	4403      	add	r3, r0
    2d6c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2d6e:	f002 beef 	b.w	5b50 <z_clock_announce>
    2d72:	bf00      	nop
    2d74:	200007c4 	.word	0x200007c4

00002d78 <set_absolute_alarm>:
{
    2d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d7c:	0086      	lsls	r6, r0, #2
    2d7e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2d82:	f100 0450 	add.w	r4, r0, #80	; 0x50
    2d86:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    2d8a:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2d8c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2e0c <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    2d90:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2d94:	b2a4      	uxth	r4, r4
    2d96:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2d9a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2d9e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    2da2:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2da6:	4087      	lsls	r7, r0
    2da8:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    2daa:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2dae:	eba3 030a 	sub.w	r3, r3, sl
    2db2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2db6:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2dba:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    2dbc:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    2dc0:	d102      	bne.n	2dc8 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    2dc2:	2013      	movs	r0, #19
    2dc4:	f004 fac7 	bl	7356 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    2dc8:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    2dcc:	1aab      	subs	r3, r5, r2
    2dce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    2dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2dd6:	bf88      	it	hi
    2dd8:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2dda:	2300      	movs	r3, #0
    2ddc:	6023      	str	r3, [r4, #0]
    2dde:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2de0:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2de4:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2de8:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    2dec:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    2df0:	459a      	cmp	sl, r3
    2df2:	d006      	beq.n	2e02 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    2df4:	1aeb      	subs	r3, r5, r3
    2df6:	3b02      	subs	r3, #2
    2df8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2dfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    2e00:	d801      	bhi.n	2e06 <set_absolute_alarm+0x8e>
}
    2e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    2e06:	462b      	mov	r3, r5
    2e08:	e7cf      	b.n	2daa <set_absolute_alarm+0x32>
    2e0a:	bf00      	nop
    2e0c:	40011000 	.word	0x40011000

00002e10 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    2e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    2e12:	4e10      	ldr	r6, [pc, #64]	; (2e54 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e14:	4f10      	ldr	r7, [pc, #64]	; (2e58 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2e16:	2500      	movs	r5, #0
    2e18:	4b10      	ldr	r3, [pc, #64]	; (2e5c <rtc_nrf_isr+0x4c>)
    2e1a:	2000      	movs	r0, #0
    2e1c:	681c      	ldr	r4, [r3, #0]
    2e1e:	461a      	mov	r2, r3
    2e20:	b105      	cbz	r5, 2e24 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    2e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    2e24:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    2e28:	03c9      	lsls	r1, r1, #15
    2e2a:	d5fa      	bpl.n	2e22 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e2c:	6839      	ldr	r1, [r7, #0]
    2e2e:	2900      	cmp	r1, #0
    2e30:	d0f7      	beq.n	2e22 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2e32:	603d      	str	r5, [r7, #0]
    2e34:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2e36:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2e3a:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    2e3e:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2e42:	2501      	movs	r5, #1
			if (handler) {
    2e44:	b11c      	cbz	r4, 2e4e <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    2e46:	685a      	ldr	r2, [r3, #4]
    2e48:	6018      	str	r0, [r3, #0]
    2e4a:	47a0      	blx	r4
    2e4c:	e7e4      	b.n	2e18 <rtc_nrf_isr+0x8>
    2e4e:	6014      	str	r4, [r2, #0]
}
    2e50:	e7e7      	b.n	2e22 <rtc_nrf_isr+0x12>
    2e52:	bf00      	nop
    2e54:	40011000 	.word	0x40011000
    2e58:	40011140 	.word	0x40011140
    2e5c:	200007b8 	.word	0x200007b8

00002e60 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    2e60:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    2e62:	4d10      	ldr	r5, [pc, #64]	; (2ea4 <z_clock_driver_init+0x44>)
    2e64:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    2e66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    2e6a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    2e6e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    2e72:	4b0d      	ldr	r3, [pc, #52]	; (2ea8 <z_clock_driver_init+0x48>)
    2e74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2e78:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2e7c:	2101      	movs	r1, #1
    2e7e:	4622      	mov	r2, r4
    2e80:	2011      	movs	r0, #17
    2e82:	f000 f905 	bl	3090 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2e86:	2011      	movs	r0, #17
    2e88:	f000 f8e4 	bl	3054 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2e8c:	4a07      	ldr	r2, [pc, #28]	; (2eac <z_clock_driver_init+0x4c>)
    2e8e:	2301      	movs	r3, #1
    2e90:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2e92:	4a07      	ldr	r2, [pc, #28]	; (2eb0 <z_clock_driver_init+0x50>)
    2e94:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    2e96:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    2e98:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    2e9a:	f7ff fedb 	bl	2c54 <z_nrf_clock_control_lf_on>

	return 0;
}
    2e9e:	4620      	mov	r0, r4
    2ea0:	bd38      	pop	{r3, r4, r5, pc}
    2ea2:	bf00      	nop
    2ea4:	40011000 	.word	0x40011000
    2ea8:	e000e100 	.word	0xe000e100
    2eac:	40011008 	.word	0x40011008
    2eb0:	200007c0 	.word	0x200007c0

00002eb4 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2eb4:	4b13      	ldr	r3, [pc, #76]	; (2f04 <z_clock_set_timeout+0x50>)
    2eb6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2eba:	bf08      	it	eq
    2ebc:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2ebe:	3801      	subs	r0, #1
    2ec0:	2800      	cmp	r0, #0
    2ec2:	dd1c      	ble.n	2efe <z_clock_set_timeout+0x4a>
    2ec4:	4298      	cmp	r0, r3
    2ec6:	bfa8      	it	ge
    2ec8:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    2eca:	4b0f      	ldr	r3, [pc, #60]	; (2f08 <z_clock_set_timeout+0x54>)
    2ecc:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    2ed0:	4b0e      	ldr	r3, [pc, #56]	; (2f0c <z_clock_set_timeout+0x58>)
    2ed2:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    2ed4:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    2ed6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    2eda:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    2ede:	bf18      	it	ne
    2ee0:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    2ee2:	4a0b      	ldr	r2, [pc, #44]	; (2f10 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2ee4:	3301      	adds	r3, #1
    2ee6:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    2ee8:	480a      	ldr	r0, [pc, #40]	; (2f14 <z_clock_set_timeout+0x60>)
    2eea:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    2eec:	2000      	movs	r0, #0
    2eee:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    2ef0:	4a04      	ldr	r2, [pc, #16]	; (2f04 <z_clock_set_timeout+0x50>)
    2ef2:	4293      	cmp	r3, r2
    2ef4:	bf94      	ite	ls
    2ef6:	18c9      	addls	r1, r1, r3
    2ef8:	1889      	addhi	r1, r1, r2
    2efa:	f7ff bf3d 	b.w	2d78 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2efe:	2000      	movs	r0, #0
    2f00:	e7e3      	b.n	2eca <z_clock_set_timeout+0x16>
    2f02:	bf00      	nop
    2f04:	007fffff 	.word	0x007fffff
    2f08:	40011000 	.word	0x40011000
    2f0c:	200007c4 	.word	0x200007c4
    2f10:	200007b8 	.word	0x200007b8
    2f14:	00002d61 	.word	0x00002d61

00002f18 <z_clock_elapsed>:
	__asm__ volatile(
    2f18:	f04f 0220 	mov.w	r2, #32
    2f1c:	f3ef 8311 	mrs	r3, BASEPRI
    2f20:	f382 8811 	msr	BASEPRI, r2
    2f24:	f3bf 8f6f 	isb	sy
    2f28:	4a06      	ldr	r2, [pc, #24]	; (2f44 <z_clock_elapsed+0x2c>)
    2f2a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    2f2e:	4a06      	ldr	r2, [pc, #24]	; (2f48 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    2f30:	6812      	ldr	r2, [r2, #0]
    2f32:	1a80      	subs	r0, r0, r2
    2f34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    2f38:	f383 8811 	msr	BASEPRI, r3
    2f3c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    2f40:	4770      	bx	lr
    2f42:	bf00      	nop
    2f44:	40011000 	.word	0x40011000
    2f48:	200007c4 	.word	0x200007c4

00002f4c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    2f4c:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2f4e:	4c11      	ldr	r4, [pc, #68]	; (2f94 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    2f50:	4a11      	ldr	r2, [pc, #68]	; (2f98 <_DoInit+0x4c>)
    2f52:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2f54:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2f56:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2f5a:	4b10      	ldr	r3, [pc, #64]	; (2f9c <_DoInit+0x50>)
    2f5c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    2f5e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    2f64:	4a0e      	ldr	r2, [pc, #56]	; (2fa0 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    2f66:	490f      	ldr	r1, [pc, #60]	; (2fa4 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    2f68:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    2f6a:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    2f6c:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    2f6e:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    2f70:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    2f72:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2f74:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2f76:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    2f78:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2f7a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2f7c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    2f7e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    2f80:	f003 fa69 	bl	6456 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    2f84:	4908      	ldr	r1, [pc, #32]	; (2fa8 <_DoInit+0x5c>)
    2f86:	4620      	mov	r0, r4
    2f88:	f003 fa65 	bl	6456 <strcpy>
  p->acID[6] = ' ';
    2f8c:	2320      	movs	r3, #32
    2f8e:	71a3      	strb	r3, [r4, #6]
}
    2f90:	bd10      	pop	{r4, pc}
    2f92:	bf00      	nop
    2f94:	200007c8 	.word	0x200007c8
    2f98:	00007b8b 	.word	0x00007b8b
    2f9c:	20000995 	.word	0x20000995
    2fa0:	20000985 	.word	0x20000985
    2fa4:	00007b94 	.word	0x00007b94
    2fa8:	00007b98 	.word	0x00007b98

00002fac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2fac:	4a09      	ldr	r2, [pc, #36]	; (2fd4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2fae:	490a      	ldr	r1, [pc, #40]	; (2fd8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2fb0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2fb2:	6809      	ldr	r1, [r1, #0]
    2fb4:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2fb6:	4909      	ldr	r1, [pc, #36]	; (2fdc <arch_swap+0x30>)
	_current->arch.basepri = key;
    2fb8:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2fba:	684b      	ldr	r3, [r1, #4]
    2fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2fc0:	604b      	str	r3, [r1, #4]
    2fc2:	2300      	movs	r3, #0
    2fc4:	f383 8811 	msr	BASEPRI, r3
    2fc8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2fcc:	6893      	ldr	r3, [r2, #8]
}
    2fce:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2fd0:	4770      	bx	lr
    2fd2:	bf00      	nop
    2fd4:	20000940 	.word	0x20000940
    2fd8:	00007768 	.word	0x00007768
    2fdc:	e000ed00 	.word	0xe000ed00

00002fe0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2fe0:	4912      	ldr	r1, [pc, #72]	; (302c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2fe2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2fe4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    2fe8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2fea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2fee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ff2:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2ff4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2ff8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2ffc:	4f0c      	ldr	r7, [pc, #48]	; (3030 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2ffe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3002:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    3004:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3006:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3008:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    300a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    300c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    300e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3012:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3014:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3016:	f000 fa55 	bl	34c4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    301a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    301e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    3022:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3026:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    302a:	4770      	bx	lr
    ldr r1, =_kernel
    302c:	20000940 	.word	0x20000940
    ldr v4, =_SCS_ICSR
    3030:	e000ed04 	.word	0xe000ed04

00003034 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    3034:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3038:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    303a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    303e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3042:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3044:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3048:	2902      	cmp	r1, #2
    beq _oops
    304a:	d0ff      	beq.n	304c <_oops>

0000304c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    304c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    304e:	f003 f9f7 	bl	6440 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3052:	bd01      	pop	{r0, pc}

00003054 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3054:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3056:	2b00      	cmp	r3, #0
    3058:	db08      	blt.n	306c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    305a:	2201      	movs	r2, #1
    305c:	f000 001f 	and.w	r0, r0, #31
    3060:	fa02 f000 	lsl.w	r0, r2, r0
    3064:	095b      	lsrs	r3, r3, #5
    3066:	4a02      	ldr	r2, [pc, #8]	; (3070 <arch_irq_enable+0x1c>)
    3068:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    306c:	4770      	bx	lr
    306e:	bf00      	nop
    3070:	e000e100 	.word	0xe000e100

00003074 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3074:	4b05      	ldr	r3, [pc, #20]	; (308c <arch_irq_is_enabled+0x18>)
    3076:	0942      	lsrs	r2, r0, #5
    3078:	f000 001f 	and.w	r0, r0, #31
    307c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3080:	2301      	movs	r3, #1
    3082:	fa03 f000 	lsl.w	r0, r3, r0
}
    3086:	4010      	ands	r0, r2
    3088:	4770      	bx	lr
    308a:	bf00      	nop
    308c:	e000e100 	.word	0xe000e100

00003090 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3090:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3092:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3094:	bfa8      	it	ge
    3096:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    309a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    309e:	bfb8      	it	lt
    30a0:	4b06      	ldrlt	r3, [pc, #24]	; (30bc <z_arm_irq_priority_set+0x2c>)
    30a2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30a6:	bfac      	ite	ge
    30a8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30ac:	f000 000f 	andlt.w	r0, r0, #15
    30b0:	b2c9      	uxtb	r1, r1
    30b2:	bfb4      	ite	lt
    30b4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30b6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    30ba:	4770      	bx	lr
    30bc:	e000ed14 	.word	0xe000ed14

000030c0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    30c0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    30c4:	9b00      	ldr	r3, [sp, #0]
    30c6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    30ca:	490a      	ldr	r1, [pc, #40]	; (30f4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    30cc:	9b01      	ldr	r3, [sp, #4]
    30ce:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    30d2:	9b02      	ldr	r3, [sp, #8]
    30d4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    30d8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    30dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    30e0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    30e4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    30e8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    30ea:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    30ec:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    30ee:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    30f0:	4770      	bx	lr
    30f2:	bf00      	nop
    30f4:	00005e3f 	.word	0x00005e3f

000030f8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    30f8:	4a0b      	ldr	r2, [pc, #44]	; (3128 <z_check_thread_stack_fail+0x30>)
{
    30fa:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    30fc:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    30fe:	b190      	cbz	r0, 3126 <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3100:	f113 0f16 	cmn.w	r3, #22
    3104:	6e80      	ldr	r0, [r0, #104]	; 0x68
    3106:	d005      	beq.n	3114 <z_check_thread_stack_fail+0x1c>
    3108:	f1a0 0220 	sub.w	r2, r0, #32
    310c:	429a      	cmp	r2, r3
    310e:	d806      	bhi.n	311e <z_check_thread_stack_fail+0x26>
    3110:	4283      	cmp	r3, r0
    3112:	d204      	bcs.n	311e <z_check_thread_stack_fail+0x26>
    3114:	4281      	cmp	r1, r0
    3116:	bf2c      	ite	cs
    3118:	2100      	movcs	r1, #0
    311a:	2101      	movcc	r1, #1
    311c:	e000      	b.n	3120 <z_check_thread_stack_fail+0x28>
    311e:	2100      	movs	r1, #0
    3120:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3122:	bf08      	it	eq
    3124:	2000      	moveq	r0, #0
}
    3126:	4770      	bx	lr
    3128:	20000940 	.word	0x20000940

0000312c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    312c:	b508      	push	{r3, lr}
    312e:	4604      	mov	r4, r0
    3130:	460e      	mov	r6, r1
    3132:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    3134:	f000 f9ba 	bl	34ac <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3138:	4b08      	ldr	r3, [pc, #32]	; (315c <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    313a:	4620      	mov	r0, r4
	_current = main_thread;
    313c:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    313e:	f000 f9c1 	bl	34c4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3142:	4628      	mov	r0, r5
    3144:	f386 8809 	msr	PSP, r6
    3148:	2100      	movs	r1, #0
    314a:	b663      	cpsie	if
    314c:	f381 8811 	msr	BASEPRI, r1
    3150:	f3bf 8f6f 	isb	sy
    3154:	2200      	movs	r2, #0
    3156:	2300      	movs	r3, #0
    3158:	f002 fe71 	bl	5e3e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    315c:	20000940 	.word	0x20000940

00003160 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3160:	4901      	ldr	r1, [pc, #4]	; (3168 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3162:	2210      	movs	r2, #16
	str	r2, [r1]
    3164:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3166:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3168:	e000ed10 	.word	0xe000ed10

0000316c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    316c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    316e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3170:	f380 8811 	msr	BASEPRI, r0
	isb
    3174:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3178:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    317c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    317e:	b662      	cpsie	i
	isb
    3180:	f3bf 8f6f 	isb	sy

	bx	lr
    3184:	4770      	bx	lr
    3186:	bf00      	nop

00003188 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3188:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    318a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    318c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3190:	bf20      	wfe

	msr	BASEPRI, r0
    3192:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3196:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3198:	4770      	bx	lr
    319a:	bf00      	nop

0000319c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    319c:	bf30      	wfi
    b z_SysNmiOnReset
    319e:	f7ff bffd 	b.w	319c <z_SysNmiOnReset>
    31a2:	bf00      	nop

000031a4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    31a4:	4a0e      	ldr	r2, [pc, #56]	; (31e0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    31a6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    31a8:	4b0e      	ldr	r3, [pc, #56]	; (31e4 <z_arm_prep_c+0x40>)
    31aa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    31ae:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    31b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31b4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    31b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    31bc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    31c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    31c4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    31c8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    31cc:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    31d0:	f001 fea6 	bl	4f20 <z_bss_zero>
	z_data_copy();
    31d4:	f002 fbca 	bl	596c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    31d8:	f000 f93a 	bl	3450 <z_arm_interrupt_init>
	z_cstart();
    31dc:	f001 fec4 	bl	4f68 <z_cstart>
    31e0:	00000000 	.word	0x00000000
    31e4:	e000ed00 	.word	0xe000ed00

000031e8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    31e8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    31ea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    31ec:	4a0b      	ldr	r2, [pc, #44]	; (321c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    31ee:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    31f0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    31f2:	bf1e      	ittt	ne
	movne	r1, #0
    31f4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    31f6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    31f8:	f003 ffed 	blne	71d6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    31fc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    31fe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3202:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3206:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    320a:	4905      	ldr	r1, [pc, #20]	; (3220 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    320c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    320e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3210:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3212:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3216:	4903      	ldr	r1, [pc, #12]	; (3224 <_isr_wrapper+0x3c>)
	bx r1
    3218:	4708      	bx	r1
    321a:	0000      	.short	0x0000
	ldr r2, =_kernel
    321c:	20000940 	.word	0x20000940
	ldr r1, =_sw_isr_table
    3220:	00007478 	.word	0x00007478
	ldr r1, =z_arm_int_exit
    3224:	00003435 	.word	0x00003435

00003228 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    3228:	f003 f98e 	bl	6548 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    322c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    322e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3232:	4808      	ldr	r0, [pc, #32]	; (3254 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3234:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    3238:	1840      	adds	r0, r0, r1
    msr PSP, r0
    323a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    323e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3242:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3244:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3246:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    324a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    324e:	f7ff ffa9 	bl	31a4 <z_arm_prep_c>
    3252:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    3254:	20001320 	.word	0x20001320

00003258 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3258:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    325c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3260:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3262:	4672      	mov	r2, lr
	bl z_arm_fault
    3264:	f000 f868 	bl	3338 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3268:	bd01      	pop	{r0, pc}
    326a:	bf00      	nop

0000326c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    326c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    326e:	4b19      	ldr	r3, [pc, #100]	; (32d4 <mem_manage_fault+0x68>)
{
    3270:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3272:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    3278:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    327a:	0790      	lsls	r0, r2, #30
    327c:	d519      	bpl.n	32b2 <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    327e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3282:	0612      	lsls	r2, r2, #24
    3284:	d515      	bpl.n	32b2 <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    3286:	b119      	cbz	r1, 3290 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3288:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    328a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    328e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3296:	06d1      	lsls	r1, r2, #27
    3298:	d40e      	bmi.n	32b8 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    329c:	079a      	lsls	r2, r3, #30
    329e:	d40b      	bmi.n	32b8 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    32a0:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    32a2:	4a0c      	ldr	r2, [pc, #48]	; (32d4 <mem_manage_fault+0x68>)
    32a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    32a6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    32aa:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    32ac:	2300      	movs	r3, #0
    32ae:	7023      	strb	r3, [r4, #0]

	return reason;
}
    32b0:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    32b2:	f06f 0015 	mvn.w	r0, #21
    32b6:	e7eb      	b.n	3290 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    32b8:	4b06      	ldr	r3, [pc, #24]	; (32d4 <mem_manage_fault+0x68>)
    32ba:	685b      	ldr	r3, [r3, #4]
    32bc:	051b      	lsls	r3, r3, #20
    32be:	d5ef      	bpl.n	32a0 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    32c0:	4629      	mov	r1, r5
    32c2:	f7ff ff19 	bl	30f8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    32c6:	2800      	cmp	r0, #0
    32c8:	d0ea      	beq.n	32a0 <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    32ca:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    32ce:	2002      	movs	r0, #2
    32d0:	e7e7      	b.n	32a2 <mem_manage_fault+0x36>
    32d2:	bf00      	nop
    32d4:	e000ed00 	.word	0xe000ed00

000032d8 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    32d8:	4b0d      	ldr	r3, [pc, #52]	; (3310 <bus_fault.isra.0+0x38>)
    32da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    32dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    32de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32e0:	0592      	lsls	r2, r2, #22
    32e2:	d508      	bpl.n	32f6 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    32e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    32e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32e8:	0412      	lsls	r2, r2, #16
    32ea:	d504      	bpl.n	32f6 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    32ec:	b118      	cbz	r0, 32f6 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    32ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    32f4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    32f6:	4b06      	ldr	r3, [pc, #24]	; (3310 <bus_fault.isra.0+0x38>)
    32f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    32fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    32fc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    32fe:	bf58      	it	pl
    3300:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3302:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    3304:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3306:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    330a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    330c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    330e:	4770      	bx	lr
    3310:	e000ed00 	.word	0xe000ed00

00003314 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3314:	4b07      	ldr	r3, [pc, #28]	; (3334 <usage_fault.isra.0+0x20>)
    3316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    331a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    331c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    331e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3324:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    3328:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    332c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    332e:	2000      	movs	r0, #0
    3330:	4770      	bx	lr
    3332:	bf00      	nop
    3334:	e000ed00 	.word	0xe000ed00

00003338 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3338:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    333a:	4b37      	ldr	r3, [pc, #220]	; (3418 <z_arm_fault+0xe0>)
    333c:	685b      	ldr	r3, [r3, #4]
{
    333e:	b08a      	sub	sp, #40	; 0x28
    3340:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3342:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3346:	2500      	movs	r5, #0
    3348:	f385 8811 	msr	BASEPRI, r5
    334c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3350:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    3354:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    3358:	d111      	bne.n	337e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    335a:	f002 010c 	and.w	r1, r2, #12
    335e:	2908      	cmp	r1, #8
    3360:	d00d      	beq.n	337e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3362:	0711      	lsls	r1, r2, #28
    3364:	d401      	bmi.n	336a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    3366:	4606      	mov	r6, r0
			*nested_exc = true;
    3368:	2501      	movs	r5, #1
	*recoverable = false;
    336a:	2200      	movs	r2, #0
    336c:	3b03      	subs	r3, #3
    336e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    3372:	2b03      	cmp	r3, #3
    3374:	d848      	bhi.n	3408 <z_arm_fault+0xd0>
    3376:	e8df f003 	tbb	[pc, r3]
    337a:	3f04      	.short	0x3f04
    337c:	3c43      	.short	0x3c43
		return NULL;
    337e:	462e      	mov	r6, r5
    3380:	e7f3      	b.n	336a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3382:	4b25      	ldr	r3, [pc, #148]	; (3418 <z_arm_fault+0xe0>)
    3384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3386:	0792      	lsls	r2, r2, #30
    3388:	d43e      	bmi.n	3408 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    338a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    338c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    3390:	d009      	beq.n	33a6 <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
    3392:	3328      	adds	r3, #40	; 0x28
    3394:	781b      	ldrb	r3, [r3, #0]
    3396:	b1f3      	cbz	r3, 33d6 <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
    3398:	f10d 0207 	add.w	r2, sp, #7
    339c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    339e:	4630      	mov	r0, r6
    33a0:	f7ff ff64 	bl	326c <mem_manage_fault>
		reason = usage_fault(esf);
    33a4:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    33a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    33aa:	b993      	cbnz	r3, 33d2 <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    33ac:	2220      	movs	r2, #32
    33ae:	4631      	mov	r1, r6
    33b0:	a802      	add	r0, sp, #8
    33b2:	f003 f876 	bl	64a2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    33b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    33b8:	b345      	cbz	r5, 340c <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    33ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
    33be:	b922      	cbnz	r2, 33ca <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    33c0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    33c4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    33c8:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    33ca:	a902      	add	r1, sp, #8
    33cc:	4620      	mov	r0, r4
    33ce:	f003 f835 	bl	643c <z_arm_fatal_error>
}
    33d2:	b00a      	add	sp, #40	; 0x28
    33d4:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    33d6:	4b11      	ldr	r3, [pc, #68]	; (341c <z_arm_fault+0xe4>)
    33d8:	781b      	ldrb	r3, [r3, #0]
    33da:	b12b      	cbz	r3, 33e8 <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
    33dc:	f10d 0107 	add.w	r1, sp, #7
    33e0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    33e2:	f7ff ff79 	bl	32d8 <bus_fault.isra.0>
    33e6:	e7dd      	b.n	33a4 <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
    33e8:	4b0d      	ldr	r3, [pc, #52]	; (3420 <z_arm_fault+0xe8>)
    33ea:	8818      	ldrh	r0, [r3, #0]
    33ec:	b284      	uxth	r4, r0
    33ee:	2c00      	cmp	r4, #0
    33f0:	d0d9      	beq.n	33a6 <z_arm_fault+0x6e>
		reason = usage_fault(esf);
    33f2:	f7ff ff8f 	bl	3314 <usage_fault.isra.0>
    33f6:	e7d5      	b.n	33a4 <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
    33f8:	f10d 0207 	add.w	r2, sp, #7
    33fc:	2100      	movs	r1, #0
    33fe:	e7ce      	b.n	339e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    3400:	f10d 0107 	add.w	r1, sp, #7
    3404:	2000      	movs	r0, #0
    3406:	e7ec      	b.n	33e2 <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3408:	2400      	movs	r4, #0
    340a:	e7cc      	b.n	33a6 <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    340c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3410:	f023 0301 	bic.w	r3, r3, #1
    3414:	e7d8      	b.n	33c8 <z_arm_fault+0x90>
    3416:	bf00      	nop
    3418:	e000ed00 	.word	0xe000ed00
    341c:	e000ed29 	.word	0xe000ed29
    3420:	e000ed2a 	.word	0xe000ed2a

00003424 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    3424:	4a02      	ldr	r2, [pc, #8]	; (3430 <z_arm_fault_init+0xc>)
    3426:	6953      	ldr	r3, [r2, #20]
    3428:	f043 0310 	orr.w	r3, r3, #16
    342c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    342e:	4770      	bx	lr
    3430:	e000ed00 	.word	0xe000ed00

00003434 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3434:	4b04      	ldr	r3, [pc, #16]	; (3448 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3436:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3438:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    343a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    343c:	d003      	beq.n	3446 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    343e:	4903      	ldr	r1, [pc, #12]	; (344c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3444:	600a      	str	r2, [r1, #0]

00003446 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3446:	4770      	bx	lr
	ldr r3, =_kernel
    3448:	20000940 	.word	0x20000940
	ldr r1, =_SCS_ICSR
    344c:	e000ed04 	.word	0xe000ed04

00003450 <z_arm_interrupt_init>:
    3450:	4804      	ldr	r0, [pc, #16]	; (3464 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3452:	2300      	movs	r3, #0
    3454:	2120      	movs	r1, #32
    3456:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3458:	3301      	adds	r3, #1
    345a:	2b27      	cmp	r3, #39	; 0x27
    345c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3460:	d1f9      	bne.n	3456 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3462:	4770      	bx	lr
    3464:	e000e100 	.word	0xe000e100

00003468 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3468:	b508      	push	{r3, lr}
	if (_current == thread) {
    346a:	4b0e      	ldr	r3, [pc, #56]	; (34a4 <z_impl_k_thread_abort+0x3c>)
    346c:	689b      	ldr	r3, [r3, #8]
    346e:	4283      	cmp	r3, r0
    3470:	d107      	bne.n	3482 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3472:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3476:	b193      	cbz	r3, 349e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3478:	4a0b      	ldr	r2, [pc, #44]	; (34a8 <z_impl_k_thread_abort+0x40>)
    347a:	6853      	ldr	r3, [r2, #4]
    347c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3480:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    3482:	f001 ffbb 	bl	53fc <z_thread_single_abort>
	__asm__ volatile(
    3486:	f04f 0320 	mov.w	r3, #32
    348a:	f3ef 8011 	mrs	r0, BASEPRI
    348e:	f383 8811 	msr	BASEPRI, r3
    3492:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    3496:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    349a:	f003 be9e 	b.w	71da <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    349e:	f002 fa45 	bl	592c <z_self_abort>
    34a2:	bf00      	nop
    34a4:	20000940 	.word	0x20000940
    34a8:	e000ed00 	.word	0xe000ed00

000034ac <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    34ac:	4b02      	ldr	r3, [pc, #8]	; (34b8 <z_arm_configure_static_mpu_regions+0xc>)
    34ae:	4a03      	ldr	r2, [pc, #12]	; (34bc <z_arm_configure_static_mpu_regions+0x10>)
    34b0:	4803      	ldr	r0, [pc, #12]	; (34c0 <z_arm_configure_static_mpu_regions+0x14>)
    34b2:	2101      	movs	r1, #1
    34b4:	f000 b896 	b.w	35e4 <arm_core_mpu_configure_static_mpu_regions>
    34b8:	20010000 	.word	0x20010000
    34bc:	20000000 	.word	0x20000000
    34c0:	000075e8 	.word	0x000075e8

000034c4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    34c4:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    34c6:	4b05      	ldr	r3, [pc, #20]	; (34dc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    34c8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    34ca:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    34cc:	4a04      	ldr	r2, [pc, #16]	; (34e0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    34ce:	2120      	movs	r1, #32
    34d0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    34d4:	4618      	mov	r0, r3
    34d6:	2101      	movs	r1, #1
    34d8:	f000 b88e 	b.w	35f8 <arm_core_mpu_configure_dynamic_mpu_regions>
    34dc:	20000870 	.word	0x20000870
    34e0:	150b0000 	.word	0x150b0000

000034e4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    34e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    34e6:	4f1e      	ldr	r7, [pc, #120]	; (3560 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    34e8:	2600      	movs	r6, #0
    34ea:	428e      	cmp	r6, r1
    34ec:	db01      	blt.n	34f2 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    34ee:	4610      	mov	r0, r2
    34f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    34f2:	6844      	ldr	r4, [r0, #4]
    34f4:	b384      	cbz	r4, 3558 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    34f6:	b153      	cbz	r3, 350e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    34f8:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    34fc:	ea14 0f0c 	tst.w	r4, ip
    3500:	d118      	bne.n	3534 <mpu_configure_regions+0x50>
		&&
    3502:	2c1f      	cmp	r4, #31
    3504:	d916      	bls.n	3534 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    3506:	6805      	ldr	r5, [r0, #0]
		&&
    3508:	ea1c 0f05 	tst.w	ip, r5
    350c:	d112      	bne.n	3534 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    350e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3510:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    3512:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3516:	b2d2      	uxtb	r2, r2
    3518:	d90f      	bls.n	353a <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    351a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    351e:	d80e      	bhi.n	353e <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3520:	3c01      	subs	r4, #1
    3522:	fab4 f484 	clz	r4, r4
    3526:	f1c4 041f 	rsb	r4, r4, #31
    352a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    352c:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    352e:	ea4c 0404 	orr.w	r4, ip, r4
    3532:	d906      	bls.n	3542 <mpu_configure_regions+0x5e>
			return -EINVAL;
    3534:	f06f 0215 	mvn.w	r2, #21
    3538:	e7d9      	b.n	34ee <mpu_configure_regions+0xa>
		return REGION_32B;
    353a:	2408      	movs	r4, #8
    353c:	e7f6      	b.n	352c <mpu_configure_regions+0x48>
		return REGION_4G;
    353e:	243e      	movs	r4, #62	; 0x3e
    3540:	e7f4      	b.n	352c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3542:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    3546:	4315      	orrs	r5, r2
    3548:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    354c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    3550:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3552:	60fd      	str	r5, [r7, #12]
		reg_index++;
    3554:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3556:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    3558:	3601      	adds	r6, #1
    355a:	300c      	adds	r0, #12
    355c:	e7c5      	b.n	34ea <mpu_configure_regions+0x6>
    355e:	bf00      	nop
    3560:	e000ed90 	.word	0xe000ed90

00003564 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3564:	4b03      	ldr	r3, [pc, #12]	; (3574 <arm_core_mpu_enable+0x10>)
    3566:	2205      	movs	r2, #5
    3568:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    356a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    356e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3572:	4770      	bx	lr
    3574:	e000ed90 	.word	0xe000ed90

00003578 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3578:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    357c:	4b01      	ldr	r3, [pc, #4]	; (3584 <arm_core_mpu_disable+0xc>)
    357e:	2200      	movs	r2, #0
    3580:	605a      	str	r2, [r3, #4]
}
    3582:	4770      	bx	lr
    3584:	e000ed90 	.word	0xe000ed90

00003588 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3588:	4913      	ldr	r1, [pc, #76]	; (35d8 <arm_mpu_init+0x50>)
    358a:	6808      	ldr	r0, [r1, #0]
    358c:	2808      	cmp	r0, #8
{
    358e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3590:	d81e      	bhi.n	35d0 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3592:	f7ff fff1 	bl	3578 <arm_core_mpu_disable>
	MPU->RNR = index;
    3596:	4c11      	ldr	r4, [pc, #68]	; (35dc <arm_mpu_init+0x54>)
    3598:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    359a:	2200      	movs	r2, #0
    359c:	4290      	cmp	r0, r2
    359e:	f101 010c 	add.w	r1, r1, #12
    35a2:	d105      	bne.n	35b0 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    35a4:	4b0e      	ldr	r3, [pc, #56]	; (35e0 <arm_mpu_init+0x58>)
    35a6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    35a8:	f7ff ffdc 	bl	3564 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    35ac:	2000      	movs	r0, #0
}
    35ae:	bd10      	pop	{r4, pc}
    35b0:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    35b2:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    35b6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    35ba:	4313      	orrs	r3, r2
    35bc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    35c0:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    35c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    35c6:	f043 0301 	orr.w	r3, r3, #1
    35ca:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    35cc:	3201      	adds	r2, #1
    35ce:	e7e5      	b.n	359c <arm_mpu_init+0x14>
		return -1;
    35d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    35d4:	e7eb      	b.n	35ae <arm_mpu_init+0x26>
    35d6:	bf00      	nop
    35d8:	000075f4 	.word	0x000075f4
    35dc:	e000ed90 	.word	0xe000ed90
    35e0:	20000d95 	.word	0x20000d95

000035e4 <arm_core_mpu_configure_static_mpu_regions>:
{
    35e4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    35e6:	4c03      	ldr	r4, [pc, #12]	; (35f4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    35e8:	2301      	movs	r3, #1
    35ea:	7822      	ldrb	r2, [r4, #0]
    35ec:	f7ff ff7a 	bl	34e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    35f0:	7020      	strb	r0, [r4, #0]
}
    35f2:	bd10      	pop	{r4, pc}
    35f4:	20000d95 	.word	0x20000d95

000035f8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    35f8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    35fa:	4a08      	ldr	r2, [pc, #32]	; (361c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    35fc:	2300      	movs	r3, #0
    35fe:	7812      	ldrb	r2, [r2, #0]
    3600:	f7ff ff70 	bl	34e4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3604:	f110 0f16 	cmn.w	r0, #22
    3608:	d003      	beq.n	3612 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    360a:	4b05      	ldr	r3, [pc, #20]	; (3620 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    360c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    360e:	2807      	cmp	r0, #7
    3610:	dd00      	ble.n	3614 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    3612:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    3614:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    3616:	611a      	str	r2, [r3, #16]
    3618:	3001      	adds	r0, #1
    361a:	e7f8      	b.n	360e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    361c:	20000d95 	.word	0x20000d95
    3620:	e000ed90 	.word	0xe000ed90

00003624 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3624:	4b01      	ldr	r3, [pc, #4]	; (362c <__stdout_hook_install+0x8>)
    3626:	6018      	str	r0, [r3, #0]
}
    3628:	4770      	bx	lr
    362a:	bf00      	nop
    362c:	20000004 	.word	0x20000004

00003630 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    3630:	3902      	subs	r1, #2
    3632:	2901      	cmp	r1, #1
    3634:	d802      	bhi.n	363c <z_impl_zephyr_fputc+0xc>
    3636:	4b03      	ldr	r3, [pc, #12]	; (3644 <z_impl_zephyr_fputc+0x14>)
    3638:	681b      	ldr	r3, [r3, #0]
    363a:	4718      	bx	r3
}
    363c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3640:	4770      	bx	lr
    3642:	bf00      	nop
    3644:	20000004 	.word	0x20000004

00003648 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    3648:	b40f      	push	{r0, r1, r2, r3}
    364a:	b507      	push	{r0, r1, r2, lr}
    364c:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    364e:	2102      	movs	r1, #2
{
    3650:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    3654:	4804      	ldr	r0, [pc, #16]	; (3668 <printf+0x20>)
	va_start(vargs, format);
    3656:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    3658:	f7fe fb04 	bl	1c64 <cbvprintf>
	va_end(vargs);

	return r;
}
    365c:	b003      	add	sp, #12
    365e:	f85d eb04 	ldr.w	lr, [sp], #4
    3662:	b004      	add	sp, #16
    3664:	4770      	bx	lr
    3666:	bf00      	nop
    3668:	00006545 	.word	0x00006545

0000366c <nordicsemi_nrf52_init>:
    366c:	f04f 0320 	mov.w	r3, #32
    3670:	f3ef 8211 	mrs	r2, BASEPRI
    3674:	f383 8811 	msr	BASEPRI, r3
    3678:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    367c:	4906      	ldr	r1, [pc, #24]	; (3698 <nordicsemi_nrf52_init+0x2c>)
    367e:	2301      	movs	r3, #1
    3680:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3684:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3688:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    368c:	f382 8811 	msr	BASEPRI, r2
    3690:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3694:	2000      	movs	r0, #0
    3696:	4770      	bx	lr
    3698:	4001e000 	.word	0x4001e000

0000369c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    369c:	b120      	cbz	r0, 36a8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    369e:	4b03      	ldr	r3, [pc, #12]	; (36ac <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    36a0:	0180      	lsls	r0, r0, #6
    36a2:	f043 0301 	orr.w	r3, r3, #1
    36a6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    36a8:	4770      	bx	lr
    36aa:	bf00      	nop
    36ac:	000075b0 	.word	0x000075b0

000036b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    36b0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    36b2:	4b09      	ldr	r3, [pc, #36]	; (36d8 <gpio_nrfx_init+0x28>)
    36b4:	781a      	ldrb	r2, [r3, #0]
    36b6:	b96a      	cbnz	r2, 36d4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    36b8:	2101      	movs	r1, #1
    36ba:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    36bc:	2006      	movs	r0, #6
    36be:	2105      	movs	r1, #5
    36c0:	f7ff fce6 	bl	3090 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    36c4:	2006      	movs	r0, #6
    36c6:	f7ff fcc5 	bl	3054 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    36ca:	4b04      	ldr	r3, [pc, #16]	; (36dc <gpio_nrfx_init+0x2c>)
    36cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    36d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    36d4:	2000      	movs	r0, #0
    36d6:	bd08      	pop	{r3, pc}
    36d8:	20000d96 	.word	0x20000d96
    36dc:	40006000 	.word	0x40006000

000036e0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    36e0:	4b2a      	ldr	r3, [pc, #168]	; (378c <gpio_nrfx_config+0xac>)
{
    36e2:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    36e4:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    36e6:	482a      	ldr	r0, [pc, #168]	; (3790 <gpio_nrfx_config+0xb0>)
    36e8:	4013      	ands	r3, r2
    36ea:	4283      	cmp	r3, r0
    36ec:	d03e      	beq.n	376c <gpio_nrfx_config+0x8c>
    36ee:	d80d      	bhi.n	370c <gpio_nrfx_config+0x2c>
    36f0:	2b06      	cmp	r3, #6
    36f2:	d015      	beq.n	3720 <gpio_nrfx_config+0x40>
    36f4:	d805      	bhi.n	3702 <gpio_nrfx_config+0x22>
    36f6:	b19b      	cbz	r3, 3720 <gpio_nrfx_config+0x40>
    36f8:	2b02      	cmp	r3, #2
    36fa:	d039      	beq.n	3770 <gpio_nrfx_config+0x90>
    36fc:	f06f 0015 	mvn.w	r0, #21
    3700:	e033      	b.n	376a <gpio_nrfx_config+0x8a>
    3702:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3706:	d1f9      	bne.n	36fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    3708:	2301      	movs	r3, #1
    370a:	e009      	b.n	3720 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    370c:	4821      	ldr	r0, [pc, #132]	; (3794 <gpio_nrfx_config+0xb4>)
    370e:	4283      	cmp	r3, r0
    3710:	d030      	beq.n	3774 <gpio_nrfx_config+0x94>
    3712:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3716:	d02f      	beq.n	3778 <gpio_nrfx_config+0x98>
    3718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    371c:	d1ee      	bne.n	36fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    371e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    3720:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    3722:	bf54      	ite	pl
    3724:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    3728:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    372a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    372e:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    3732:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    3736:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    373a:	d007      	beq.n	374c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    373c:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3740:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    3742:	d01b      	beq.n	377c <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    3744:	2201      	movs	r2, #1
    3746:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    3748:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    374c:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3750:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3754:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3758:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    375c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    3760:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3764:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    3768:	2000      	movs	r0, #0
}
    376a:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    376c:	2307      	movs	r3, #7
    376e:	e7d7      	b.n	3720 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    3770:	2304      	movs	r3, #4
    3772:	e7d5      	b.n	3720 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    3774:	2305      	movs	r3, #5
    3776:	e7d3      	b.n	3720 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    3778:	2303      	movs	r3, #3
    377a:	e7d1      	b.n	3720 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    377c:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    377e:	bf42      	ittt	mi
    3780:	2201      	movmi	r2, #1
    3782:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    3784:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    3788:	e7e0      	b.n	374c <gpio_nrfx_config+0x6c>
    378a:	bf00      	nop
    378c:	00f00006 	.word	0x00f00006
    3790:	00100006 	.word	0x00100006
    3794:	00400002 	.word	0x00400002

00003798 <gpio_nrfx_pin_interrupt_configure>:
{
    3798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    379a:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    379c:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    379e:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    37a0:	7a08      	ldrb	r0, [r1, #8]
    37a2:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    37a6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    37aa:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    37ae:	d10c      	bne.n	37ca <gpio_nrfx_pin_interrupt_configure+0x32>
    *p_pin = pin_number & 0x1F;
    37b0:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    37b4:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    37b8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    37bc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    37c0:	07cf      	lsls	r7, r1, #31
    37c2:	d507      	bpl.n	37d4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
    37c4:	f06f 0022 	mvn.w	r0, #34	; 0x22
    37c8:	e0bd      	b.n	3946 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    37ca:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    37ce:	68f1      	ldr	r1, [r6, #12]
    37d0:	f000 80aa 	beq.w	3928 <gpio_nrfx_pin_interrupt_configure+0x190>
    37d4:	68f0      	ldr	r0, [r6, #12]
    37d6:	2101      	movs	r1, #1
    37d8:	40a1      	lsls	r1, r4
    37da:	4301      	orrs	r1, r0
    37dc:	6970      	ldr	r0, [r6, #20]
    37de:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    37e0:	2101      	movs	r1, #1
    37e2:	40a1      	lsls	r1, r4
    37e4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    37e8:	69b2      	ldr	r2, [r6, #24]
    37ea:	bf0c      	ite	eq
    37ec:	4308      	orreq	r0, r1
    37ee:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    37f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    37f4:	bf0c      	ite	eq
    37f6:	430a      	orreq	r2, r1
    37f8:	438a      	bicne	r2, r1
    37fa:	61b2      	str	r2, [r6, #24]
    37fc:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    37fe:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    3800:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    3804:	bf0c      	ite	eq
    3806:	4311      	orreq	r1, r2
    3808:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    380c:	4a54      	ldr	r2, [pc, #336]	; (3960 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
    380e:	6131      	str	r1, [r6, #16]
    3810:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3814:	2300      	movs	r3, #0
    3816:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3818:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    381c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    3820:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    3824:	4285      	cmp	r5, r0
    3826:	f040 8084 	bne.w	3932 <gpio_nrfx_pin_interrupt_configure+0x19a>
		    && (intenset & BIT(i))) {
    382a:	fa21 f003 	lsr.w	r0, r1, r3
    382e:	07c0      	lsls	r0, r0, #31
    3830:	d57f      	bpl.n	3932 <gpio_nrfx_pin_interrupt_configure+0x19a>
			(void)atomic_and(mask, ~BIT(i));
    3832:	2101      	movs	r1, #1
    3834:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3836:	484b      	ldr	r0, [pc, #300]	; (3964 <gpio_nrfx_pin_interrupt_configure+0x1cc>)
    3838:	f3bf 8f5b 	dmb	ish
    383c:	43cf      	mvns	r7, r1
    383e:	e850 cf00 	ldrex	ip, [r0]
    3842:	ea0c 0c07 	and.w	ip, ip, r7
    3846:	e840 ce00 	strex	lr, ip, [r0]
    384a:	f1be 0f00 	cmp.w	lr, #0
    384e:	d1f6      	bne.n	383e <gpio_nrfx_pin_interrupt_configure+0xa6>
    3850:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    3854:	009b      	lsls	r3, r3, #2
    3856:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    385a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    385e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    3862:	f020 0001 	bic.w	r0, r0, #1
    3866:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    386a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    386e:	2100      	movs	r1, #0
    3870:	4628      	mov	r0, r5
    3872:	f002 fe6b 	bl	654c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    3876:	68f3      	ldr	r3, [r6, #12]
    3878:	40e3      	lsrs	r3, r4
    387a:	f013 0301 	ands.w	r3, r3, #1
    387e:	d051      	beq.n	3924 <gpio_nrfx_pin_interrupt_configure+0x18c>
		if (data->trig_edge & BIT(pin)) {
    3880:	6973      	ldr	r3, [r6, #20]
    3882:	40e3      	lsrs	r3, r4
    3884:	f013 0201 	ands.w	r2, r3, #1
    3888:	d05e      	beq.n	3948 <gpio_nrfx_pin_interrupt_configure+0x1b0>
			if (data->double_edge & BIT(pin)) {
    388a:	69b3      	ldr	r3, [r6, #24]
    388c:	40e3      	lsrs	r3, r4
    388e:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    3890:	bf5f      	itttt	pl
    3892:	6931      	ldrpl	r1, [r6, #16]
    3894:	fa21 f404 	lsrpl.w	r4, r1, r4
    3898:	f004 0401 	andpl.w	r4, r4, #1
    389c:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    38a0:	4930      	ldr	r1, [pc, #192]	; (3964 <gpio_nrfx_pin_interrupt_configure+0x1cc>)
    38a2:	bf54      	ite	pl
    38a4:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    38a6:	2403      	movmi	r4, #3
    38a8:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    38aa:	2701      	movs	r7, #1
    38ac:	fa07 f602 	lsl.w	r6, r7, r2
    38b0:	f3bf 8f5b 	dmb	ish
    38b4:	e851 0f00 	ldrex	r0, [r1]
    38b8:	ea40 0306 	orr.w	r3, r0, r6
    38bc:	e841 3c00 	strex	ip, r3, [r1]
    38c0:	f1bc 0f00 	cmp.w	ip, #0
    38c4:	d1f6      	bne.n	38b4 <gpio_nrfx_pin_interrupt_configure+0x11c>
    38c6:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
    38ca:	40d0      	lsrs	r0, r2
    38cc:	f010 0301 	ands.w	r3, r0, #1
    38d0:	d134      	bne.n	393c <gpio_nrfx_pin_interrupt_configure+0x1a4>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    38d2:	0091      	lsls	r1, r2, #2
    38d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    38d8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
    38dc:	3240      	adds	r2, #64	; 0x40
    38de:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    38e2:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    38e6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    38ea:	0092      	lsls	r2, r2, #2
    38ec:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    38f0:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
    38f2:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    38f4:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    38f8:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    38fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3900:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3904:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    3908:	4305      	orrs	r5, r0
    390a:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    390e:	6013      	str	r3, [r2, #0]
    3910:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3912:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    3916:	f042 0201 	orr.w	r2, r2, #1
    391a:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
    391e:	4a10      	ldr	r2, [pc, #64]	; (3960 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
    3920:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
    3924:	4618      	mov	r0, r3
    3926:	e00e      	b.n	3946 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    3928:	2001      	movs	r0, #1
    392a:	40a0      	lsls	r0, r4
    392c:	ea21 0100 	bic.w	r1, r1, r0
    3930:	e754      	b.n	37dc <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    3932:	3301      	adds	r3, #1
    3934:	2b08      	cmp	r3, #8
    3936:	f47f af6f 	bne.w	3818 <gpio_nrfx_pin_interrupt_configure+0x80>
    393a:	e798      	b.n	386e <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    393c:	3201      	adds	r2, #1
    393e:	2a08      	cmp	r2, #8
    3940:	d1b4      	bne.n	38ac <gpio_nrfx_pin_interrupt_configure+0x114>
	return -ENODEV;
    3942:	f06f 0012 	mvn.w	r0, #18
}
    3946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3948:	6931      	ldr	r1, [r6, #16]
    394a:	40e1      	lsrs	r1, r4
    394c:	f001 0101 	and.w	r1, r1, #1
    3950:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3954:	4628      	mov	r0, r5
    3956:	b2c9      	uxtb	r1, r1
    3958:	f002 fdf8 	bl	654c <nrf_gpio_cfg_sense_set>
	int res = 0;
    395c:	4610      	mov	r0, r2
    395e:	e7f2      	b.n	3946 <gpio_nrfx_pin_interrupt_configure+0x1ae>
    3960:	40006000 	.word	0x40006000
    3964:	20000898 	.word	0x20000898

00003968 <gpiote_event_handler>:
{
    3968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    396c:	4d3f      	ldr	r5, [pc, #252]	; (3a6c <gpiote_event_handler+0x104>)
    396e:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    3970:	2e00      	cmp	r6, #0
    3972:	d04e      	beq.n	3a12 <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
    3974:	4b3e      	ldr	r3, [pc, #248]	; (3a70 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    3976:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
    397a:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    397c:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    397e:	4301      	orrs	r1, r0
    3980:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
    3984:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
    3988:	2701      	movs	r7, #1
    398a:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    398e:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    3990:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
    3994:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
    3998:	bb72      	cbnz	r2, 39f8 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    399a:	602a      	str	r2, [r5, #0]
    399c:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
    399e:	4835      	ldr	r0, [pc, #212]	; (3a74 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    39a0:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    39a2:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    39a4:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    39a6:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    39aa:	fa05 f103 	lsl.w	r1, r5, r3
    39ae:	4211      	tst	r1, r2
    39b0:	d011      	beq.n	39d6 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39b2:	009a      	lsls	r2, r3, #2
    39b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    39b8:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    39bc:	6811      	ldr	r1, [r2, #0]
    39be:	b151      	cbz	r1, 39d6 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    39c0:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    39c4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    39c8:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    39ca:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    39ce:	fa05 f101 	lsl.w	r1, r5, r1
    39d2:	6812      	ldr	r2, [r2, #0]
    39d4:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    39d6:	3301      	adds	r3, #1
    39d8:	2b08      	cmp	r3, #8
    39da:	d1e4      	bne.n	39a6 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
    39dc:	b9dc      	cbnz	r4, 3a16 <gpiote_event_handler+0xae>
	if (port_event) {
    39de:	b14e      	cbz	r6, 39f4 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
    39e0:	4c23      	ldr	r4, [pc, #140]	; (3a70 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    39e2:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
    39e6:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    39e8:	4301      	orrs	r1, r0
    39ea:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
    39ee:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    39f0:	2600      	movs	r6, #0
	while (level_pins) {
    39f2:	bb42      	cbnz	r2, 3a46 <gpiote_event_handler+0xde>
}
    39f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    39f8:	423a      	tst	r2, r7
    39fa:	d006      	beq.n	3a0a <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    39fc:	2100      	movs	r1, #0
    39fe:	f008 001f 	and.w	r0, r8, #31
    3a02:	f002 fda3 	bl	654c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3a06:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    3a0a:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    3a0e:	007f      	lsls	r7, r7, #1
    3a10:	e7c2      	b.n	3998 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    3a12:	4634      	mov	r4, r6
    3a14:	e7c3      	b.n	399e <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3a16:	4b16      	ldr	r3, [pc, #88]	; (3a70 <gpiote_event_handler+0x108>)
    3a18:	6859      	ldr	r1, [r3, #4]
    3a1a:	2900      	cmp	r1, #0
    3a1c:	d0df      	beq.n	39de <gpiote_event_handler+0x76>
	return node->next;
    3a1e:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3a20:	4f15      	ldr	r7, [pc, #84]	; (3a78 <gpiote_event_handler+0x110>)
    3a22:	2d00      	cmp	r5, #0
    3a24:	bf38      	it	cc
    3a26:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    3a28:	688a      	ldr	r2, [r1, #8]
    3a2a:	4022      	ands	r2, r4
    3a2c:	d002      	beq.n	3a34 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
    3a2e:	684b      	ldr	r3, [r1, #4]
    3a30:	4638      	mov	r0, r7
    3a32:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3a34:	2d00      	cmp	r5, #0
    3a36:	d0d2      	beq.n	39de <gpiote_event_handler+0x76>
    3a38:	682b      	ldr	r3, [r5, #0]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	bf38      	it	cc
    3a3e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3a40:	4629      	mov	r1, r5
    3a42:	461d      	mov	r5, r3
    3a44:	e7f0      	b.n	3a28 <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
    3a46:	4215      	tst	r5, r2
    3a48:	d00c      	beq.n	3a64 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3a4a:	6921      	ldr	r1, [r4, #16]
    3a4c:	40f1      	lsrs	r1, r6
    3a4e:	f001 0101 	and.w	r1, r1, #1
    3a52:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    3a56:	b2c9      	uxtb	r1, r1
    3a58:	f006 001f 	and.w	r0, r6, #31
    3a5c:	f002 fd76 	bl	654c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3a60:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    3a64:	3601      	adds	r6, #1
		bit <<= 1;
    3a66:	006d      	lsls	r5, r5, #1
    3a68:	e7c3      	b.n	39f2 <gpiote_event_handler+0x8a>
    3a6a:	bf00      	nop
    3a6c:	4000617c 	.word	0x4000617c
    3a70:	2000087c 	.word	0x2000087c
    3a74:	40006000 	.word	0x40006000
    3a78:	20000090 	.word	0x20000090

00003a7c <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    3a7c:	b510      	push	{r4, lr}
    3a7e:	4604      	mov	r4, r0
    3a80:	2200      	movs	r2, #0
    3a82:	2101      	movs	r1, #1
    3a84:	2003      	movs	r0, #3
    3a86:	f7ff fb03 	bl	3090 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    3a8a:	6860      	ldr	r0, [r4, #4]
    3a8c:	68e3      	ldr	r3, [r4, #12]
    3a8e:	4a06      	ldr	r2, [pc, #24]	; (3aa8 <twi_0_init+0x2c>)
    3a90:	f100 0108 	add.w	r1, r0, #8
    3a94:	f001 f872 	bl	4b7c <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    3a98:	4b04      	ldr	r3, [pc, #16]	; (3aac <twi_0_init+0x30>)
    3a9a:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
    3a9c:	bf14      	ite	ne
    3a9e:	f06f 000f 	mvnne.w	r0, #15
    3aa2:	2000      	moveq	r0, #0
    3aa4:	bd10      	pop	{r4, pc}
    3aa6:	bf00      	nop
    3aa8:	00003ab1 	.word	0x00003ab1
    3aac:	0bad0000 	.word	0x0bad0000

00003ab0 <event_handler>:
	switch (p_event->type) {
    3ab0:	7803      	ldrb	r3, [r0, #0]
    3ab2:	2b01      	cmp	r3, #1
    3ab4:	d008      	beq.n	3ac8 <event_handler+0x18>
    3ab6:	2b02      	cmp	r3, #2
    3ab8:	d008      	beq.n	3acc <event_handler+0x1c>
    3aba:	b94b      	cbnz	r3, 3ad0 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    3abc:	4b05      	ldr	r3, [pc, #20]	; (3ad4 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    3abe:	620b      	str	r3, [r1, #32]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3ac0:	f101 0010 	add.w	r0, r1, #16
    3ac4:	f001 be2c 	b.w	5720 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    3ac8:	4b03      	ldr	r3, [pc, #12]	; (3ad8 <event_handler+0x28>)
    3aca:	e7f8      	b.n	3abe <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    3acc:	4b03      	ldr	r3, [pc, #12]	; (3adc <event_handler+0x2c>)
    3ace:	e7f6      	b.n	3abe <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    3ad0:	4b03      	ldr	r3, [pc, #12]	; (3ae0 <event_handler+0x30>)
    3ad2:	e7f4      	b.n	3abe <event_handler+0xe>
    3ad4:	0bad0000 	.word	0x0bad0000
    3ad8:	0bae0001 	.word	0x0bae0001
    3adc:	0bae0002 	.word	0x0bae0002
    3ae0:	0bad0001 	.word	0x0bad0001

00003ae4 <i2c_nrfx_twi_transfer>:
{
    3ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ae8:	4604      	mov	r4, r0
    3aea:	b087      	sub	sp, #28
    3aec:	460d      	mov	r5, r1
    3aee:	4617      	mov	r7, r2
    3af0:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
    3af2:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
    3af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3af8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3afc:	f001 fe30 	bl	5760 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    3b00:	68e0      	ldr	r0, [r4, #12]
    3b02:	3010      	adds	r0, #16
    3b04:	2200      	movs	r2, #0
    3b06:	2300      	movs	r3, #0
    3b08:	f001 fe2a 	bl	5760 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    3b0c:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
    3b0e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 3bc8 <i2c_nrfx_twi_transfer+0xe4>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
    3b12:	f001 f87b 	bl	4c0c <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
    3b16:	f04f 0800 	mov.w	r8, #0
    3b1a:	45b8      	cmp	r8, r7
    3b1c:	d301      	bcc.n	3b22 <i2c_nrfx_twi_transfer+0x3e>
    3b1e:	2500      	movs	r5, #0
    3b20:	e029      	b.n	3b76 <i2c_nrfx_twi_transfer+0x92>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    3b22:	f895 b008 	ldrb.w	fp, [r5, #8]
    3b26:	f01b 0608 	ands.w	r6, fp, #8
    3b2a:	d144      	bne.n	3bb6 <i2c_nrfx_twi_transfer+0xd2>
		nrfx_twi_xfer_desc_t cur_xfer = {
    3b2c:	2214      	movs	r2, #20
    3b2e:	4631      	mov	r1, r6
    3b30:	a801      	add	r0, sp, #4
    3b32:	f002 fce1 	bl	64f8 <memset>
    3b36:	686a      	ldr	r2, [r5, #4]
    3b38:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    3b3a:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    3b3e:	682a      	ldr	r2, [r5, #0]
    3b40:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    3b44:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
    3b48:	f88d 9005 	strb.w	r9, [sp, #5]
    3b4c:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    3b4e:	d11c      	bne.n	3b8a <i2c_nrfx_twi_transfer+0xa6>
			if ((i < (num_msgs - 1)) &&
    3b50:	1e7a      	subs	r2, r7, #1
    3b52:	4542      	cmp	r2, r8
    3b54:	d902      	bls.n	3b5c <i2c_nrfx_twi_transfer+0x78>
    3b56:	7d2a      	ldrb	r2, [r5, #20]
    3b58:	0752      	lsls	r2, r2, #29
    3b5a:	d518      	bpl.n	3b8e <i2c_nrfx_twi_transfer+0xaa>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    3b5c:	bb5b      	cbnz	r3, 3bb6 <i2c_nrfx_twi_transfer+0xd2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    3b5e:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    3b60:	6860      	ldr	r0, [r4, #4]
    3b62:	a901      	add	r1, sp, #4
    3b64:	f001 f87c 	bl	4c60 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    3b68:	4550      	cmp	r0, sl
    3b6a:	d012      	beq.n	3b92 <i2c_nrfx_twi_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
    3b6c:	4b15      	ldr	r3, [pc, #84]	; (3bc4 <i2c_nrfx_twi_transfer+0xe0>)
    3b6e:	4298      	cmp	r0, r3
    3b70:	d024      	beq.n	3bbc <i2c_nrfx_twi_transfer+0xd8>
				ret = -EIO;
    3b72:	f06f 0504 	mvn.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
    3b76:	6860      	ldr	r0, [r4, #4]
    3b78:	f001 f858 	bl	4c2c <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
    3b7c:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
    3b7e:	f001 fdcf 	bl	5720 <z_impl_k_sem_give>
}
    3b82:	4628      	mov	r0, r5
    3b84:	b007      	add	sp, #28
    3b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    3b8a:	4632      	mov	r2, r6
    3b8c:	e7e8      	b.n	3b60 <i2c_nrfx_twi_transfer+0x7c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    3b8e:	2240      	movs	r2, #64	; 0x40
    3b90:	e7e6      	b.n	3b60 <i2c_nrfx_twi_transfer+0x7c>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    3b92:	68e0      	ldr	r0, [r4, #12]
    3b94:	3010      	adds	r0, #16
	return z_impl_k_sem_take(sem, timeout);
    3b96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3b9a:	2300      	movs	r3, #0
    3b9c:	f001 fde0 	bl	5760 <z_impl_k_sem_take>
		if (ret != 0) {
    3ba0:	2800      	cmp	r0, #0
    3ba2:	d1e6      	bne.n	3b72 <i2c_nrfx_twi_transfer+0x8e>
		res = get_dev_data(dev)->res;
    3ba4:	68e3      	ldr	r3, [r4, #12]
    3ba6:	6a1b      	ldr	r3, [r3, #32]
		if (res != NRFX_SUCCESS) {
    3ba8:	4553      	cmp	r3, sl
    3baa:	f105 050c 	add.w	r5, r5, #12
    3bae:	d1e0      	bne.n	3b72 <i2c_nrfx_twi_transfer+0x8e>
	for (size_t i = 0; i < num_msgs; i++) {
    3bb0:	f108 0801 	add.w	r8, r8, #1
    3bb4:	e7b1      	b.n	3b1a <i2c_nrfx_twi_transfer+0x36>
			ret = -ENOTSUP;
    3bb6:	f06f 0522 	mvn.w	r5, #34	; 0x22
    3bba:	e7dc      	b.n	3b76 <i2c_nrfx_twi_transfer+0x92>
				ret = -EBUSY;
    3bbc:	f06f 050f 	mvn.w	r5, #15
    3bc0:	e7d9      	b.n	3b76 <i2c_nrfx_twi_transfer+0x92>
    3bc2:	bf00      	nop
    3bc4:	0bad000b 	.word	0x0bad000b
    3bc8:	0bad0000 	.word	0x0bad0000

00003bcc <hts221_channel_get>:

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
    3bcc:	290d      	cmp	r1, #13
{
    3bce:	b570      	push	{r4, r5, r6, lr}
	struct hts221_data *data = dev->data;
    3bd0:	68c0      	ldr	r0, [r0, #12]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
    3bd2:	d120      	bne.n	3c16 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    3bd4:	8945      	ldrh	r5, [r0, #10]
    3bd6:	8983      	ldrh	r3, [r0, #12]
			   (data->t_sample - data->t0_out) /
    3bd8:	f9b0 6012 	ldrsh.w	r6, [r0, #18]
			   (data->t1_out - data->t0_out) +
    3bdc:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    3be0:	1b5c      	subs	r4, r3, r5
			   (data->t_sample - data->t0_out) /
    3be2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
    3be6:	1b9b      	subs	r3, r3, r6
			   (data->t1_out - data->t0_out) +
    3be8:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    3bea:	4363      	muls	r3, r4
			   (data->t_sample - data->t0_out) /
    3bec:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
    3bf0:	442b      	add	r3, r5
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	4619      	mov	r1, r3
    3bf6:	bfb8      	it	lt
    3bf8:	1dd9      	addlt	r1, r3, #7
    3bfa:	10c9      	asrs	r1, r1, #3
    3bfc:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 8) * (1000000 / 8);
    3bfe:	4259      	negs	r1, r3
    3c00:	f001 0107 	and.w	r1, r1, #7
    3c04:	f003 0307 	and.w	r3, r3, #7
    3c08:	bf58      	it	pl
    3c0a:	424b      	negpl	r3, r1
    3c0c:	4911      	ldr	r1, [pc, #68]	; (3c54 <hts221_channel_get+0x88>)
			   (data->h1_t0_out - data->h0_t0_out) +
			   data->h0_rh_x2;

		/* convert humidity x2 to percent */
		val->val1 = conv_val / 2;
		val->val2 = (conv_val % 2) * 500000;
    3c0e:	434b      	muls	r3, r1
    3c10:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
    3c12:	2000      	movs	r0, #0
}
    3c14:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
    3c16:	2910      	cmp	r1, #16
    3c18:	d119      	bne.n	3c4e <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    3c1a:	7a05      	ldrb	r5, [r0, #8]
    3c1c:	7a43      	ldrb	r3, [r0, #9]
			   (data->rh_sample - data->h0_t0_out) /
    3c1e:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
			   (data->h1_t0_out - data->h0_t0_out) +
    3c22:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    3c26:	1b5c      	subs	r4, r3, r5
			   (data->rh_sample - data->h0_t0_out) /
    3c28:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    3c2c:	1b9b      	subs	r3, r3, r6
			   (data->h1_t0_out - data->h0_t0_out) +
    3c2e:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    3c30:	4363      	muls	r3, r4
			   (data->rh_sample - data->h0_t0_out) /
    3c32:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
    3c36:	442b      	add	r3, r5
		val->val1 = conv_val / 2;
    3c38:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
    3c3c:	1049      	asrs	r1, r1, #1
		val->val2 = (conv_val % 2) * 500000;
    3c3e:	2b00      	cmp	r3, #0
    3c40:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
    3c44:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 2) * 500000;
    3c46:	bfb8      	it	lt
    3c48:	425b      	neglt	r3, r3
    3c4a:	4903      	ldr	r1, [pc, #12]	; (3c58 <hts221_channel_get+0x8c>)
    3c4c:	e7df      	b.n	3c0e <hts221_channel_get+0x42>
		return -ENOTSUP;
    3c4e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3c52:	e7df      	b.n	3c14 <hts221_channel_get+0x48>
    3c54:	0001e848 	.word	0x0001e848
    3c58:	0007a120 	.word	0x0007a120

00003c5c <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
    3c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct hts221_config *cfg = dev->config;
    3c60:	6846      	ldr	r6, [r0, #4]
	struct hts221_data *data = dev->data;
    3c62:	68c7      	ldr	r7, [r0, #12]
{
    3c64:	4605      	mov	r5, r0
    3c66:	b08c      	sub	sp, #48	; 0x30
	uint8_t id, idx;

	data->i2c = device_get_binding(cfg->i2c_bus);
    3c68:	6830      	ldr	r0, [r6, #0]
    3c6a:	f001 f901 	bl	4e70 <z_impl_device_get_binding>
    3c6e:	6038      	str	r0, [r7, #0]
	if (data->i2c == NULL) {
    3c70:	b910      	cbnz	r0, 3c78 <hts221_init+0x1c>
	 */
	k_sleep(K_MSEC(3));

	if (hts221_read_conversion_data(dev) < 0) {
		LOG_ERR("Failed to read conversion data.");
		return -EINVAL;
    3c72:	f06f 0015 	mvn.w	r0, #21
    3c76:	e01c      	b.n	3cb2 <hts221_init+0x56>
	if (i2c_reg_read_byte(data->i2c, cfg->i2c_addr,
    3c78:	210f      	movs	r1, #15
    3c7a:	f88d 1006 	strb.w	r1, [sp, #6]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    3c7e:	f10d 0106 	add.w	r1, sp, #6
    3c82:	88b3      	ldrh	r3, [r6, #4]
    3c84:	9106      	str	r1, [sp, #24]
	msg[0].len = num_write;
	msg[0].flags = I2C_MSG_WRITE;
    3c86:	2100      	movs	r1, #0
	msg[0].len = num_write;
    3c88:	2401      	movs	r4, #1
	msg[0].flags = I2C_MSG_WRITE;
    3c8a:	f88d 1020 	strb.w	r1, [sp, #32]

	msg[1].buf = (uint8_t *)read_buf;
    3c8e:	f10d 0105 	add.w	r1, sp, #5
	msg[1].len = num_read;
    3c92:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3c96:	2107      	movs	r1, #7
	msg[0].len = num_write;
    3c98:	9407      	str	r4, [sp, #28]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3c9a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
	return api->transfer(dev, msgs, num_msgs, addr);
    3c9e:	6882      	ldr	r2, [r0, #8]
    3ca0:	a906      	add	r1, sp, #24
    3ca2:	f8d2 8004 	ldr.w	r8, [r2, #4]
    3ca6:	2202      	movs	r2, #2
    3ca8:	47c0      	blx	r8
    3caa:	2800      	cmp	r0, #0
    3cac:	da04      	bge.n	3cb8 <hts221_init+0x5c>
		return -EIO;
    3cae:	f06f 0004 	mvn.w	r0, #4
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
    3cb2:	b00c      	add	sp, #48	; 0x30
    3cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (id != HTS221_CHIP_ID) {
    3cb8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3cbc:	2bbc      	cmp	r3, #188	; 0xbc
    3cbe:	d1d8      	bne.n	3c72 <hts221_init+0x16>
		if (!strcmp(hts221_odr_strings[idx], CONFIG_HTS221_ODR)) {
    3cc0:	493c      	ldr	r1, [pc, #240]	; (3db4 <hts221_init+0x158>)
    3cc2:	4608      	mov	r0, r1
    3cc4:	f002 fbe1 	bl	648a <strcmp>
    3cc8:	b168      	cbz	r0, 3ce6 <hts221_init+0x8a>
    3cca:	493a      	ldr	r1, [pc, #232]	; (3db4 <hts221_init+0x158>)
    3ccc:	483a      	ldr	r0, [pc, #232]	; (3db8 <hts221_init+0x15c>)
    3cce:	f002 fbdc 	bl	648a <strcmp>
    3cd2:	b138      	cbz	r0, 3ce4 <hts221_init+0x88>
    3cd4:	4937      	ldr	r1, [pc, #220]	; (3db4 <hts221_init+0x158>)
    3cd6:	4839      	ldr	r0, [pc, #228]	; (3dbc <hts221_init+0x160>)
    3cd8:	f002 fbd7 	bl	648a <strcmp>
    3cdc:	2800      	cmp	r0, #0
    3cde:	d1c8      	bne.n	3c72 <hts221_init+0x16>
    3ce0:	2403      	movs	r4, #3
    3ce2:	e000      	b.n	3ce6 <hts221_init+0x8a>
    3ce4:	2402      	movs	r4, #2
	if (i2c_reg_write_byte(data->i2c, cfg->i2c_addr,
    3ce6:	6838      	ldr	r0, [r7, #0]
    3ce8:	88b3      	ldrh	r3, [r6, #4]
	msg.len = num_bytes;
    3cea:	2702      	movs	r7, #2
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    3cec:	2220      	movs	r2, #32
    3cee:	f064 047b 	orn	r4, r4, #123	; 0x7b
	msg.buf = (uint8_t *)buf;
    3cf2:	ae02      	add	r6, sp, #8
	uint8_t tx_buf[2] = {reg_addr, value};
    3cf4:	f88d 2008 	strb.w	r2, [sp, #8]
    3cf8:	f88d 4009 	strb.w	r4, [sp, #9]
	msg.buf = (uint8_t *)buf;
    3cfc:	9606      	str	r6, [sp, #24]
	msg.len = num_bytes;
    3cfe:	9707      	str	r7, [sp, #28]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    3d00:	f88d 7020 	strb.w	r7, [sp, #32]
	return api->transfer(dev, msgs, num_msgs, addr);
    3d04:	6882      	ldr	r2, [r0, #8]
    3d06:	a906      	add	r1, sp, #24
    3d08:	6854      	ldr	r4, [r2, #4]
    3d0a:	2201      	movs	r2, #1
    3d0c:	47a0      	blx	r4
    3d0e:	2800      	cmp	r0, #0
    3d10:	dbcd      	blt.n	3cae <hts221_init+0x52>
	return z_impl_k_sleep(timeout);
    3d12:	2100      	movs	r1, #0
    3d14:	2063      	movs	r0, #99	; 0x63
    3d16:	f001 fcdb 	bl	56d0 <z_impl_k_sleep>
	struct hts221_data *data = dev->data;
    3d1a:	68ec      	ldr	r4, [r5, #12]
	if (i2c_burst_read(data->i2c, cfg->i2c_addr,
    3d1c:	686b      	ldr	r3, [r5, #4]
    3d1e:	6820      	ldr	r0, [r4, #0]
    3d20:	889b      	ldrh	r3, [r3, #4]
	msg[1].buf = (uint8_t *)read_buf;
    3d22:	9609      	str	r6, [sp, #36]	; 0x24
    3d24:	22b0      	movs	r2, #176	; 0xb0
    3d26:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    3d2a:	f10d 0207 	add.w	r2, sp, #7
    3d2e:	9206      	str	r2, [sp, #24]
	msg[0].len = num_write;
    3d30:	2201      	movs	r2, #1
    3d32:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
    3d34:	2210      	movs	r2, #16
	msg[0].flags = I2C_MSG_WRITE;
    3d36:	2500      	movs	r5, #0
	msg[1].len = num_read;
    3d38:	920a      	str	r2, [sp, #40]	; 0x28
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3d3a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    3d3c:	f88d 5020 	strb.w	r5, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3d40:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	return api->transfer(dev, msgs, num_msgs, addr);
    3d44:	6882      	ldr	r2, [r0, #8]
    3d46:	a906      	add	r1, sp, #24
    3d48:	6856      	ldr	r6, [r2, #4]
    3d4a:	463a      	mov	r2, r7
    3d4c:	47b0      	blx	r6
    3d4e:	42a8      	cmp	r0, r5
    3d50:	db8f      	blt.n	3c72 <hts221_init+0x16>
	data->h0_rh_x2 = buf[0];
    3d52:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    3d56:	8123      	strh	r3, [r4, #8]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
    3d58:	f89d 300d 	ldrb.w	r3, [sp, #13]
    3d5c:	021a      	lsls	r2, r3, #8
    3d5e:	f402 7140 	and.w	r1, r2, #768	; 0x300
    3d62:	f89d 200a 	ldrb.w	r2, [sp, #10]
    3d66:	430a      	orrs	r2, r1
    3d68:	8162      	strh	r2, [r4, #10]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
    3d6a:	f89d 200b 	ldrb.w	r2, [sp, #11]
    3d6e:	019b      	lsls	r3, r3, #6
    3d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
    3d74:	4313      	orrs	r3, r2
    3d76:	81a3      	strh	r3, [r4, #12]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
    3d78:	f89d 200f 	ldrb.w	r2, [sp, #15]
    3d7c:	f89d 300e 	ldrb.w	r3, [sp, #14]
    3d80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3d84:	81e3      	strh	r3, [r4, #14]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
    3d86:	f89d 2013 	ldrb.w	r2, [sp, #19]
    3d8a:	f89d 3012 	ldrb.w	r3, [sp, #18]
    3d8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3d92:	8223      	strh	r3, [r4, #16]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
    3d94:	f89d 2015 	ldrb.w	r2, [sp, #21]
    3d98:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3d9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3da0:	8263      	strh	r3, [r4, #18]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
    3da2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    3da6:	f89d 3016 	ldrb.w	r3, [sp, #22]
    3daa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3dae:	82a3      	strh	r3, [r4, #20]
	return 0;
    3db0:	4628      	mov	r0, r5
    3db2:	e77e      	b.n	3cb2 <hts221_init+0x56>
    3db4:	000077af 	.word	0x000077af
    3db8:	00007bb4 	.word	0x00007bb4
    3dbc:	00007bb6 	.word	0x00007bb6

00003dc0 <lis2dh_channel_get>:
	struct lis2dh_data *lis2dh = dev->data;
    3dc0:	2903      	cmp	r1, #3
{
    3dc2:	b570      	push	{r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
    3dc4:	68c4      	ldr	r4, [r0, #12]
	switch (chan) {
    3dc6:	d81c      	bhi.n	3e02 <lis2dh_channel_get+0x42>
    3dc8:	4b0f      	ldr	r3, [pc, #60]	; (3e08 <lis2dh_channel_get+0x48>)
    3dca:	4810      	ldr	r0, [pc, #64]	; (3e0c <lis2dh_channel_get+0x4c>)
    3dcc:	565b      	ldrsb	r3, [r3, r1]
    3dce:	5646      	ldrsb	r6, [r0, r1]
	val->val1 = converted_val / 1000000;
    3dd0:	4d0f      	ldr	r5, [pc, #60]	; (3e10 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    3dd2:	42b3      	cmp	r3, r6
    3dd4:	f102 0208 	add.w	r2, r2, #8
    3dd8:	dd01      	ble.n	3dde <lis2dh_channel_get+0x1e>
	return 0;
    3dda:	2000      	movs	r0, #0
}
    3ddc:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
    3dde:	1d19      	adds	r1, r3, #4
    3de0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    3de4:	3301      	adds	r3, #1
	converted_val = (raw_val >> 4) * scale;
    3de6:	f9b1 0001 	ldrsh.w	r0, [r1, #1]
    3dea:	6921      	ldr	r1, [r4, #16]
    3dec:	1100      	asrs	r0, r0, #4
    3dee:	4348      	muls	r0, r1
	val->val1 = converted_val / 1000000;
    3df0:	fb90 f1f5 	sdiv	r1, r0, r5
    3df4:	f842 1c08 	str.w	r1, [r2, #-8]
	val->val2 = converted_val % 1000000;
    3df8:	fb05 0111 	mls	r1, r5, r1, r0
    3dfc:	f842 1c04 	str.w	r1, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
    3e00:	e7e7      	b.n	3dd2 <lis2dh_channel_get+0x12>
		return -ENOTSUP;
    3e02:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3e06:	e7e9      	b.n	3ddc <lis2dh_channel_get+0x1c>
    3e08:	00007bbb 	.word	0x00007bbb
    3e0c:	00007bbf 	.word	0x00007bbf
    3e10:	000f4240 	.word	0x000f4240

00003e14 <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
    3e14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
    3e16:	6846      	ldr	r6, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
    3e18:	68c5      	ldr	r5, [r0, #12]
{
    3e1a:	4604      	mov	r4, r0
	int status;
	uint8_t id;
	uint8_t raw[6];

	lis2dh->bus = device_get_binding(cfg->bus_name);
    3e1c:	6830      	ldr	r0, [r6, #0]
    3e1e:	f001 f827 	bl	4e70 <z_impl_device_get_binding>
    3e22:	6028      	str	r0, [r5, #0]
	if (!lis2dh->bus) {
    3e24:	b918      	cbnz	r0, 3e2e <lis2dh_init+0x1a>
		LOG_ERR("master not found: %s", cfg->bus_name);
		return -EINVAL;
    3e26:	f06f 0015 	mvn.w	r0, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
    3e2a:	b004      	add	sp, #16
    3e2c:	bd70      	pop	{r4, r5, r6, pc}
	cfg->bus_init(dev);
    3e2e:	6873      	ldr	r3, [r6, #4]
    3e30:	4620      	mov	r0, r4
    3e32:	4798      	blx	r3
	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
    3e34:	686b      	ldr	r3, [r5, #4]
    3e36:	f10d 0207 	add.w	r2, sp, #7
    3e3a:	689b      	ldr	r3, [r3, #8]
    3e3c:	210f      	movs	r1, #15
    3e3e:	4620      	mov	r0, r4
    3e40:	4798      	blx	r3
	if (status < 0) {
    3e42:	2800      	cmp	r0, #0
    3e44:	dbf1      	blt.n	3e2a <lis2dh_init+0x16>
	if (id != LIS2DH_CHIP_ID) {
    3e46:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3e4a:	2b33      	cmp	r3, #51	; 0x33
    3e4c:	d1eb      	bne.n	3e26 <lis2dh_init+0x12>
	if (cfg->is_lsm303agr_dev) {
    3e4e:	7ab3      	ldrb	r3, [r6, #10]
    3e50:	b15b      	cbz	r3, 3e6a <lis2dh_init+0x56>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
    3e52:	4b1d      	ldr	r3, [pc, #116]	; (3ec8 <lis2dh_init+0xb4>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
    3e54:	f644 1216 	movw	r2, #18710	; 0x4916
    3e58:	f242 418b 	movw	r1, #9355	; 0x248b
    3e5c:	e9c3 1200 	strd	r1, r2, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
    3e60:	4a1a      	ldr	r2, [pc, #104]	; (3ecc <lis2dh_init+0xb8>)
    3e62:	f249 202d 	movw	r0, #37421	; 0x922d
    3e66:	e9c3 0202 	strd	r0, r2, [r3, #8]
	if (cfg->disc_pull_up) {
    3e6a:	7af3      	ldrb	r3, [r6, #11]
    3e6c:	bb13      	cbnz	r3, 3eb4 <lis2dh_init+0xa0>
	(void)memset(raw, 0, sizeof(raw));
    3e6e:	2206      	movs	r2, #6
    3e70:	2100      	movs	r1, #0
    3e72:	a802      	add	r0, sp, #8
    3e74:	f002 fb40 	bl	64f8 <memset>
	raw[0] = LIS2DH_ACCEL_EN_BITS;
    3e78:	2307      	movs	r3, #7
    3e7a:	f88d 3008 	strb.w	r3, [sp, #8]
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
    3e7e:	686b      	ldr	r3, [r5, #4]
    3e80:	aa02      	add	r2, sp, #8
    3e82:	685e      	ldr	r6, [r3, #4]
    3e84:	2120      	movs	r1, #32
    3e86:	2306      	movs	r3, #6
    3e88:	4620      	mov	r0, r4
    3e8a:	47b0      	blx	r6
	if (status < 0) {
    3e8c:	2800      	cmp	r0, #0
    3e8e:	dbcc      	blt.n	3e2a <lis2dh_init+0x16>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
    3e90:	4b0d      	ldr	r3, [pc, #52]	; (3ec8 <lis2dh_init+0xb4>)
    3e92:	681b      	ldr	r3, [r3, #0]
    3e94:	612b      	str	r3, [r5, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4,
    3e96:	686b      	ldr	r3, [r5, #4]
    3e98:	2200      	movs	r2, #0
    3e9a:	68db      	ldr	r3, [r3, #12]
    3e9c:	2123      	movs	r1, #35	; 0x23
    3e9e:	4620      	mov	r0, r4
    3ea0:	4798      	blx	r3
	if (status < 0) {
    3ea2:	2800      	cmp	r0, #0
    3ea4:	dbc1      	blt.n	3e2a <lis2dh_init+0x16>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    3ea6:	686b      	ldr	r3, [r5, #4]
    3ea8:	2247      	movs	r2, #71	; 0x47
    3eaa:	68db      	ldr	r3, [r3, #12]
    3eac:	2120      	movs	r1, #32
    3eae:	4620      	mov	r0, r4
    3eb0:	4798      	blx	r3
    3eb2:	e7ba      	b.n	3e2a <lis2dh_init+0x16>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
    3eb4:	686b      	ldr	r3, [r5, #4]
    3eb6:	691e      	ldr	r6, [r3, #16]
    3eb8:	2380      	movs	r3, #128	; 0x80
    3eba:	461a      	mov	r2, r3
    3ebc:	211e      	movs	r1, #30
    3ebe:	4620      	mov	r0, r4
    3ec0:	47b0      	blx	r6
		if (status < 0) {
    3ec2:	2800      	cmp	r0, #0
    3ec4:	dad3      	bge.n	3e6e <lis2dh_init+0x5a>
    3ec6:	e7b0      	b.n	3e2a <lis2dh_init+0x16>
    3ec8:	20000030 	.word	0x20000030
    3ecc:	0001b694 	.word	0x0001b694

00003ed0 <lis2dh_i2c_init>:

int lis2dh_i2c_init(const struct device *dev)
{
	struct lis2dh_data *data = dev->data;

	data->hw_tf = &lis2dh_i2c_transfer_fn;
    3ed0:	68c3      	ldr	r3, [r0, #12]
    3ed2:	4a02      	ldr	r2, [pc, #8]	; (3edc <lis2dh_i2c_init+0xc>)
    3ed4:	605a      	str	r2, [r3, #4]

	return 0;
}
    3ed6:	2000      	movs	r0, #0
    3ed8:	4770      	bx	lr
    3eda:	bf00      	nop
    3edc:	000076ac 	.word	0x000076ac

00003ee0 <lis2mdl_channel_get>:

static int lis2mdl_channel_get(const struct device *dev,
				 enum sensor_channel chan,
				 struct sensor_value *val)
{
	switch (chan) {
    3ee0:	290b      	cmp	r1, #11
{
    3ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (chan) {
    3ee4:	d804      	bhi.n	3ef0 <lis2mdl_channel_get+0x10>
    3ee6:	2907      	cmp	r1, #7
    3ee8:	d811      	bhi.n	3f0e <lis2mdl_channel_get+0x2e>
    3eea:	f06f 0022 	mvn.w	r0, #34	; 0x22
		LOG_DBG("Channel not supported");
		return -ENOTSUP;
	}

	return 0;
}
    3eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (chan) {
    3ef0:	290c      	cmp	r1, #12
    3ef2:	d1fa      	bne.n	3eea <lis2mdl_channel_get+0xa>
	val->val1 = drv_data->temp_sample / 100;
    3ef4:	68c3      	ldr	r3, [r0, #12]
    3ef6:	6918      	ldr	r0, [r3, #16]
    3ef8:	2164      	movs	r1, #100	; 0x64
    3efa:	fb90 f3f1 	sdiv	r3, r0, r1
    3efe:	6013      	str	r3, [r2, #0]
	val->val2 = (drv_data->temp_sample % 100) * 10000;
    3f00:	fb01 0313 	mls	r3, r1, r3, r0
    3f04:	f242 7110 	movw	r1, #10000	; 0x2710
    3f08:	434b      	muls	r3, r1
    3f0a:	6053      	str	r3, [r2, #4]
    3f0c:	e010      	b.n	3f30 <lis2mdl_channel_get+0x50>
		lis2mdl_channel_get_mag(dev, chan, val);
    3f0e:	290b      	cmp	r1, #11
    3f10:	bf18      	it	ne
    3f12:	3908      	subne	r1, #8
    3f14:	68c4      	ldr	r4, [r0, #12]
		pval->val1 = cval / 1000000;
    3f16:	4e0e      	ldr	r6, [pc, #56]	; (3f50 <lis2mdl_channel_get+0x70>)
    3f18:	bf19      	ittee	ne
    3f1a:	b2c9      	uxtbne	r1, r1
		lis2mdl_channel_get_mag(dev, chan, val);
    3f1c:	460d      	movne	r5, r1
    3f1e:	2502      	moveq	r5, #2
    3f20:	2100      	moveq	r1, #0
		cval = lis2mdl->mag[i] * 1500;
    3f22:	340a      	adds	r4, #10
    3f24:	f240 57dc 	movw	r7, #1500	; 0x5dc
	for (i = ofs_start; i <= ofs_stop; i++) {
    3f28:	42a9      	cmp	r1, r5
    3f2a:	f102 0208 	add.w	r2, r2, #8
    3f2e:	dd01      	ble.n	3f34 <lis2mdl_channel_get+0x54>
	return 0;
    3f30:	2000      	movs	r0, #0
}
    3f32:	e7dc      	b.n	3eee <lis2mdl_channel_get+0xe>
		cval = lis2mdl->mag[i] * 1500;
    3f34:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
    3f38:	fb13 f007 	smulbb	r0, r3, r7
		pval->val1 = cval / 1000000;
    3f3c:	fb90 f3f6 	sdiv	r3, r0, r6
    3f40:	f842 3c08 	str.w	r3, [r2, #-8]
		pval->val2 = cval % 1000000;
    3f44:	fb06 0313 	mls	r3, r6, r3, r0
    3f48:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_stop; i++) {
    3f4c:	3101      	adds	r1, #1
    3f4e:	e7eb      	b.n	3f28 <lis2mdl_channel_get+0x48>
    3f50:	000f4240 	.word	0x000f4240

00003f54 <lis2mdl_i2c_init>:
			       reg_addr, value, len);
}

int lis2mdl_i2c_init(const struct device *dev)
{
	struct lis2mdl_data *data = dev->data;
    3f54:	68c3      	ldr	r3, [r0, #12]

	data->ctx_i2c.read_reg = (stmdev_read_ptr) lis2mdl_i2c_read;
    3f56:	4a05      	ldr	r2, [pc, #20]	; (3f6c <lis2mdl_i2c_init+0x18>)
    3f58:	61da      	str	r2, [r3, #28]
	data->ctx_i2c.write_reg = (stmdev_write_ptr) lis2mdl_i2c_write;
    3f5a:	461a      	mov	r2, r3
    3f5c:	4904      	ldr	r1, [pc, #16]	; (3f70 <lis2mdl_i2c_init+0x1c>)
    3f5e:	f842 1f18 	str.w	r1, [r2, #24]!

	data->ctx = &data->ctx_i2c;
	data->ctx->handle = data;

	return 0;
}
    3f62:	2000      	movs	r0, #0
	data->ctx = &data->ctx_i2c;
    3f64:	615a      	str	r2, [r3, #20]
	data->ctx->handle = data;
    3f66:	621b      	str	r3, [r3, #32]
}
    3f68:	4770      	bx	lr
    3f6a:	bf00      	nop
    3f6c:	000069af 	.word	0x000069af
    3f70:	000069e9 	.word	0x000069e9

00003f74 <lps22hb_channel_get>:
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
    3f74:	290e      	cmp	r1, #14
{
    3f76:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;
    3f78:	68c3      	ldr	r3, [r0, #12]
	if (chan == SENSOR_CHAN_PRESS) {
    3f7a:	d111      	bne.n	3fa0 <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
    3f7c:	6859      	ldr	r1, [r3, #4]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
    3f7e:	4b11      	ldr	r3, [pc, #68]	; (3fc4 <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
    3f80:	130d      	asrs	r5, r1, #12
    3f82:	240a      	movs	r4, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
    3f84:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
    3f88:	fb95 f0f4 	sdiv	r0, r5, r4
    3f8c:	6010      	str	r0, [r2, #0]
	val->val2 = (raw_val >> 12) % 10 * 100000 +
    3f8e:	fb04 5010 	mls	r0, r4, r0, r5
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
    3f92:	4359      	muls	r1, r3
	val->val2 = (raw_val >> 12) % 10 * 100000 +
    3f94:	4343      	muls	r3, r0
    3f96:	eb03 3311 	add.w	r3, r3, r1, lsr #12
	val->val2 = ((int32_t)raw_val % 100) * 10000;
    3f9a:	6053      	str	r3, [r2, #4]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
    3f9c:	2000      	movs	r0, #0
}
    3f9e:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
    3fa0:	290d      	cmp	r1, #13
    3fa2:	d10c      	bne.n	3fbe <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
    3fa4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
	val->val1 = raw_val / 100;
    3fa8:	2164      	movs	r1, #100	; 0x64
    3faa:	fb90 f3f1 	sdiv	r3, r0, r1
    3fae:	6013      	str	r3, [r2, #0]
	val->val2 = ((int32_t)raw_val % 100) * 10000;
    3fb0:	fb01 0313 	mls	r3, r1, r3, r0
    3fb4:	f242 7110 	movw	r1, #10000	; 0x2710
    3fb8:	fb13 f301 	smulbb	r3, r3, r1
    3fbc:	e7ed      	b.n	3f9a <lps22hb_channel_get+0x26>
		return -ENOTSUP;
    3fbe:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3fc2:	e7ec      	b.n	3f9e <lps22hb_channel_get+0x2a>
    3fc4:	000186a0 	.word	0x000186a0

00003fc8 <lsm6dsl_accel_set_odr_raw>:
{
    3fc8:	b570      	push	{r4, r5, r6, lr}
	struct lsm6dsl_data *data = dev->data;
    3fca:	68c5      	ldr	r5, [r0, #12]
	if (data->hw_tf->update_reg(dev,
    3fcc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3fce:	010b      	lsls	r3, r1, #4
    3fd0:	68d6      	ldr	r6, [r2, #12]
{
    3fd2:	460c      	mov	r4, r1
	if (data->hw_tf->update_reg(dev,
    3fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3fd8:	22f0      	movs	r2, #240	; 0xf0
    3fda:	2110      	movs	r1, #16
    3fdc:	47b0      	blx	r6
    3fde:	2800      	cmp	r0, #0
    3fe0:	db09      	blt.n	3ff6 <lsm6dsl_accel_set_odr_raw+0x2e>
	if (odr < ARRAY_SIZE(lsm6dsl_odr_map)) {
    3fe2:	2c0a      	cmp	r4, #10
		return lsm6dsl_odr_map[odr];
    3fe4:	bf96      	itet	ls
    3fe6:	4b05      	ldrls	r3, [pc, #20]	; (3ffc <lsm6dsl_accel_set_odr_raw+0x34>)
	return lsm6dsl_odr_map[ARRAY_SIZE(lsm6dsl_odr_map) - 1];
    3fe8:	f641 2304 	movwhi	r3, #6660	; 0x1a04
		return lsm6dsl_odr_map[odr];
    3fec:	f833 3014 	ldrhls.w	r3, [r3, r4, lsl #1]
	data->accel_freq = lsm6dsl_odr_to_freq_val(odr);
    3ff0:	852b      	strh	r3, [r5, #40]	; 0x28
	return 0;
    3ff2:	2000      	movs	r0, #0
}
    3ff4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3ff6:	f06f 0004 	mvn.w	r0, #4
    3ffa:	e7fb      	b.n	3ff4 <lsm6dsl_accel_set_odr_raw+0x2c>
    3ffc:	00007794 	.word	0x00007794

00004000 <lsm6dsl_init>:

	return 0;
}

static int lsm6dsl_init(const struct device *dev)
{
    4000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct lsm6dsl_config * const config = dev->config;
    4002:	6845      	ldr	r5, [r0, #4]
	struct lsm6dsl_data *data = dev->data;
    4004:	68c6      	ldr	r6, [r0, #12]
{
    4006:	4604      	mov	r4, r0

	data->bus = device_get_binding(config->bus_name);
    4008:	6828      	ldr	r0, [r5, #0]
    400a:	f000 ff31 	bl	4e70 <z_impl_device_get_binding>
    400e:	6030      	str	r0, [r6, #0]
	if (!data->bus) {
    4010:	2800      	cmp	r0, #0
    4012:	d05b      	beq.n	40cc <lsm6dsl_init+0xcc>
		LOG_DBG("master not found: %s", config->bus_name);
		return -EINVAL;
	}

	config->bus_init(dev);
    4014:	686b      	ldr	r3, [r5, #4]
    4016:	4620      	mov	r0, r4
    4018:	4798      	blx	r3
	struct lsm6dsl_data *data = dev->data;
    401a:	68e5      	ldr	r5, [r4, #12]
	if (data->hw_tf->update_reg(dev, LSM6DSL_REG_CTRL3_C,
    401c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    401e:	68de      	ldr	r6, [r3, #12]
    4020:	2380      	movs	r3, #128	; 0x80
    4022:	461a      	mov	r2, r3
    4024:	2112      	movs	r1, #18
    4026:	4620      	mov	r0, r4
    4028:	47b0      	blx	r6
    402a:	2800      	cmp	r0, #0
    402c:	da03      	bge.n	4036 <lsm6dsl_init+0x36>

	if (lsm6dsl_init_chip(dev) < 0) {
		LOG_DBG("failed to initialize chip");
		return -EIO;
    402e:	f06f 0004 	mvn.w	r0, #4
		return -EIO;
	}
#endif

	return 0;
}
    4032:	b003      	add	sp, #12
    4034:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_impl_k_busy_wait(usec_to_wait);
    4036:	f648 00b8 	movw	r0, #35000	; 0x88b8
    403a:	f003 f98c 	bl	7356 <z_impl_k_busy_wait>
	if (data->hw_tf->read_reg(dev, LSM6DSL_REG_WHO_AM_I, &chip_id) < 0) {
    403e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4040:	f10d 0207 	add.w	r2, sp, #7
    4044:	689b      	ldr	r3, [r3, #8]
    4046:	210f      	movs	r1, #15
    4048:	4620      	mov	r0, r4
    404a:	4798      	blx	r3
    404c:	2800      	cmp	r0, #0
    404e:	dbee      	blt.n	402e <lsm6dsl_init+0x2e>
	if (chip_id != LSM6DSL_VAL_WHO_AM_I) {
    4050:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4054:	2b6a      	cmp	r3, #106	; 0x6a
    4056:	d1ea      	bne.n	402e <lsm6dsl_init+0x2e>
	if (lsm6dsl_accel_set_fs_raw(dev,
    4058:	2100      	movs	r1, #0
    405a:	4620      	mov	r0, r4
    405c:	f002 fd9f 	bl	6b9e <lsm6dsl_accel_set_fs_raw>
    4060:	2800      	cmp	r0, #0
    4062:	dbe4      	blt.n	402e <lsm6dsl_init+0x2e>
	data->accel_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_ACCEL_ODR);
    4064:	2600      	movs	r6, #0
	data->accel_sensitivity = LSM6DSL_DEFAULT_ACCEL_SENSITIVITY;
    4066:	4b1b      	ldr	r3, [pc, #108]	; (40d4 <lsm6dsl_init+0xd4>)
    4068:	612b      	str	r3, [r5, #16]
	data->accel_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_ACCEL_ODR);
    406a:	852e      	strh	r6, [r5, #40]	; 0x28
	if (lsm6dsl_accel_set_odr_raw(dev, CONFIG_LSM6DSL_ACCEL_ODR) < 0) {
    406c:	4631      	mov	r1, r6
    406e:	4620      	mov	r0, r4
    4070:	f7ff ffaa 	bl	3fc8 <lsm6dsl_accel_set_odr_raw>
    4074:	42b0      	cmp	r0, r6
    4076:	dbda      	blt.n	402e <lsm6dsl_init+0x2e>
	if (lsm6dsl_gyro_set_fs_raw(dev, LSM6DSL_DEFAULT_GYRO_FULLSCALE) < 0) {
    4078:	2104      	movs	r1, #4
    407a:	4620      	mov	r0, r4
    407c:	f002 fda2 	bl	6bc4 <lsm6dsl_gyro_set_fs_raw>
    4080:	42b0      	cmp	r0, r6
    4082:	dbd4      	blt.n	402e <lsm6dsl_init+0x2e>
	data->gyro_sensitivity = LSM6DSL_DEFAULT_GYRO_SENSITIVITY;
    4084:	4b14      	ldr	r3, [pc, #80]	; (40d8 <lsm6dsl_init+0xd8>)
    4086:	622b      	str	r3, [r5, #32]
	data->gyro_freq = lsm6dsl_odr_to_freq_val(CONFIG_LSM6DSL_GYRO_ODR);
    4088:	85ae      	strh	r6, [r5, #44]	; 0x2c
	if (lsm6dsl_gyro_set_odr_raw(dev, CONFIG_LSM6DSL_GYRO_ODR) < 0) {
    408a:	4631      	mov	r1, r6
    408c:	4620      	mov	r0, r4
    408e:	f002 fdae 	bl	6bee <lsm6dsl_gyro_set_odr_raw>
    4092:	42b0      	cmp	r0, r6
    4094:	dbcb      	blt.n	402e <lsm6dsl_init+0x2e>
	if (data->hw_tf->update_reg(dev,
    4096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4098:	2207      	movs	r2, #7
    409a:	68df      	ldr	r7, [r3, #12]
    409c:	210a      	movs	r1, #10
    409e:	4633      	mov	r3, r6
    40a0:	4620      	mov	r0, r4
    40a2:	47b8      	blx	r7
    40a4:	42b0      	cmp	r0, r6
    40a6:	dbc2      	blt.n	402e <lsm6dsl_init+0x2e>
	if (data->hw_tf->update_reg(dev,
    40a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    40aa:	2246      	movs	r2, #70	; 0x46
    40ac:	68dd      	ldr	r5, [r3, #12]
    40ae:	2112      	movs	r1, #18
    40b0:	2344      	movs	r3, #68	; 0x44
    40b2:	4620      	mov	r0, r4
    40b4:	47a8      	blx	r5
    40b6:	42b0      	cmp	r0, r6
    40b8:	dbb9      	blt.n	402e <lsm6dsl_init+0x2e>
	if (lsm6dsl_init_interrupt(dev) < 0) {
    40ba:	4620      	mov	r0, r4
    40bc:	f000 f816 	bl	40ec <lsm6dsl_init_interrupt>
		return -EIO;
    40c0:	42b0      	cmp	r0, r6
    40c2:	bfac      	ite	ge
    40c4:	4630      	movge	r0, r6
    40c6:	f06f 0004 	mvnlt.w	r0, #4
    40ca:	e7b2      	b.n	4032 <lsm6dsl_init+0x32>
		return -EINVAL;
    40cc:	f06f 0015 	mvn.w	r0, #21
    40d0:	e7af      	b.n	4032 <lsm6dsl_init+0x32>
    40d2:	bf00      	nop
    40d4:	3d79db23 	.word	0x3d79db23
    40d8:	408c0000 	.word	0x408c0000

000040dc <lsm6dsl_i2c_init>:

int lsm6dsl_i2c_init(const struct device *dev)
{
	struct lsm6dsl_data *data = dev->data;

	data->hw_tf = &lsm6dsl_i2c_transfer_fn;
    40dc:	68c3      	ldr	r3, [r0, #12]
    40de:	4a02      	ldr	r2, [pc, #8]	; (40e8 <lsm6dsl_i2c_init+0xc>)
    40e0:	625a      	str	r2, [r3, #36]	; 0x24

	return 0;
}
    40e2:	2000      	movs	r0, #0
    40e4:	4770      	bx	lr
    40e6:	bf00      	nop
    40e8:	00007728 	.word	0x00007728

000040ec <lsm6dsl_init_interrupt>:
	lsm6dsl_thread_cb(drv_data->dev);
}
#endif

int lsm6dsl_init_interrupt(const struct device *dev)
{
    40ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct lsm6dsl_config *config = dev->config;
    40f0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct lsm6dsl_data *drv_data = dev->data;
    40f4:	68c5      	ldr	r5, [r0, #12]
{
    40f6:	4606      	mov	r6, r0
    40f8:	b089      	sub	sp, #36	; 0x24

	/* setup data ready gpio interrupt */
	drv_data->gpio = device_get_binding(config->irq_dev_name);
    40fa:	f8d8 000c 	ldr.w	r0, [r8, #12]
    40fe:	f000 feb7 	bl	4e70 <z_impl_device_get_binding>
    4102:	4604      	mov	r4, r0
    4104:	6368      	str	r0, [r5, #52]	; 0x34
	if (drv_data->gpio == NULL) {
    4106:	2800      	cmp	r0, #0
    4108:	d071      	beq.n	41ee <lsm6dsl_init_interrupt+0x102>
		LOG_INF("Cannot get pointer for irq_dev_name");
		goto end;
	}

	gpio_pin_configure(drv_data->gpio, config->irq_pin,
			   GPIO_INPUT | config->irq_flags);
    410a:	f8d8 3014 	ldr.w	r3, [r8, #20]
	gpio_pin_configure(drv_data->gpio, config->irq_pin,
    410e:	f898 b010 	ldrb.w	fp, [r8, #16]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4112:	04da      	lsls	r2, r3, #19
	struct gpio_driver_data *data =
    4114:	e9d0 a902 	ldrd	sl, r9, [r0, #8]
    4118:	f443 7780 	orr.w	r7, r3, #256	; 0x100
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    411c:	d506      	bpl.n	412c <lsm6dsl_init_interrupt+0x40>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    411e:	f413 6f40 	tst.w	r3, #3072	; 0xc00
    4122:	d003      	beq.n	412c <lsm6dsl_init_interrupt+0x40>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4124:	07d8      	lsls	r0, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
    4126:	bf48      	it	mi
    4128:	f487 57e0 	eormi.w	r7, r7, #7168	; 0x1c00
	return api->pin_configure(port, pin, flags);
    412c:	68a3      	ldr	r3, [r4, #8]
    412e:	463a      	mov	r2, r7
    4130:	681b      	ldr	r3, [r3, #0]
    4132:	4659      	mov	r1, fp
    4134:	4620      	mov	r0, r4
    4136:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    4138:	b9b0      	cbnz	r0, 4168 <lsm6dsl_init_interrupt+0x7c>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    413a:	f8d9 3000 	ldr.w	r3, [r9]
    413e:	2201      	movs	r2, #1
    4140:	07f9      	lsls	r1, r7, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4142:	fa02 f20b 	lsl.w	r2, r2, fp
    4146:	bf4c      	ite	mi
    4148:	4313      	orrmi	r3, r2
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    414a:	4393      	bicpl	r3, r2
	}
	if (((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U)
    414c:	f417 4fc0 	tst.w	r7, #24576	; 0x6000
    4150:	f8c9 3000 	str.w	r3, [r9]
    4154:	d008      	beq.n	4168 <lsm6dsl_init_interrupt+0x7c>
	    && (api->pin_interrupt_configure != NULL)) {
    4156:	f8da 3018 	ldr.w	r3, [sl, #24]
    415a:	b12b      	cbz	r3, 4168 <lsm6dsl_init_interrupt+0x7c>
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    415c:	f427 2200 	bic.w	r2, r7, #524288	; 0x80000
    4160:	4659      	mov	r1, fp
    4162:	4620      	mov	r0, r4
    4164:	f002 fe8b 	bl	6e7e <z_impl_gpio_pin_interrupt_configure>

	gpio_init_callback(&drv_data->gpio_cb,
			   lsm6dsl_gpio_callback, BIT(config->irq_pin));
    4168:	f8d8 3010 	ldr.w	r3, [r8, #16]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    416c:	4821      	ldr	r0, [pc, #132]	; (41f4 <lsm6dsl_init_interrupt+0x108>)
    416e:	2201      	movs	r2, #1
    4170:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
    4174:	e9c5 030f 	strd	r0, r3, [r5, #60]	; 0x3c

	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
    4178:	6b68      	ldr	r0, [r5, #52]	; 0x34
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    417a:	6883      	ldr	r3, [r0, #8]
    417c:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&drv_data->gpio_cb,
    417e:	f105 0138 	add.w	r1, r5, #56	; 0x38
    4182:	b923      	cbnz	r3, 418e <lsm6dsl_init_interrupt+0xa2>
		LOG_ERR("Could not set gpio callback.");
		return -EIO;
    4184:	f06f 0004 	mvn.w	r0, #4

	setup_irq(drv_data, config->irq_pin, true);

end:
	return 0;
}
    4188:	b009      	add	sp, #36	; 0x24
    418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    418e:	4798      	blx	r3
	if (gpio_add_callback(drv_data->gpio, &drv_data->gpio_cb) < 0) {
    4190:	2800      	cmp	r0, #0
    4192:	dbf7      	blt.n	4184 <lsm6dsl_init_interrupt+0x98>
	if (drv_data->hw_tf->update_reg(dev,
    4194:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4196:	68dc      	ldr	r4, [r3, #12]
    4198:	2303      	movs	r3, #3
    419a:	461a      	mov	r2, r3
    419c:	210d      	movs	r1, #13
    419e:	4630      	mov	r0, r6
    41a0:	47a0      	blx	r4
    41a2:	2800      	cmp	r0, #0
    41a4:	dbee      	blt.n	4184 <lsm6dsl_init_interrupt+0x98>
	drv_data->dev = dev;
    41a6:	632e      	str	r6, [r5, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
    41a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    41ac:	2100      	movs	r1, #0
    41ae:	f505 60a0 	add.w	r0, r5, #1280	; 0x500
    41b2:	f003 f8be 	bl	7332 <z_impl_k_sem_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    41b6:	2200      	movs	r2, #0
    41b8:	2300      	movs	r3, #0
    41ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
    41be:	2400      	movs	r4, #0
    41c0:	f06f 0305 	mvn.w	r3, #5
    41c4:	e9cd 3403 	strd	r3, r4, [sp, #12]
    41c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    41cc:	f105 0160 	add.w	r1, r5, #96	; 0x60
    41d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    41d4:	4b08      	ldr	r3, [pc, #32]	; (41f8 <lsm6dsl_init_interrupt+0x10c>)
    41d6:	9500      	str	r5, [sp, #0]
    41d8:	f505 6090 	add.w	r0, r5, #1152	; 0x480
    41dc:	f001 fb1c 	bl	5818 <z_impl_k_thread_create>
	gpio_pin_interrupt_configure(drv_data->gpio,
    41e0:	f898 1010 	ldrb.w	r1, [r8, #16]
    41e4:	6b68      	ldr	r0, [r5, #52]	; 0x34
    41e6:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    41ea:	f002 fe5c 	bl	6ea6 <gpio_pin_interrupt_configure>
	return 0;
    41ee:	4620      	mov	r0, r4
    41f0:	e7ca      	b.n	4188 <lsm6dsl_init_interrupt+0x9c>
    41f2:	bf00      	nop
    41f4:	00006edf 	.word	0x00006edf
    41f8:	00006eab 	.word	0x00006eab

000041fc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    41fc:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    41fe:	794b      	ldrb	r3, [r1, #5]
    4200:	2b01      	cmp	r3, #1
    4202:	d123      	bne.n	424c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    4204:	798b      	ldrb	r3, [r1, #6]
    4206:	2b03      	cmp	r3, #3
    4208:	d120      	bne.n	424c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    420a:	79ca      	ldrb	r2, [r1, #7]
    420c:	b122      	cbz	r2, 4218 <uarte_nrfx_configure+0x1c>
    420e:	2a01      	cmp	r2, #1
    4210:	d11c      	bne.n	424c <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    4212:	6843      	ldr	r3, [r0, #4]
    4214:	791b      	ldrb	r3, [r3, #4]
    4216:	b1cb      	cbz	r3, 424c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4218:	790c      	ldrb	r4, [r1, #4]
    421a:	b114      	cbz	r4, 4222 <uarte_nrfx_configure+0x26>
    421c:	2c02      	cmp	r4, #2
    421e:	d115      	bne.n	424c <uarte_nrfx_configure+0x50>
    4220:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4222:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4224:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    4226:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    422a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    422c:	d062      	beq.n	42f4 <uarte_nrfx_configure+0xf8>
    422e:	d82b      	bhi.n	4288 <uarte_nrfx_configure+0x8c>
    4230:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4234:	d061      	beq.n	42fa <uarte_nrfx_configure+0xfe>
    4236:	d814      	bhi.n	4262 <uarte_nrfx_configure+0x66>
    4238:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    423c:	d05f      	beq.n	42fe <uarte_nrfx_configure+0x102>
    423e:	d808      	bhi.n	4252 <uarte_nrfx_configure+0x56>
    4240:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4244:	d05e      	beq.n	4304 <uarte_nrfx_configure+0x108>
    4246:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    424a:	d05e      	beq.n	430a <uarte_nrfx_configure+0x10e>
    424c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    4250:	e04f      	b.n	42f2 <uarte_nrfx_configure+0xf6>
    4252:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4256:	d05b      	beq.n	4310 <uarte_nrfx_configure+0x114>
    4258:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    425c:	d1f6      	bne.n	424c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    425e:	4b37      	ldr	r3, [pc, #220]	; (433c <uarte_nrfx_configure+0x140>)
    4260:	e03c      	b.n	42dc <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    4262:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4266:	d056      	beq.n	4316 <uarte_nrfx_configure+0x11a>
    4268:	d807      	bhi.n	427a <uarte_nrfx_configure+0x7e>
    426a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    426e:	d054      	beq.n	431a <uarte_nrfx_configure+0x11e>
    4270:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4274:	d1ea      	bne.n	424c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4276:	4b32      	ldr	r3, [pc, #200]	; (4340 <uarte_nrfx_configure+0x144>)
    4278:	e030      	b.n	42dc <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    427a:	f647 2612 	movw	r6, #31250	; 0x7a12
    427e:	42b3      	cmp	r3, r6
    4280:	d1e4      	bne.n	424c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4282:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4286:	e029      	b.n	42dc <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    4288:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    428c:	d047      	beq.n	431e <uarte_nrfx_configure+0x122>
    428e:	d813      	bhi.n	42b8 <uarte_nrfx_configure+0xbc>
    4290:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4294:	d046      	beq.n	4324 <uarte_nrfx_configure+0x128>
    4296:	d809      	bhi.n	42ac <uarte_nrfx_configure+0xb0>
    4298:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    429c:	42b3      	cmp	r3, r6
    429e:	d043      	beq.n	4328 <uarte_nrfx_configure+0x12c>
    42a0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    42a4:	d1d2      	bne.n	424c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    42a6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    42aa:	e017      	b.n	42dc <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    42ac:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    42b0:	d1cc      	bne.n	424c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    42b2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    42b6:	e011      	b.n	42dc <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    42b8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    42bc:	d037      	beq.n	432e <uarte_nrfx_configure+0x132>
    42be:	d808      	bhi.n	42d2 <uarte_nrfx_configure+0xd6>
    42c0:	4e20      	ldr	r6, [pc, #128]	; (4344 <uarte_nrfx_configure+0x148>)
    42c2:	42b3      	cmp	r3, r6
    42c4:	d036      	beq.n	4334 <uarte_nrfx_configure+0x138>
    42c6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    42ca:	d1bf      	bne.n	424c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    42cc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    42d0:	e004      	b.n	42dc <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    42d2:	4e1d      	ldr	r6, [pc, #116]	; (4348 <uarte_nrfx_configure+0x14c>)
    42d4:	42b3      	cmp	r3, r6
    42d6:	d1b9      	bne.n	424c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    42d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    42dc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    42e0:	68c3      	ldr	r3, [r0, #12]
    42e2:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    42e4:	4322      	orrs	r2, r4
    42e6:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    42e8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    42ec:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    42f0:	2000      	movs	r0, #0
}
    42f2:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    42f4:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    42f8:	e7f0      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    42fa:	4b14      	ldr	r3, [pc, #80]	; (434c <uarte_nrfx_configure+0x150>)
    42fc:	e7ee      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    42fe:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4302:	e7eb      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    4304:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4308:	e7e8      	b.n	42dc <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    430a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    430e:	e7e5      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4310:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4314:	e7e2      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4316:	4b0e      	ldr	r3, [pc, #56]	; (4350 <uarte_nrfx_configure+0x154>)
    4318:	e7e0      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    431a:	4b0e      	ldr	r3, [pc, #56]	; (4354 <uarte_nrfx_configure+0x158>)
    431c:	e7de      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    431e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4322:	e7db      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4324:	4b0c      	ldr	r3, [pc, #48]	; (4358 <uarte_nrfx_configure+0x15c>)
    4326:	e7d9      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4328:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    432c:	e7d6      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    432e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4332:	e7d3      	b.n	42dc <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4334:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4338:	e7d0      	b.n	42dc <uarte_nrfx_configure+0xe0>
    433a:	bf00      	nop
    433c:	0013b000 	.word	0x0013b000
    4340:	004ea000 	.word	0x004ea000
    4344:	0003d090 	.word	0x0003d090
    4348:	000f4240 	.word	0x000f4240
    434c:	00275000 	.word	0x00275000
    4350:	0075c000 	.word	0x0075c000
    4354:	003af000 	.word	0x003af000
    4358:	013a9000 	.word	0x013a9000

0000435c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    435c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4360:	68c7      	ldr	r7, [r0, #12]
{
    4362:	4606      	mov	r6, r0
    4364:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4366:	f002 fff0 	bl	734a <k_is_in_isr>
    436a:	b9b8      	cbnz	r0, 439c <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    436c:	4b28      	ldr	r3, [pc, #160]	; (4410 <uarte_nrfx_poll_out+0xb4>)
    436e:	781b      	ldrb	r3, [r3, #0]
    4370:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    4374:	6872      	ldr	r2, [r6, #4]
    4376:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    4378:	b193      	cbz	r3, 43a0 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    437a:	f04f 0320 	mov.w	r3, #32
    437e:	f3ef 8411 	mrs	r4, BASEPRI
    4382:	f383 8811 	msr	BASEPRI, r3
    4386:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    438a:	4630      	mov	r0, r6
    438c:	f002 fe24 	bl	6fd8 <is_tx_ready>
    4390:	bb38      	cbnz	r0, 43e2 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    4392:	f384 8811 	msr	BASEPRI, r4
    4396:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    439a:	e7ee      	b.n	437a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    439c:	2301      	movs	r3, #1
    439e:	e7e9      	b.n	4374 <uarte_nrfx_poll_out+0x18>
    43a0:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    43a2:	4630      	mov	r0, r6
    43a4:	f002 fe18 	bl	6fd8 <is_tx_ready>
    43a8:	b970      	cbnz	r0, 43c8 <uarte_nrfx_poll_out+0x6c>
    43aa:	2001      	movs	r0, #1
    43ac:	f002 fe37 	bl	701e <nrfx_busy_wait>
    43b0:	3c01      	subs	r4, #1
    43b2:	d1f6      	bne.n	43a2 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    43b4:	2100      	movs	r1, #0
    43b6:	2021      	movs	r0, #33	; 0x21
    43b8:	f001 f98a 	bl	56d0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    43bc:	e7f0      	b.n	43a0 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    43be:	f384 8811 	msr	BASEPRI, r4
    43c2:	f3bf 8f6f 	isb	sy
}
    43c6:	e7f5      	b.n	43b4 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    43c8:	f04f 0320 	mov.w	r3, #32
    43cc:	f3ef 8411 	mrs	r4, BASEPRI
    43d0:	f383 8811 	msr	BASEPRI, r3
    43d4:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
    43d8:	4630      	mov	r0, r6
    43da:	f002 fdfd 	bl	6fd8 <is_tx_ready>
    43de:	2800      	cmp	r0, #0
    43e0:	d0ed      	beq.n	43be <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    43e2:	f807 8f10 	strb.w	r8, [r7, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    43e6:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43e8:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    43ea:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    43ee:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    43f2:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    43f6:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    43fa:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    43fe:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4402:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    4404:	f384 8811 	msr	BASEPRI, r4
    4408:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4410:	20000d97 	.word	0x20000d97

00004414 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    4414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4416:	2200      	movs	r2, #0
    4418:	4605      	mov	r5, r0
    441a:	2101      	movs	r1, #1
    441c:	2002      	movs	r0, #2
    441e:	f7fe fe37 	bl	3090 <z_arm_irq_priority_set>
    4422:	2002      	movs	r0, #2
    4424:	f7fe fe16 	bl	3054 <arch_irq_enable>
	return config->uarte_regs;
    4428:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    442a:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    442c:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    442e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4432:	2200      	movs	r2, #0
    4434:	2140      	movs	r1, #64	; 0x40
    4436:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
    443a:	2006      	movs	r0, #6
	data->dev = dev;
    443c:	6035      	str	r5, [r6, #0]
    443e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4442:	2103      	movs	r1, #3
    4444:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    4448:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    444c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4450:	2008      	movs	r0, #8
    4452:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    4456:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
    445a:	2220      	movs	r2, #32
    445c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4460:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    4464:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
    4466:	2305      	movs	r3, #5
    4468:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    446c:	2307      	movs	r3, #7
    446e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    4472:	3104      	adds	r1, #4
    4474:	4628      	mov	r0, r5
    4476:	f7ff fec1 	bl	41fc <uarte_nrfx_configure>
	if (err) {
    447a:	4607      	mov	r7, r0
    447c:	2800      	cmp	r0, #0
    447e:	d13c      	bne.n	44fa <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
    4480:	686b      	ldr	r3, [r5, #4]
    4482:	799b      	ldrb	r3, [r3, #6]
    4484:	b1cb      	cbz	r3, 44ba <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4486:	f106 0012 	add.w	r0, r6, #18
    448a:	f000 fa63 	bl	4954 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    448e:	4b1d      	ldr	r3, [pc, #116]	; (4504 <uarte_0_init+0xf0>)
    4490:	4298      	cmp	r0, r3
    4492:	d134      	bne.n	44fe <uarte_0_init+0xea>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4494:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4496:	00c3      	lsls	r3, r0, #3
    4498:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    449c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    44a0:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    44a4:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    44a8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    44ac:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    44b0:	4a15      	ldr	r2, [pc, #84]	; (4508 <uarte_0_init+0xf4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    44b2:	2301      	movs	r3, #1
    44b4:	4083      	lsls	r3, r0
    44b6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    44ba:	2308      	movs	r3, #8
    44bc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44c0:	2300      	movs	r3, #0
    44c2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    44c6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    44ca:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    44ce:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    44d2:	2301      	movs	r3, #1
    44d4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44d8:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    44da:	686b      	ldr	r3, [r5, #4]
    44dc:	799b      	ldrb	r3, [r3, #6]
    44de:	b91b      	cbnz	r3, 44e8 <uarte_0_init+0xd4>
    p_reg->INTENSET = mask;
    44e0:	f44f 7380 	mov.w	r3, #256	; 0x100
    44e4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    44e8:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    44ea:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    44ec:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    44f0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    44f4:	2301      	movs	r3, #1
    44f6:	60a3      	str	r3, [r4, #8]
    44f8:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    44fa:	4638      	mov	r0, r7
    44fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
    44fe:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    4502:	e7fa      	b.n	44fa <uarte_0_init+0xe6>
    4504:	0bad0000 	.word	0x0bad0000
    4508:	4001f000 	.word	0x4001f000

0000450c <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    450c:	4b04      	ldr	r3, [pc, #16]	; (4520 <nrf52_errata_108+0x14>)
    450e:	6818      	ldr	r0, [r3, #0]
    4510:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4512:	bf04      	itt	eq
    4514:	4b03      	ldreq	r3, [pc, #12]	; (4524 <nrf52_errata_108+0x18>)
    4516:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    4518:	1f83      	subs	r3, r0, #6
    451a:	4258      	negs	r0, r3
    451c:	4158      	adcs	r0, r3
    451e:	4770      	bx	lr
    4520:	10000130 	.word	0x10000130
    4524:	f0000fe0 	.word	0xf0000fe0

00004528 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4528:	4b07      	ldr	r3, [pc, #28]	; (4548 <nrf52_errata_16+0x20>)
    452a:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    452c:	2b06      	cmp	r3, #6
    452e:	d109      	bne.n	4544 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    4530:	4b06      	ldr	r3, [pc, #24]	; (454c <nrf52_errata_16+0x24>)
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4538:	3b03      	subs	r3, #3
    453a:	2b03      	cmp	r3, #3
    453c:	d802      	bhi.n	4544 <nrf52_errata_16+0x1c>
    453e:	4a04      	ldr	r2, [pc, #16]	; (4550 <nrf52_errata_16+0x28>)
    4540:	5cd0      	ldrb	r0, [r2, r3]
    4542:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    4544:	2000      	movs	r0, #0
    #endif
}
    4546:	4770      	bx	lr
    4548:	f0000fe0 	.word	0xf0000fe0
    454c:	f0000fe8 	.word	0xf0000fe8
    4550:	00007bcb 	.word	0x00007bcb

00004554 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4554:	4a02      	ldr	r2, [pc, #8]	; (4560 <nvmc_wait+0xc>)
    4556:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    455a:	2b00      	cmp	r3, #0
    455c:	d0fb      	beq.n	4556 <nvmc_wait+0x2>
}
    455e:	4770      	bx	lr
    4560:	4001e000 	.word	0x4001e000

00004564 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4564:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    4566:	f7ff ffd1 	bl	450c <nrf52_errata_108>
    456a:	b128      	cbz	r0, 4578 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    456c:	4b77      	ldr	r3, [pc, #476]	; (474c <SystemInit+0x1e8>)
    456e:	4a78      	ldr	r2, [pc, #480]	; (4750 <SystemInit+0x1ec>)
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	f3c3 2304 	ubfx	r3, r3, #8, #5
    4576:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    4578:	f7ff ffd6 	bl	4528 <nrf52_errata_16>
    457c:	b110      	cbz	r0, 4584 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    457e:	4b75      	ldr	r3, [pc, #468]	; (4754 <SystemInit+0x1f0>)
    4580:	4a75      	ldr	r2, [pc, #468]	; (4758 <SystemInit+0x1f4>)
    4582:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    4584:	f7ff ffc2 	bl	450c <nrf52_errata_108>
    4588:	b128      	cbz	r0, 4596 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    458a:	4b74      	ldr	r3, [pc, #464]	; (475c <SystemInit+0x1f8>)
    458c:	4a74      	ldr	r2, [pc, #464]	; (4760 <SystemInit+0x1fc>)
    458e:	681b      	ldr	r3, [r3, #0]
    4590:	f3c3 3342 	ubfx	r3, r3, #13, #3
    4594:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    4596:	f7ff ffc7 	bl	4528 <nrf52_errata_16>
    459a:	b120      	cbz	r0, 45a6 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    459c:	4a71      	ldr	r2, [pc, #452]	; (4764 <SystemInit+0x200>)
    459e:	68d3      	ldr	r3, [r2, #12]
    45a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    45a4:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    45a6:	f7ff ffb1 	bl	450c <nrf52_errata_108>
    45aa:	b140      	cbz	r0, 45be <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    45ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45b0:	2200      	movs	r2, #0
    45b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    45b6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    45ba:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    45be:	f7ff ffb3 	bl	4528 <nrf52_errata_16>
    45c2:	b110      	cbz	r0, 45ca <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    45c4:	4b68      	ldr	r3, [pc, #416]	; (4768 <SystemInit+0x204>)
    45c6:	2203      	movs	r2, #3
    45c8:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    45ca:	f7ff ffad 	bl	4528 <nrf52_errata_16>
    45ce:	b140      	cbz	r0, 45e2 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    45d0:	4b66      	ldr	r3, [pc, #408]	; (476c <SystemInit+0x208>)
    45d2:	2205      	movs	r2, #5
    45d4:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    45d6:	2201      	movs	r2, #1
    45d8:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    45da:	2200      	movs	r2, #0
    45dc:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    45de:	223f      	movs	r2, #63	; 0x3f
    45e0:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    45e2:	4b63      	ldr	r3, [pc, #396]	; (4770 <SystemInit+0x20c>)
    45e4:	681a      	ldr	r2, [r3, #0]
    45e6:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    45e8:	bf0b      	itete	eq
    45ea:	4b62      	ldreq	r3, [pc, #392]	; (4774 <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    45ec:	4b62      	ldrne	r3, [pc, #392]	; (4778 <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    45ee:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    45f0:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    45f2:	bf02      	ittt	eq
    45f4:	3308      	addeq	r3, #8
    45f6:	681b      	ldreq	r3, [r3, #0]
    45f8:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    45fc:	2a06      	cmp	r2, #6
    45fe:	d14d      	bne.n	469c <SystemInit+0x138>
            {
                switch(var2)
    4600:	3b03      	subs	r3, #3
    4602:	2b03      	cmp	r3, #3
    4604:	d803      	bhi.n	460e <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4606:	4a5d      	ldr	r2, [pc, #372]	; (477c <SystemInit+0x218>)
    4608:	5cd3      	ldrb	r3, [r2, r3]
    460a:	2b00      	cmp	r3, #0
    460c:	d046      	beq.n	469c <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    460e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4612:	4b5b      	ldr	r3, [pc, #364]	; (4780 <SystemInit+0x21c>)
    4614:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4618:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    461c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4620:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4624:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4628:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    462c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4630:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4634:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4638:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    463c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4640:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4644:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4648:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    464c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4650:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4654:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4658:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    465c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4660:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4664:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4668:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    466c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4670:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4674:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4678:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    467c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4680:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4684:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4688:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    468c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4690:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4694:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4698:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    469c:	f7ff ff36 	bl	450c <nrf52_errata_108>
    46a0:	b128      	cbz	r0, 46ae <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    46a2:	4b38      	ldr	r3, [pc, #224]	; (4784 <SystemInit+0x220>)
    46a4:	4a38      	ldr	r2, [pc, #224]	; (4788 <SystemInit+0x224>)
    46a6:	681b      	ldr	r3, [r3, #0]
    46a8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    46ac:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    46ae:	f7ff ff2d 	bl	450c <nrf52_errata_108>
    46b2:	b148      	cbz	r0, 46c8 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    46b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    46bc:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    46be:	bf44      	itt	mi
    46c0:	f06f 0201 	mvnmi.w	r2, #1
    46c4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    46c8:	4b29      	ldr	r3, [pc, #164]	; (4770 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    46ca:	681b      	ldr	r3, [r3, #0]
    46cc:	2b06      	cmp	r3, #6
    46ce:	d10c      	bne.n	46ea <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    46d0:	4b29      	ldr	r3, [pc, #164]	; (4778 <SystemInit+0x214>)
    46d2:	681b      	ldr	r3, [r3, #0]
    46d4:	3b03      	subs	r3, #3
    46d6:	2b03      	cmp	r3, #3
    46d8:	d802      	bhi.n	46e0 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    46da:	4a2c      	ldr	r2, [pc, #176]	; (478c <SystemInit+0x228>)
    46dc:	5cd3      	ldrb	r3, [r2, r3]
    46de:	b123      	cbz	r3, 46ea <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    46e0:	4a2b      	ldr	r2, [pc, #172]	; (4790 <SystemInit+0x22c>)
    46e2:	6813      	ldr	r3, [r2, #0]
    46e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    46e8:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    46ea:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    46ee:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    46f2:	2a00      	cmp	r2, #0
    46f4:	db03      	blt.n	46fe <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    46f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    46fa:	2b00      	cmp	r3, #0
    46fc:	da22      	bge.n	4744 <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    46fe:	4925      	ldr	r1, [pc, #148]	; (4794 <SystemInit+0x230>)
    4700:	2301      	movs	r3, #1
    4702:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4706:	f7ff ff25 	bl	4554 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    470a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    470e:	2415      	movs	r4, #21
    4710:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4714:	f7ff ff1e 	bl	4554 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4718:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    471c:	f7ff ff1a 	bl	4554 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4720:	2300      	movs	r3, #0
    4722:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4726:	f7ff ff15 	bl	4554 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    472a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    472e:	491a      	ldr	r1, [pc, #104]	; (4798 <SystemInit+0x234>)
    4730:	4b1a      	ldr	r3, [pc, #104]	; (479c <SystemInit+0x238>)
    4732:	68ca      	ldr	r2, [r1, #12]
    4734:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4738:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    473a:	60cb      	str	r3, [r1, #12]
    473c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4740:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4742:	e7fd      	b.n	4740 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4744:	4b16      	ldr	r3, [pc, #88]	; (47a0 <SystemInit+0x23c>)
    4746:	4a17      	ldr	r2, [pc, #92]	; (47a4 <SystemInit+0x240>)
    4748:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    474a:	bd10      	pop	{r4, pc}
    474c:	10000324 	.word	0x10000324
    4750:	40013540 	.word	0x40013540
    4754:	4007c074 	.word	0x4007c074
    4758:	baadf00d 	.word	0xbaadf00d
    475c:	10000244 	.word	0x10000244
    4760:	4000053c 	.word	0x4000053c
    4764:	e000edf0 	.word	0xe000edf0
    4768:	400005a0 	.word	0x400005a0
    476c:	40005610 	.word	0x40005610
    4770:	10000130 	.word	0x10000130
    4774:	f0000fe0 	.word	0xf0000fe0
    4778:	10000134 	.word	0x10000134
    477c:	00007bc3 	.word	0x00007bc3
    4780:	4000c000 	.word	0x4000c000
    4784:	10000258 	.word	0x10000258
    4788:	40000ee4 	.word	0x40000ee4
    478c:	00007bc7 	.word	0x00007bc7
    4790:	4000173c 	.word	0x4000173c
    4794:	4001e000 	.word	0x4001e000
    4798:	e000ed00 	.word	0xe000ed00
    479c:	05fa0004 	.word	0x05fa0004
    47a0:	20000054 	.word	0x20000054
    47a4:	03d09000 	.word	0x03d09000

000047a8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    47a8:	4b04      	ldr	r3, [pc, #16]	; (47bc <nrfx_clock_init+0x14>)
    47aa:	791a      	ldrb	r2, [r3, #4]
    47ac:	b922      	cbnz	r2, 47b8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    47ae:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    47b0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    47b2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    47b4:	4802      	ldr	r0, [pc, #8]	; (47c0 <nrfx_clock_init+0x18>)
    47b6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    47b8:	4802      	ldr	r0, [pc, #8]	; (47c4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    47ba:	4770      	bx	lr
    47bc:	200008f8 	.word	0x200008f8
    47c0:	0bad0000 	.word	0x0bad0000
    47c4:	0bad000c 	.word	0x0bad000c

000047c8 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    47c8:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    47ca:	b110      	cbz	r0, 47d2 <nrfx_clock_start+0xa>
    47cc:	2801      	cmp	r0, #1
    47ce:	d033      	beq.n	4838 <nrfx_clock_start+0x70>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    47d0:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    47d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47d6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    47da:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    47de:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    47e2:	4619      	mov	r1, r3
    47e4:	d024      	beq.n	4830 <nrfx_clock_start+0x68>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    47e6:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    47ea:	2a01      	cmp	r2, #1
    47ec:	d120      	bne.n	4830 <nrfx_clock_start+0x68>
    p_reg->LFCLKSRC = (uint32_t)(source);
    47ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47f2:	4b16      	ldr	r3, [pc, #88]	; (484c <nrfx_clock_start+0x84>)
    47f4:	2200      	movs	r2, #0
    47f6:	601a      	str	r2, [r3, #0]
    47f8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    47fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47fe:	2202      	movs	r2, #2
    4800:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    4804:	4a12      	ldr	r2, [pc, #72]	; (4850 <nrfx_clock_start+0x88>)
    4806:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    4808:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    480c:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
    480e:	4b11      	ldr	r3, [pc, #68]	; (4854 <nrfx_clock_start+0x8c>)
    4810:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    4812:	f044 0101 	orr.w	r1, r4, #1
    4816:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    4818:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    481a:	6859      	ldr	r1, [r3, #4]
    481c:	1b49      	subs	r1, r1, r5
    481e:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    4822:	d3fa      	bcc.n	481a <nrfx_clock_start+0x52>
    DWT->CTRL = dwt_ctrl;
    4824:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4826:	4b0c      	ldr	r3, [pc, #48]	; (4858 <nrfx_clock_start+0x90>)
    CoreDebug->DEMCR = core_debug;
    4828:	60d0      	str	r0, [r2, #12]
    482a:	2201      	movs	r2, #1
    482c:	601a      	str	r2, [r3, #0]
}
    482e:	e7cf      	b.n	47d0 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4830:	2300      	movs	r3, #0
    4832:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    4836:	e7dc      	b.n	47f2 <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4838:	4b08      	ldr	r3, [pc, #32]	; (485c <nrfx_clock_start+0x94>)
    483a:	2200      	movs	r2, #0
    483c:	601a      	str	r2, [r3, #0]
    483e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4840:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4844:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4848:	6018      	str	r0, [r3, #0]
}
    484a:	e7c1      	b.n	47d0 <nrfx_clock_start+0x8>
    484c:	40000104 	.word	0x40000104
    4850:	e000edf0 	.word	0xe000edf0
    4854:	e0001000 	.word	0xe0001000
    4858:	40000008 	.word	0x40000008
    485c:	40000100 	.word	0x40000100

00004860 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4860:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    4862:	b110      	cbz	r0, 486a <nrfx_clock_stop+0xa>
    4864:	2801      	cmp	r0, #1
    4866:	d018      	beq.n	489a <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4868:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    486a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    486e:	2202      	movs	r2, #2
    4870:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4874:	4a18      	ldr	r2, [pc, #96]	; (48d8 <nrfx_clock_stop+0x78>)
    4876:	6010      	str	r0, [r2, #0]
    4878:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    487a:	4a18      	ldr	r2, [pc, #96]	; (48dc <nrfx_clock_stop+0x7c>)
    487c:	2101      	movs	r1, #1
    487e:	6011      	str	r1, [r2, #0]
    4880:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4884:	461c      	mov	r4, r3
    4886:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    488a:	03db      	lsls	r3, r3, #15
    488c:	d5ec      	bpl.n	4868 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    488e:	2001      	movs	r0, #1
    4890:	f002 fbc5 	bl	701e <nrfx_busy_wait>
    4894:	3d01      	subs	r5, #1
    4896:	d1f6      	bne.n	4886 <nrfx_clock_stop+0x26>
    4898:	e7e6      	b.n	4868 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    489a:	4b11      	ldr	r3, [pc, #68]	; (48e0 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    489c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48a0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    48a2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48a6:	601a      	str	r2, [r3, #0]
    48a8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48aa:	4b0e      	ldr	r3, [pc, #56]	; (48e4 <nrfx_clock_stop+0x84>)
    48ac:	f242 7510 	movw	r5, #10000	; 0x2710
    48b0:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    48b2:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    48b6:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    48ba:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    48bc:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    48c0:	d505      	bpl.n	48ce <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    48c2:	b123      	cbz	r3, 48ce <nrfx_clock_stop+0x6e>
    48c4:	2001      	movs	r0, #1
    48c6:	f002 fbaa 	bl	701e <nrfx_busy_wait>
    48ca:	3d01      	subs	r5, #1
    48cc:	d1f1      	bne.n	48b2 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    48ce:	4b06      	ldr	r3, [pc, #24]	; (48e8 <nrfx_clock_stop+0x88>)
    48d0:	2200      	movs	r2, #0
    48d2:	715a      	strb	r2, [r3, #5]
    48d4:	e7c8      	b.n	4868 <nrfx_clock_stop+0x8>
    48d6:	bf00      	nop
    48d8:	40000104 	.word	0x40000104
    48dc:	4000000c 	.word	0x4000000c
    48e0:	40000100 	.word	0x40000100
    48e4:	40000004 	.word	0x40000004
    48e8:	200008f8 	.word	0x200008f8

000048ec <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48ec:	4b16      	ldr	r3, [pc, #88]	; (4948 <nrfx_power_clock_irq_handler+0x5c>)
    48ee:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    48f0:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    48f2:	b16a      	cbz	r2, 4910 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48f4:	2200      	movs	r2, #0
    48f6:	601a      	str	r2, [r3, #0]
    48f8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    48fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48fe:	2201      	movs	r2, #1
    4900:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4904:	4b11      	ldr	r3, [pc, #68]	; (494c <nrfx_power_clock_irq_handler+0x60>)
    4906:	7958      	ldrb	r0, [r3, #5]
    4908:	b910      	cbnz	r0, 4910 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    490a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    490c:	681b      	ldr	r3, [r3, #0]
    490e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4910:	4b0f      	ldr	r3, [pc, #60]	; (4950 <nrfx_power_clock_irq_handler+0x64>)
    4912:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4914:	b172      	cbz	r2, 4934 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4916:	2200      	movs	r2, #0
    4918:	601a      	str	r2, [r3, #0]
    491a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    491c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4920:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4924:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4928:	0792      	lsls	r2, r2, #30
    492a:	d104      	bne.n	4936 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    492c:	2201      	movs	r2, #1
    492e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4932:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4934:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4936:	2202      	movs	r2, #2
    4938:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    493c:	4b03      	ldr	r3, [pc, #12]	; (494c <nrfx_power_clock_irq_handler+0x60>)
}
    493e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4942:	681b      	ldr	r3, [r3, #0]
    4944:	2001      	movs	r0, #1
    4946:	4718      	bx	r3
    4948:	40000100 	.word	0x40000100
    494c:	200008f8 	.word	0x200008f8
    4950:	40000104 	.word	0x40000104

00004954 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    4958:	4a14      	ldr	r2, [pc, #80]	; (49ac <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    495a:	4e15      	ldr	r6, [pc, #84]	; (49b0 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    495c:	4f15      	ldr	r7, [pc, #84]	; (49b4 <nrfx_ppi_channel_alloc+0x60>)
{
    495e:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    4960:	4815      	ldr	r0, [pc, #84]	; (49b8 <nrfx_ppi_channel_alloc+0x64>)
{
    4962:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    4964:	f04f 0e01 	mov.w	lr, #1
    4968:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    496c:	f04f 0320 	mov.w	r3, #32
    4970:	f3ef 8811 	mrs	r8, BASEPRI
    4974:	f383 8811 	msr	BASEPRI, r3
    4978:	f3bf 8f6f 	isb	sy
    497c:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    4980:	4213      	tst	r3, r2
    4982:	d007      	beq.n	4994 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    4984:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    4986:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    4988:	bf01      	itttt	eq
    498a:	4319      	orreq	r1, r3
    498c:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    498e:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    4992:	4638      	moveq	r0, r7
	__asm__ volatile(
    4994:	f388 8811 	msr	BASEPRI, r8
    4998:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    499c:	42b8      	cmp	r0, r7
    499e:	d003      	beq.n	49a8 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    49a0:	439a      	bics	r2, r3
    49a2:	f104 0401 	add.w	r4, r4, #1
    49a6:	d1df      	bne.n	4968 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    49a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49ac:	000fffff 	.word	0x000fffff
    49b0:	20000900 	.word	0x20000900
    49b4:	0bad0000 	.word	0x0bad0000
    49b8:	0bad0002 	.word	0x0bad0002

000049bc <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    49bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    49be:	4b34      	ldr	r3, [pc, #208]	; (4a90 <twi_rx_start_transfer+0xd4>)
    49c0:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49c2:	2300      	movs	r3, #0
    49c4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    49c8:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    49cc:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    49d0:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    49d4:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    49d8:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    49dc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    49e0:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    49e4:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    49e6:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    49ea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    49ec:	2b01      	cmp	r3, #1
{
    49ee:	4604      	mov	r4, r0
    49f0:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    49f2:	d117      	bne.n	4a24 <twi_rx_start_transfer+0x68>
    49f4:	6a0b      	ldr	r3, [r1, #32]
    49f6:	065b      	lsls	r3, r3, #25
    49f8:	d414      	bmi.n	4a24 <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    49fa:	2302      	movs	r3, #2
    49fc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a00:	2301      	movs	r3, #1
    4a02:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    4a04:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
    4a08:	2a02      	cmp	r2, #2
    4a0a:	bf18      	it	ne
    4a0c:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    4a0e:	682b      	ldr	r3, [r5, #0]
    4a10:	b193      	cbz	r3, 4a38 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    4a12:	f240 2386 	movw	r3, #646	; 0x286
    4a16:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4a18:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4a1a:	481e      	ldr	r0, [pc, #120]	; (4a94 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
    4a1c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    4a20:	b003      	add	sp, #12
    4a22:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
    4a24:	2301      	movs	r3, #1
    4a26:	e7e9      	b.n	49fc <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
    4a28:	4629      	mov	r1, r5
    4a2a:	4620      	mov	r0, r4
    4a2c:	f002 fb20 	bl	7070 <twi_transfer>
        while ((hw_timeout > 0) &&
    4a30:	b128      	cbz	r0, 4a3e <twi_rx_start_transfer+0x82>
               hw_timeout--;
    4a32:	9b01      	ldr	r3, [sp, #4]
    4a34:	3b01      	subs	r3, #1
    4a36:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    4a38:	9b01      	ldr	r3, [sp, #4]
    4a3a:	2b00      	cmp	r3, #0
    4a3c:	dcf4      	bgt.n	4a28 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
    4a3e:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    4a42:	b95b      	cbnz	r3, 4a5c <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4a44:	4813      	ldr	r0, [pc, #76]	; (4a94 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
    4a46:	9b01      	ldr	r3, [sp, #4]
    4a48:	2b00      	cmp	r3, #0
    4a4a:	dce9      	bgt.n	4a20 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4a4c:	2300      	movs	r3, #0
    4a4e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    4a52:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    4a54:	4810      	ldr	r0, [pc, #64]	; (4a98 <twi_rx_start_transfer+0xdc>)
    4a56:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    4a5a:	e7e1      	b.n	4a20 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    4a5c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4a60:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    4a64:	b18b      	cbz	r3, 4a8a <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4a66:	4a0d      	ldr	r2, [pc, #52]	; (4a9c <twi_rx_start_transfer+0xe0>)
    4a68:	480b      	ldr	r0, [pc, #44]	; (4a98 <twi_rx_start_transfer+0xdc>)
    4a6a:	f013 0f01 	tst.w	r3, #1
    4a6e:	bf18      	it	ne
    4a70:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4a72:	f013 0f02 	tst.w	r3, #2
    4a76:	f102 0201 	add.w	r2, r2, #1
    4a7a:	bf18      	it	ne
    4a7c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4a7e:	f013 0f04 	tst.w	r3, #4
    4a82:	4b07      	ldr	r3, [pc, #28]	; (4aa0 <twi_rx_start_transfer+0xe4>)
    4a84:	bf18      	it	ne
    4a86:	4618      	movne	r0, r3
    4a88:	e7dd      	b.n	4a46 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
    4a8a:	4803      	ldr	r0, [pc, #12]	; (4a98 <twi_rx_start_transfer+0xdc>)
    4a8c:	e7db      	b.n	4a46 <twi_rx_start_transfer+0x8a>
    4a8e:	bf00      	nop
    4a90:	000186a0 	.word	0x000186a0
    4a94:	0bad0000 	.word	0x0bad0000
    4a98:	0bad0001 	.word	0x0bad0001
    4a9c:	0bae0000 	.word	0x0bae0000
    4aa0:	0bae0002 	.word	0x0bae0002

00004aa4 <twi_tx_start_transfer>:
{
    4aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
    4aa6:	4b30      	ldr	r3, [pc, #192]	; (4b68 <twi_tx_start_transfer+0xc4>)
    4aa8:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4aaa:	2300      	movs	r3, #0
    4aac:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    4ab0:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    4ab4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    4ab8:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    4abc:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    4ac0:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    4ac4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    4ac8:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    p_reg->SHORTS = mask;
    4acc:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
    4ad0:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    4ad2:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ad6:	2301      	movs	r3, #1
    4ad8:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    4ada:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
    4ade:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    4ae0:	429a      	cmp	r2, r3
    4ae2:	bf18      	it	ne
    4ae4:	6083      	strne	r3, [r0, #8]
{
    4ae6:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
    4ae8:	f002 faa5 	bl	7036 <twi_send_byte>
    if (p_cb->handler)
    4aec:	682b      	ldr	r3, [r5, #0]
    4aee:	b183      	cbz	r3, 4b12 <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    4af0:	f240 2386 	movw	r3, #646	; 0x286
    4af4:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4af6:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4af8:	481c      	ldr	r0, [pc, #112]	; (4b6c <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
    4afa:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    4afe:	b003      	add	sp, #12
    4b00:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
    4b02:	4629      	mov	r1, r5
    4b04:	4620      	mov	r0, r4
    4b06:	f002 fab3 	bl	7070 <twi_transfer>
        while ((hw_timeout > 0) &&
    4b0a:	b128      	cbz	r0, 4b18 <twi_tx_start_transfer+0x74>
            hw_timeout--;
    4b0c:	9b01      	ldr	r3, [sp, #4]
    4b0e:	3b01      	subs	r3, #1
    4b10:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    4b12:	9b01      	ldr	r3, [sp, #4]
    4b14:	2b00      	cmp	r3, #0
    4b16:	dcf4      	bgt.n	4b02 <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
    4b18:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    4b1c:	b95b      	cbnz	r3, 4b36 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4b1e:	4813      	ldr	r0, [pc, #76]	; (4b6c <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
    4b20:	9b01      	ldr	r3, [sp, #4]
    4b22:	2b00      	cmp	r3, #0
    4b24:	dceb      	bgt.n	4afe <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4b26:	2300      	movs	r3, #0
    4b28:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    4b2c:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    4b2e:	4810      	ldr	r0, [pc, #64]	; (4b70 <twi_tx_start_transfer+0xcc>)
    4b30:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    4b34:	e7e3      	b.n	4afe <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
    4b36:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4b3a:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    4b3e:	b18b      	cbz	r3, 4b64 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4b40:	4a0c      	ldr	r2, [pc, #48]	; (4b74 <twi_tx_start_transfer+0xd0>)
    4b42:	480b      	ldr	r0, [pc, #44]	; (4b70 <twi_tx_start_transfer+0xcc>)
    4b44:	f013 0f01 	tst.w	r3, #1
    4b48:	bf18      	it	ne
    4b4a:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4b4c:	f013 0f02 	tst.w	r3, #2
    4b50:	f102 0201 	add.w	r2, r2, #1
    4b54:	bf18      	it	ne
    4b56:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4b58:	f013 0f04 	tst.w	r3, #4
    4b5c:	4b06      	ldr	r3, [pc, #24]	; (4b78 <twi_tx_start_transfer+0xd4>)
    4b5e:	bf18      	it	ne
    4b60:	4618      	movne	r0, r3
    4b62:	e7dd      	b.n	4b20 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
    4b64:	4802      	ldr	r0, [pc, #8]	; (4b70 <twi_tx_start_transfer+0xcc>)
    4b66:	e7db      	b.n	4b20 <twi_tx_start_transfer+0x7c>
    4b68:	000186a0 	.word	0x000186a0
    4b6c:	0bad0000 	.word	0x0bad0000
    4b70:	0bad0001 	.word	0x0bad0001
    4b74:	0bae0000 	.word	0x0bae0000
    4b78:	0bae0002 	.word	0x0bae0002

00004b7c <nrfx_twi_init>:
{
    4b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4b7e:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4b80:	4d1f      	ldr	r5, [pc, #124]	; (4c00 <nrfx_twi_init+0x84>)
    4b82:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    4b86:	fb0c fc07 	mul.w	ip, ip, r7
    4b8a:	eb05 040c 	add.w	r4, r5, ip
    4b8e:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    4b92:	bb9e      	cbnz	r6, 4bfc <nrfx_twi_init+0x80>
    p_cb->int_mask        = 0;
    4b94:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    4b96:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
    4b9a:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
    4b9e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    TWI_PIN_INIT(p_config->scl);
    4ba2:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
    4ba4:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    4ba6:	7b4b      	ldrb	r3, [r1, #13]
    4ba8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    *p_pin = pin_number & 0x1F;
    4bac:	f006 031f 	and.w	r3, r6, #31
    p_cb->handler         = event_handler;
    4bb0:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4bb4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4bb8:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    4bbc:	f240 6e0c 	movw	lr, #1548	; 0x60c
    4bc0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    4bc4:	684c      	ldr	r4, [r1, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4bc6:	6800      	ldr	r0, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4bc8:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    4bcc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4bd0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
        (nrf_twi_frequency_t)p_config->frequency);
    4bd4:	688b      	ldr	r3, [r1, #8]
    p_reg->PSELSCL = scl_pin;
    4bd6:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSELSDA = sda_pin;
    4bda:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
    4bde:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
    4be2:	b11a      	cbz	r2, 4bec <nrfx_twi_init+0x70>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    4be4:	f340 3007 	sbfx	r0, r0, #12, #8
    4be8:	f7fe fa34 	bl	3054 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4bec:	233c      	movs	r3, #60	; 0x3c
    4bee:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    4bf2:	4804      	ldr	r0, [pc, #16]	; (4c04 <nrfx_twi_init+0x88>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4bf4:	2301      	movs	r3, #1
    4bf6:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    4bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
    4bfc:	4802      	ldr	r0, [pc, #8]	; (4c08 <nrfx_twi_init+0x8c>)
    4bfe:	e7fc      	b.n	4bfa <nrfx_twi_init+0x7e>
    4c00:	20000904 	.word	0x20000904
    4c04:	0bad0000 	.word	0x0bad0000
    4c08:	0bad0005 	.word	0x0bad0005

00004c0c <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4c0c:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4c0e:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    4c10:	2105      	movs	r1, #5
    4c12:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    4c16:	4a04      	ldr	r2, [pc, #16]	; (4c28 <nrfx_twi_enable+0x1c>)
    4c18:	213c      	movs	r1, #60	; 0x3c
    4c1a:	fb01 2303 	mla	r3, r1, r3, r2
    4c1e:	2202      	movs	r2, #2
    4c20:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    4c24:	4770      	bx	lr
    4c26:	bf00      	nop
    4c28:	20000904 	.word	0x20000904

00004c2c <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    4c2c:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    4c2e:	490a      	ldr	r1, [pc, #40]	; (4c58 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4c30:	7902      	ldrb	r2, [r0, #4]
    4c32:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    4c36:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
    4c3a:	f021 0103 	bic.w	r1, r1, #3
    4c3e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4c42:	2100      	movs	r1, #0
    4c44:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4c48:	4b04      	ldr	r3, [pc, #16]	; (4c5c <nrfx_twi_disable+0x30>)
    4c4a:	213c      	movs	r1, #60	; 0x3c
    4c4c:	fb01 3302 	mla	r3, r1, r2, r3
    4c50:	2201      	movs	r2, #1
    4c52:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    4c56:	4770      	bx	lr
    4c58:	00044286 	.word	0x00044286
    4c5c:	20000904 	.word	0x20000904

00004c60 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    4c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4c64:	4e32      	ldr	r6, [pc, #200]	; (4d30 <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4c66:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    4c6a:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4c6e:	233c      	movs	r3, #60	; 0x3c
    4c70:	fb03 6308 	mla	r3, r3, r8, r6
{
    4c74:	460c      	mov	r4, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4c76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    4c7a:	2b01      	cmp	r3, #1
{
    4c7c:	4617      	mov	r7, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4c7e:	d104      	bne.n	4c8a <nrfx_twi_xfer+0x2a>
    4c80:	780b      	ldrb	r3, [r1, #0]
    4c82:	2b01      	cmp	r3, #1
    4c84:	d106      	bne.n	4c94 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
    4c86:	482b      	ldr	r0, [pc, #172]	; (4d34 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4c88:	e011      	b.n	4cae <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    4c8a:	2b02      	cmp	r3, #2
    4c8c:	d102      	bne.n	4c94 <nrfx_twi_xfer+0x34>
    4c8e:	780b      	ldrb	r3, [r1, #0]
    4c90:	2b01      	cmp	r3, #1
    4c92:	d1f8      	bne.n	4c86 <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
    4c94:	253c      	movs	r5, #60	; 0x3c
    p_reg->INTENCLR = mask;
    4c96:	4b28      	ldr	r3, [pc, #160]	; (4d38 <nrfx_twi_xfer+0xd8>)
    4c98:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    4c9c:	fb05 6508 	mla	r5, r5, r8, r6
    4ca0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    4ca4:	b12b      	cbz	r3, 4cb2 <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4ca6:	68ab      	ldr	r3, [r5, #8]
        return err_code;
    4ca8:	4824      	ldr	r0, [pc, #144]	; (4d3c <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
    4caa:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    4cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    4cb2:	f087 0304 	eor.w	r3, r7, #4
    4cb6:	f3c3 0380 	ubfx	r3, r3, #2, #1
    4cba:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags       = flags;
    4cbe:	622f      	str	r7, [r5, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    4cc0:	46a6      	mov	lr, r4
    4cc2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    4cc6:	f105 0c0c 	add.w	ip, r5, #12
    4cca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4cce:	f8de 3000 	ldr.w	r3, [lr]
    4cd2:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
    4cd6:	6863      	ldr	r3, [r4, #4]
    4cd8:	62ab      	str	r3, [r5, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    4cda:	68e3      	ldr	r3, [r4, #12]
    4cdc:	626b      	str	r3, [r5, #36]	; 0x24
    p_reg->ADDRESS = address;
    4cde:	7863      	ldrb	r3, [r4, #1]
    4ce0:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    4ce4:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4ce6:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    4cea:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4cec:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    4cf0:	d019      	beq.n	4d26 <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    4cf2:	b9b3      	cbnz	r3, 4d22 <nrfx_twi_xfer+0xc2>
    4cf4:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    4cf8:	233c      	movs	r3, #60	; 0x3c
    4cfa:	fb03 6308 	mla	r3, r3, r8, r6
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    4cfe:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    4d00:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    4d04:	4648      	mov	r0, r9
    4d06:	f7ff fecd 	bl	4aa4 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    4d0a:	233c      	movs	r3, #60	; 0x3c
    4d0c:	fb03 f808 	mul.w	r8, r3, r8
    4d10:	eb06 0208 	add.w	r2, r6, r8
    4d14:	f856 3008 	ldr.w	r3, [r6, r8]
    4d18:	2b00      	cmp	r3, #0
    4d1a:	d1c8      	bne.n	4cae <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
    4d1c:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    4d20:	e7c5      	b.n	4cae <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    4d22:	2701      	movs	r7, #1
    4d24:	e7e8      	b.n	4cf8 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    4d26:	4651      	mov	r1, sl
    4d28:	4648      	mov	r0, r9
    4d2a:	f7ff fe47 	bl	49bc <twi_rx_start_transfer>
    4d2e:	e7ec      	b.n	4d0a <nrfx_twi_xfer+0xaa>
    4d30:	20000904 	.word	0x20000904
    4d34:	0bad0005 	.word	0x0bad0005
    4d38:	00044286 	.word	0x00044286
    4d3c:	0bad000b 	.word	0x0bad000b

00004d40 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    4d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    4d42:	4c29      	ldr	r4, [pc, #164]	; (4de8 <nrfx_twi_0_irq_handler+0xa8>)
    4d44:	4829      	ldr	r0, [pc, #164]	; (4dec <nrfx_twi_0_irq_handler+0xac>)
{
    4d46:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    4d48:	4621      	mov	r1, r4
    4d4a:	f002 f991 	bl	7070 <twi_transfer>
    4d4e:	46a4      	mov	ip, r4
    4d50:	b9d8      	cbnz	r0, 4d8a <nrfx_twi_0_irq_handler+0x4a>
    if (!p_cb->error &&
    4d52:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
    4d56:	6a27      	ldr	r7, [r4, #32]
    4d58:	b9e6      	cbnz	r6, 4d94 <nrfx_twi_0_irq_handler+0x54>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    4d5a:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
    4d5c:	1e9a      	subs	r2, r3, #2
    4d5e:	2a01      	cmp	r2, #1
    4d60:	d818      	bhi.n	4d94 <nrfx_twi_0_irq_handler+0x54>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    4d62:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4d64:	69a2      	ldr	r2, [r4, #24]
    4d66:	4291      	cmp	r1, r2
    4d68:	d114      	bne.n	4d94 <nrfx_twi_0_irq_handler+0x54>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    4d6a:	69e2      	ldr	r2, [r4, #28]
    4d6c:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4d6e:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    4d72:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    4d74:	481d      	ldr	r0, [pc, #116]	; (4dec <nrfx_twi_0_irq_handler+0xac>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    4d76:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    4d78:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4d7a:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    4d7e:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
    4d82:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    4d84:	d103      	bne.n	4d8e <nrfx_twi_0_irq_handler+0x4e>
            (void)twi_tx_start_transfer(p_twi, p_cb);
    4d86:	f7ff fe8d 	bl	4aa4 <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    4d8a:	b007      	add	sp, #28
    4d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    4d8e:	f7ff fe15 	bl	49bc <twi_rx_start_transfer>
    4d92:	e7fa      	b.n	4d8a <nrfx_twi_0_irq_handler+0x4a>
        event.xfer_desc = p_cb->xfer_desc;
    4d94:	4d16      	ldr	r5, [pc, #88]	; (4df0 <nrfx_twi_0_irq_handler+0xb0>)
    4d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4d98:	ac01      	add	r4, sp, #4
    4d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4d9c:	682b      	ldr	r3, [r5, #0]
    4d9e:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
    4da0:	b1f6      	cbz	r6, 4de0 <nrfx_twi_0_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
    4da2:	4a12      	ldr	r2, [pc, #72]	; (4dec <nrfx_twi_0_irq_handler+0xac>)
    4da4:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4da8:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    4dac:	0798      	lsls	r0, r3, #30
    4dae:	d50e      	bpl.n	4dce <nrfx_twi_0_irq_handler+0x8e>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    4db0:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
    4db2:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    4db6:	2300      	movs	r3, #0
    4db8:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4dbc:	077b      	lsls	r3, r7, #29
    4dbe:	d501      	bpl.n	4dc4 <nrfx_twi_0_irq_handler+0x84>
    4dc0:	2e00      	cmp	r6, #0
    4dc2:	d0e2      	beq.n	4d8a <nrfx_twi_0_irq_handler+0x4a>
            p_cb->handler(&event, p_cb->p_context);
    4dc4:	e9dc 3100 	ldrd	r3, r1, [ip]
    4dc8:	4668      	mov	r0, sp
    4dca:	4798      	blx	r3
}
    4dcc:	e7dd      	b.n	4d8a <nrfx_twi_0_irq_handler+0x4a>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    4dce:	0759      	lsls	r1, r3, #29
    4dd0:	d501      	bpl.n	4dd6 <nrfx_twi_0_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    4dd2:	2302      	movs	r3, #2
    4dd4:	e7ed      	b.n	4db2 <nrfx_twi_0_irq_handler+0x72>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    4dd6:	07da      	lsls	r2, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
    4dd8:	bf4c      	ite	mi
    4dda:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    4ddc:	2304      	movpl	r3, #4
    4dde:	e7e8      	b.n	4db2 <nrfx_twi_0_irq_handler+0x72>
            event.type = NRFX_TWI_EVT_DONE;
    4de0:	f88d 6000 	strb.w	r6, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
    4de4:	e7e7      	b.n	4db6 <nrfx_twi_0_irq_handler+0x76>
    4de6:	bf00      	nop
    4de8:	20000904 	.word	0x20000904
    4dec:	40003000 	.word	0x40003000
    4df0:	20000910 	.word	0x20000910

00004df4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    4df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4df6:	4b10      	ldr	r3, [pc, #64]	; (4e38 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    4df8:	4f10      	ldr	r7, [pc, #64]	; (4e3c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4dfa:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    4dfe:	3001      	adds	r0, #1
    4e00:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4e04:	42ae      	cmp	r6, r5
    4e06:	d800      	bhi.n	4e0a <z_sys_init_run_level+0x16>
		}
	}
}
    4e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    4e0a:	e9d5 3400 	ldrd	r3, r4, [r5]
    4e0e:	4620      	mov	r0, r4
    4e10:	4798      	blx	r3
    4e12:	b170      	cbz	r0, 4e32 <z_sys_init_run_level+0x3e>
    4e14:	b16c      	cbz	r4, 4e32 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
    4e16:	1be4      	subs	r4, r4, r7
    4e18:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    4e1a:	0961      	lsrs	r1, r4, #5
    4e1c:	4a08      	ldr	r2, [pc, #32]	; (4e40 <z_sys_init_run_level+0x4c>)
    4e1e:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    4e22:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    4e26:	2301      	movs	r3, #1
    4e28:	fa03 f404 	lsl.w	r4, r3, r4
    4e2c:	4304      	orrs	r4, r0
    4e2e:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4e32:	3508      	adds	r5, #8
    4e34:	e7e6      	b.n	4e04 <z_sys_init_run_level+0x10>
    4e36:	bf00      	nop
    4e38:	00007754 	.word	0x00007754
    4e3c:	20000060 	.word	0x20000060
    4e40:	20000100 	.word	0x20000100

00004e44 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    4e44:	4b08      	ldr	r3, [pc, #32]	; (4e68 <z_device_ready+0x24>)
    4e46:	1ac0      	subs	r0, r0, r3
    4e48:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    4e4a:	4b08      	ldr	r3, [pc, #32]	; (4e6c <z_device_ready+0x28>)
    4e4c:	0942      	lsrs	r2, r0, #5
    4e4e:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    4e52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    4e56:	2301      	movs	r3, #1
    4e58:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    4e5c:	4210      	tst	r0, r2
}
    4e5e:	bf0c      	ite	eq
    4e60:	4618      	moveq	r0, r3
    4e62:	2000      	movne	r0, #0
    4e64:	4770      	bx	lr
    4e66:	bf00      	nop
    4e68:	20000060 	.word	0x20000060
    4e6c:	20000100 	.word	0x20000100

00004e70 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    4e70:	4911      	ldr	r1, [pc, #68]	; (4eb8 <z_impl_device_get_binding+0x48>)
{
    4e72:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    4e74:	4c11      	ldr	r4, [pc, #68]	; (4ebc <z_impl_device_get_binding+0x4c>)
{
    4e76:	4605      	mov	r5, r0
    4e78:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    4e7a:	428c      	cmp	r4, r1
    4e7c:	d104      	bne.n	4e88 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    4e7e:	4c0f      	ldr	r4, [pc, #60]	; (4ebc <z_impl_device_get_binding+0x4c>)
    4e80:	42b4      	cmp	r4, r6
    4e82:	d10a      	bne.n	4e9a <z_impl_device_get_binding+0x2a>
	return NULL;
    4e84:	2400      	movs	r4, #0
    4e86:	e014      	b.n	4eb2 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    4e88:	4620      	mov	r0, r4
    4e8a:	f7ff ffdb 	bl	4e44 <z_device_ready>
    4e8e:	b110      	cbz	r0, 4e96 <z_impl_device_get_binding+0x26>
    4e90:	6823      	ldr	r3, [r4, #0]
    4e92:	42ab      	cmp	r3, r5
    4e94:	d00d      	beq.n	4eb2 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    4e96:	3410      	adds	r4, #16
    4e98:	e7ef      	b.n	4e7a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4e9a:	4620      	mov	r0, r4
    4e9c:	f7ff ffd2 	bl	4e44 <z_device_ready>
    4ea0:	b908      	cbnz	r0, 4ea6 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    4ea2:	3410      	adds	r4, #16
    4ea4:	e7ec      	b.n	4e80 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4ea6:	6821      	ldr	r1, [r4, #0]
    4ea8:	4628      	mov	r0, r5
    4eaa:	f001 faee 	bl	648a <strcmp>
    4eae:	2800      	cmp	r0, #0
    4eb0:	d1f7      	bne.n	4ea2 <z_impl_device_get_binding+0x32>
}
    4eb2:	4620      	mov	r0, r4
    4eb4:	bd70      	pop	{r4, r5, r6, pc}
    4eb6:	bf00      	nop
    4eb8:	20000100 	.word	0x20000100
    4ebc:	20000060 	.word	0x20000060

00004ec0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    4ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    4ec2:	4e16      	ldr	r6, [pc, #88]	; (4f1c <idle+0x5c>)
{
    4ec4:	4605      	mov	r5, r0
			cpu->pending_abort = NULL;
    4ec6:	2700      	movs	r7, #0
	__asm__ volatile(
    4ec8:	f04f 0220 	mov.w	r2, #32
    4ecc:	f3ef 8311 	mrs	r3, BASEPRI
    4ed0:	f382 8811 	msr	BASEPRI, r2
    4ed4:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    4ed8:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    4eda:	b188      	cbz	r0, 4f00 <idle+0x40>
			cpu->pending_abort = NULL;
    4edc:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    4ede:	f383 8811 	msr	BASEPRI, r3
    4ee2:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    4ee6:	f000 fa89 	bl	53fc <z_thread_single_abort>
	__asm__ volatile(
    4eea:	f04f 0320 	mov.w	r3, #32
    4eee:	f3ef 8011 	mrs	r0, BASEPRI
    4ef2:	f383 8811 	msr	BASEPRI, r3
    4ef6:	f3bf 8f6f 	isb	sy
    4efa:	f002 f96e 	bl	71da <z_reschedule_irqlock>
			continue;
    4efe:	e7e3      	b.n	4ec8 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    4f00:	f002 fa43 	bl	738a <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    4f04:	2101      	movs	r1, #1
    4f06:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
    4f08:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    4f0a:	bfd8      	it	le
    4f0c:	4608      	movle	r0, r1
    4f0e:	f002 fa4c 	bl	73aa <z_set_timeout_expiry>
		_kernel.idle = ticks;
    4f12:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    4f14:	f7fe f92a 	bl	316c <arch_cpu_idle>
}
    4f18:	e7d6      	b.n	4ec8 <idle+0x8>
    4f1a:	bf00      	nop
    4f1c:	20000940 	.word	0x20000940

00004f20 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    4f20:	4802      	ldr	r0, [pc, #8]	; (4f2c <z_bss_zero+0xc>)
    4f22:	4a03      	ldr	r2, [pc, #12]	; (4f30 <z_bss_zero+0x10>)
    4f24:	2100      	movs	r1, #0
    4f26:	1a12      	subs	r2, r2, r0
    4f28:	f001 bae6 	b.w	64f8 <memset>
    4f2c:	20000120 	.word	0x20000120
    4f30:	20000d98 	.word	0x20000d98

00004f34 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4f34:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    4f36:	4b0a      	ldr	r3, [pc, #40]	; (4f60 <bg_thread_main+0x2c>)
    4f38:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4f3a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4f3c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4f3e:	f7ff ff59 	bl	4df4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4f42:	f000 fd07 	bl	5954 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4f46:	2003      	movs	r0, #3
    4f48:	f7ff ff54 	bl	4df4 <z_sys_init_run_level>

	z_init_static_threads();
    4f4c:	f000 fc90 	bl	5870 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4f50:	f7fc fba2 	bl	1698 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4f54:	4a03      	ldr	r2, [pc, #12]	; (4f64 <bg_thread_main+0x30>)
    4f56:	7b13      	ldrb	r3, [r2, #12]
    4f58:	f023 0301 	bic.w	r3, r3, #1
    4f5c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4f5e:	bd08      	pop	{r3, pc}
    4f60:	20000d97 	.word	0x20000d97
    4f64:	200006c0 	.word	0x200006c0

00004f68 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    4f68:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4f6c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 5064 <z_cstart+0xfc>
    4f70:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4f72:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4f76:	4d33      	ldr	r5, [pc, #204]	; (5044 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
    4f78:	4e33      	ldr	r6, [pc, #204]	; (5048 <z_cstart+0xe0>)
    4f7a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4f7c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 5068 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
    4f80:	4f32      	ldr	r7, [pc, #200]	; (504c <z_cstart+0xe4>)
    4f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f86:	2400      	movs	r4, #0
    4f88:	616b      	str	r3, [r5, #20]
    4f8a:	23e0      	movs	r3, #224	; 0xe0
    4f8c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4f90:	77ec      	strb	r4, [r5, #31]
    4f92:	762c      	strb	r4, [r5, #24]
    4f94:	766c      	strb	r4, [r5, #25]
    4f96:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4f98:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4f9a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4f9e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4fa0:	f7fe fa40 	bl	3424 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4fa4:	f7fe f8dc 	bl	3160 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4fac:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4fae:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    4fb0:	4d27      	ldr	r5, [pc, #156]	; (5050 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    4fb2:	f240 1301 	movw	r3, #257	; 0x101
    4fb6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4fba:	ab06      	add	r3, sp, #24
    4fbc:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4fbe:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    4fc0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    4fc4:	f7ff ff16 	bl	4df4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4fc8:	2001      	movs	r0, #1
    4fca:	f7ff ff13 	bl	4df4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4fce:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    4fd2:	f000 fb23 	bl	561c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4fd6:	4b1f      	ldr	r3, [pc, #124]	; (5054 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    4fd8:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4fda:	491f      	ldr	r1, [pc, #124]	; (5058 <z_cstart+0xf0>)
    4fdc:	9305      	str	r3, [sp, #20]
    4fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4fe2:	4653      	mov	r3, sl
    4fe4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    4fe8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4fec:	9400      	str	r4, [sp, #0]
    4fee:	4630      	mov	r0, r6
    4ff0:	f000 fbe0 	bl	57b4 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4ff4:	7b73      	ldrb	r3, [r6, #13]
    4ff6:	4680      	mov	r8, r0
    4ff8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    4ffc:	4630      	mov	r0, r6
    4ffe:	7373      	strb	r3, [r6, #13]
    5000:	f002 f917 	bl	7232 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    5004:	230f      	movs	r3, #15
    5006:	e9cd 4302 	strd	r4, r3, [sp, #8]
    500a:	4914      	ldr	r1, [pc, #80]	; (505c <z_cstart+0xf4>)
    500c:	4b14      	ldr	r3, [pc, #80]	; (5060 <z_cstart+0xf8>)
    500e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5012:	e9cd b404 	strd	fp, r4, [sp, #16]
    5016:	e9cd 5400 	strd	r5, r4, [sp]
    501a:	4638      	mov	r0, r7
    501c:	f000 fbca 	bl	57b4 <z_setup_new_thread>
    5020:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5022:	60ef      	str	r7, [r5, #12]
    5024:	f023 0304 	bic.w	r3, r3, #4
    5028:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    502a:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
    502e:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
    5032:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    5034:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5038:	4652      	mov	r2, sl
    503a:	4641      	mov	r1, r8
    503c:	4630      	mov	r0, r6
    503e:	f7fe f875 	bl	312c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5042:	bf00      	nop
    5044:	e000ed00 	.word	0xe000ed00
    5048:	200006c0 	.word	0x200006c0
    504c:	20000640 	.word	0x20000640
    5050:	20000940 	.word	0x20000940
    5054:	00007bcf 	.word	0x00007bcf
    5058:	20000da0 	.word	0x20000da0
    505c:	200011c0 	.word	0x200011c0
    5060:	00004ec1 	.word	0x00004ec1
    5064:	20001b40 	.word	0x20001b40
    5068:	00004f35 	.word	0x00004f35

0000506c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    506c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    506e:	4c08      	ldr	r4, [pc, #32]	; (5090 <z_reset_time_slice+0x24>)
    5070:	6823      	ldr	r3, [r4, #0]
    5072:	b15b      	cbz	r3, 508c <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    5074:	f7fd ff50 	bl	2f18 <z_clock_elapsed>
    5078:	4603      	mov	r3, r0
    507a:	6820      	ldr	r0, [r4, #0]
    507c:	4a05      	ldr	r2, [pc, #20]	; (5094 <z_reset_time_slice+0x28>)
    507e:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    5080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    5084:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    5086:	2100      	movs	r1, #0
    5088:	f002 b98f 	b.w	73aa <z_set_timeout_expiry>
}
    508c:	bd10      	pop	{r4, pc}
    508e:	bf00      	nop
    5090:	2000097c 	.word	0x2000097c
    5094:	20000940 	.word	0x20000940

00005098 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    509a:	4605      	mov	r5, r0
    509c:	460c      	mov	r4, r1
    509e:	f04f 0320 	mov.w	r3, #32
    50a2:	f3ef 8611 	mrs	r6, BASEPRI
    50a6:	f383 8811 	msr	BASEPRI, r3
    50aa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    50ae:	4b0d      	ldr	r3, [pc, #52]	; (50e4 <k_sched_time_slice_set+0x4c>)
    50b0:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    50b2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    50b6:	f240 30e7 	movw	r0, #999	; 0x3e7
    50ba:	2100      	movs	r1, #0
    50bc:	615a      	str	r2, [r3, #20]
    50be:	fbe7 0105 	umlal	r0, r1, r7, r5
    50c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    50c6:	2300      	movs	r3, #0
    50c8:	f7fb ff74 	bl	fb4 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    50cc:	4b06      	ldr	r3, [pc, #24]	; (50e8 <k_sched_time_slice_set+0x50>)
    50ce:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    50d0:	4b06      	ldr	r3, [pc, #24]	; (50ec <k_sched_time_slice_set+0x54>)
    50d2:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    50d4:	f7ff ffca 	bl	506c <z_reset_time_slice>
	__asm__ volatile(
    50d8:	f386 8811 	msr	BASEPRI, r6
    50dc:	f3bf 8f6f 	isb	sy
	}
}
    50e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50e2:	bf00      	nop
    50e4:	20000940 	.word	0x20000940
    50e8:	2000097c 	.word	0x2000097c
    50ec:	20000978 	.word	0x20000978

000050f0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    50f0:	b949      	cbnz	r1, 5106 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    50f2:	f3ef 8005 	mrs	r0, IPSR
    50f6:	b930      	cbnz	r0, 5106 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    50f8:	4b05      	ldr	r3, [pc, #20]	; (5110 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    50fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    50fc:	689b      	ldr	r3, [r3, #8]
    50fe:	429a      	cmp	r2, r3
    5100:	d001      	beq.n	5106 <z_reschedule+0x16>
	ret = arch_swap(key);
    5102:	f7fd bf53 	b.w	2fac <arch_swap>
    5106:	f381 8811 	msr	BASEPRI, r1
    510a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    510e:	4770      	bx	lr
    5110:	20000940 	.word	0x20000940

00005114 <k_sched_lock>:
	__asm__ volatile(
    5114:	f04f 0320 	mov.w	r3, #32
    5118:	f3ef 8111 	mrs	r1, BASEPRI
    511c:	f383 8811 	msr	BASEPRI, r3
    5120:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    5124:	4b04      	ldr	r3, [pc, #16]	; (5138 <k_sched_lock+0x24>)
    5126:	689a      	ldr	r2, [r3, #8]
    5128:	7bd3      	ldrb	r3, [r2, #15]
    512a:	3b01      	subs	r3, #1
    512c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    512e:	f381 8811 	msr	BASEPRI, r1
    5132:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    5136:	4770      	bx	lr
    5138:	20000940 	.word	0x20000940

0000513c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    513c:	4b09      	ldr	r3, [pc, #36]	; (5164 <z_priq_dumb_remove+0x28>)
    513e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    5142:	4282      	cmp	r2, r0
    5144:	d105      	bne.n	5152 <z_priq_dumb_remove+0x16>
    5146:	689b      	ldr	r3, [r3, #8]
    5148:	428b      	cmp	r3, r1
    514a:	d102      	bne.n	5152 <z_priq_dumb_remove+0x16>
    514c:	7b4b      	ldrb	r3, [r1, #13]
    514e:	06db      	lsls	r3, r3, #27
    5150:	d106      	bne.n	5160 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    5152:	e9d1 3200 	ldrd	r3, r2, [r1]
    5156:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    5158:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    515a:	2300      	movs	r3, #0
	node->prev = NULL;
    515c:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    5160:	4770      	bx	lr
    5162:	bf00      	nop
    5164:	20000940 	.word	0x20000940

00005168 <update_cache>:
{
    5168:	b538      	push	{r3, r4, r5, lr}
    516a:	4c12      	ldr	r4, [pc, #72]	; (51b4 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
    516c:	6923      	ldr	r3, [r4, #16]
    516e:	68a2      	ldr	r2, [r4, #8]
{
    5170:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    5172:	b10b      	cbz	r3, 5178 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    5174:	68e5      	ldr	r5, [r4, #12]
    5176:	e00c      	b.n	5192 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    5178:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    517c:	f002 f84f 	bl	721e <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    5180:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
    5182:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    5184:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    5186:	bf44      	itt	mi
    5188:	f043 0308 	orrmi.w	r3, r3, #8
    518c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    518e:	2d00      	cmp	r5, #0
    5190:	d0f0      	beq.n	5174 <update_cache+0xc>
	if (preempt_ok != 0) {
    5192:	b949      	cbnz	r1, 51a8 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    5194:	7b53      	ldrb	r3, [r2, #13]
    5196:	06db      	lsls	r3, r3, #27
    5198:	d106      	bne.n	51a8 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    519a:	69ab      	ldr	r3, [r5, #24]
    519c:	b923      	cbnz	r3, 51a8 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    519e:	89d3      	ldrh	r3, [r2, #14]
    51a0:	2b7f      	cmp	r3, #127	; 0x7f
    51a2:	d901      	bls.n	51a8 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    51a4:	62a2      	str	r2, [r4, #40]	; 0x28
}
    51a6:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    51a8:	4295      	cmp	r5, r2
    51aa:	d001      	beq.n	51b0 <update_cache+0x48>
			z_reset_time_slice();
    51ac:	f7ff ff5e 	bl	506c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    51b0:	62a5      	str	r5, [r4, #40]	; 0x28
}
    51b2:	e7f8      	b.n	51a6 <update_cache+0x3e>
    51b4:	20000940 	.word	0x20000940

000051b8 <k_sched_unlock>:
{
    51b8:	b510      	push	{r4, lr}
	__asm__ volatile(
    51ba:	f04f 0320 	mov.w	r3, #32
    51be:	f3ef 8411 	mrs	r4, BASEPRI
    51c2:	f383 8811 	msr	BASEPRI, r3
    51c6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    51ca:	4b08      	ldr	r3, [pc, #32]	; (51ec <k_sched_unlock+0x34>)
    51cc:	689a      	ldr	r2, [r3, #8]
    51ce:	7bd3      	ldrb	r3, [r2, #15]
    51d0:	3301      	adds	r3, #1
    51d2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    51d4:	2000      	movs	r0, #0
    51d6:	f7ff ffc7 	bl	5168 <update_cache>
	__asm__ volatile(
    51da:	f384 8811 	msr	BASEPRI, r4
    51de:	f3bf 8f6f 	isb	sy
}
    51e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    51e6:	f002 b804 	b.w	71f2 <z_reschedule_unlocked>
    51ea:	bf00      	nop
    51ec:	20000940 	.word	0x20000940

000051f0 <ready_thread>:
{
    51f0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    51f2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    51f6:	7b43      	ldrb	r3, [r0, #13]
    51f8:	2a00      	cmp	r2, #0
    51fa:	db2c      	blt.n	5256 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    51fc:	06db      	lsls	r3, r3, #27
    51fe:	d12a      	bne.n	5256 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    5200:	6983      	ldr	r3, [r0, #24]
    5202:	bb43      	cbnz	r3, 5256 <ready_thread+0x66>
	return list->head == list;
    5204:	4a15      	ldr	r2, [pc, #84]	; (525c <ready_thread+0x6c>)
    5206:	4611      	mov	r1, r2
    5208:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    520c:	428c      	cmp	r4, r1
    520e:	bf18      	it	ne
    5210:	4623      	movne	r3, r4
    5212:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5214:	6b14      	ldr	r4, [r2, #48]	; 0x30
    5216:	bf38      	it	cc
    5218:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    521a:	b1b3      	cbz	r3, 524a <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    521c:	f990 600e 	ldrsb.w	r6, [r0, #14]
    5220:	f993 500e 	ldrsb.w	r5, [r3, #14]
    5224:	42ae      	cmp	r6, r5
    5226:	db03      	blt.n	5230 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    5228:	42a3      	cmp	r3, r4
    522a:	d00e      	beq.n	524a <ready_thread+0x5a>
    522c:	681b      	ldr	r3, [r3, #0]
    522e:	e7f4      	b.n	521a <ready_thread+0x2a>
	node->prev = successor->prev;
    5230:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5232:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    5236:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5238:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    523a:	7b43      	ldrb	r3, [r0, #13]
    523c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5240:	7343      	strb	r3, [r0, #13]
}
    5242:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5244:	2000      	movs	r0, #0
    5246:	f7ff bf8f 	b.w	5168 <update_cache>
	node->prev = list->tail;
    524a:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    524e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5250:	6018      	str	r0, [r3, #0]
	list->tail = node;
    5252:	6310      	str	r0, [r2, #48]	; 0x30
}
    5254:	e7f1      	b.n	523a <ready_thread+0x4a>
}
    5256:	bc70      	pop	{r4, r5, r6}
    5258:	4770      	bx	lr
    525a:	bf00      	nop
    525c:	20000940 	.word	0x20000940

00005260 <z_sched_start>:
{
    5260:	b510      	push	{r4, lr}
	__asm__ volatile(
    5262:	f04f 0220 	mov.w	r2, #32
    5266:	f3ef 8411 	mrs	r4, BASEPRI
    526a:	f382 8811 	msr	BASEPRI, r2
    526e:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    5272:	7b42      	ldrb	r2, [r0, #13]
    5274:	0751      	lsls	r1, r2, #29
    5276:	d404      	bmi.n	5282 <z_sched_start+0x22>
	__asm__ volatile(
    5278:	f384 8811 	msr	BASEPRI, r4
    527c:	f3bf 8f6f 	isb	sy
}
    5280:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5282:	f022 0204 	bic.w	r2, r2, #4
    5286:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5288:	f7ff ffb2 	bl	51f0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    528c:	4621      	mov	r1, r4
    528e:	4802      	ldr	r0, [pc, #8]	; (5298 <z_sched_start+0x38>)
}
    5290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5294:	f7ff bf2c 	b.w	50f0 <z_reschedule>
    5298:	20000d98 	.word	0x20000d98

0000529c <move_thread_to_end_of_prio_q>:
{
    529c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    529e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    52a2:	2b00      	cmp	r3, #0
{
    52a4:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    52a6:	da02      	bge.n	52ae <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    52a8:	4817      	ldr	r0, [pc, #92]	; (5308 <move_thread_to_end_of_prio_q+0x6c>)
    52aa:	f7ff ff47 	bl	513c <z_priq_dumb_remove>
	return list->head == list;
    52ae:	4a17      	ldr	r2, [pc, #92]	; (530c <move_thread_to_end_of_prio_q+0x70>)
    52b0:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    52b2:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
    52b4:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    52b8:	4283      	cmp	r3, r0
    52ba:	bf08      	it	eq
    52bc:	2300      	moveq	r3, #0
    52be:	2b00      	cmp	r3, #0
    52c0:	bf38      	it	cc
    52c2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    52c4:	b1d3      	cbz	r3, 52fc <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    52c6:	f991 600e 	ldrsb.w	r6, [r1, #14]
    52ca:	f993 500e 	ldrsb.w	r5, [r3, #14]
    52ce:	42ae      	cmp	r6, r5
    52d0:	db03      	blt.n	52da <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    52d2:	42a3      	cmp	r3, r4
    52d4:	d012      	beq.n	52fc <move_thread_to_end_of_prio_q+0x60>
    52d6:	681b      	ldr	r3, [r3, #0]
    52d8:	e7f4      	b.n	52c4 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    52da:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    52dc:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    52e0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    52e2:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    52e4:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    52e6:	6890      	ldr	r0, [r2, #8]
    52e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    52ec:	734b      	strb	r3, [r1, #13]
    52ee:	1a43      	subs	r3, r0, r1
    52f0:	4258      	negs	r0, r3
}
    52f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    52f6:	4158      	adcs	r0, r3
    52f8:	f7ff bf36 	b.w	5168 <update_cache>
	node->prev = list->tail;
    52fc:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    5300:	6b13      	ldr	r3, [r2, #48]	; 0x30
    5302:	6019      	str	r1, [r3, #0]
	list->tail = node;
    5304:	6311      	str	r1, [r2, #48]	; 0x30
}
    5306:	e7ed      	b.n	52e4 <move_thread_to_end_of_prio_q+0x48>
    5308:	2000096c 	.word	0x2000096c
    530c:	20000940 	.word	0x20000940

00005310 <z_time_slice>:
{
    5310:	b570      	push	{r4, r5, r6, lr}
    5312:	4601      	mov	r1, r0
	__asm__ volatile(
    5314:	f04f 0320 	mov.w	r3, #32
    5318:	f3ef 8411 	mrs	r4, BASEPRI
    531c:	f383 8811 	msr	BASEPRI, r3
    5320:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5324:	4b16      	ldr	r3, [pc, #88]	; (5380 <z_time_slice+0x70>)
    5326:	4a17      	ldr	r2, [pc, #92]	; (5384 <z_time_slice+0x74>)
    5328:	6898      	ldr	r0, [r3, #8]
    532a:	6815      	ldr	r5, [r2, #0]
    532c:	42a8      	cmp	r0, r5
    532e:	461d      	mov	r5, r3
    5330:	d106      	bne.n	5340 <z_time_slice+0x30>
			z_reset_time_slice();
    5332:	f7ff fe9b 	bl	506c <z_reset_time_slice>
	__asm__ volatile(
    5336:	f384 8811 	msr	BASEPRI, r4
    533a:	f3bf 8f6f 	isb	sy
}
    533e:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    5340:	2600      	movs	r6, #0
    5342:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    5344:	4a10      	ldr	r2, [pc, #64]	; (5388 <z_time_slice+0x78>)
    5346:	6812      	ldr	r2, [r2, #0]
    5348:	b1ba      	cbz	r2, 537a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    534a:	89c2      	ldrh	r2, [r0, #14]
    534c:	2a7f      	cmp	r2, #127	; 0x7f
    534e:	d814      	bhi.n	537a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    5350:	7b42      	ldrb	r2, [r0, #13]
    5352:	06d2      	lsls	r2, r2, #27
    5354:	d111      	bne.n	537a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5356:	4a0d      	ldr	r2, [pc, #52]	; (538c <z_time_slice+0x7c>)
    5358:	f990 600e 	ldrsb.w	r6, [r0, #14]
    535c:	6812      	ldr	r2, [r2, #0]
    535e:	4296      	cmp	r6, r2
    5360:	db0b      	blt.n	537a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5362:	4a0b      	ldr	r2, [pc, #44]	; (5390 <z_time_slice+0x80>)
    5364:	4290      	cmp	r0, r2
    5366:	d008      	beq.n	537a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5368:	695a      	ldr	r2, [r3, #20]
    536a:	428a      	cmp	r2, r1
    536c:	dc02      	bgt.n	5374 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    536e:	f7ff ff95 	bl	529c <move_thread_to_end_of_prio_q>
    5372:	e7de      	b.n	5332 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    5374:	1a52      	subs	r2, r2, r1
    5376:	615a      	str	r2, [r3, #20]
    5378:	e7dd      	b.n	5336 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    537a:	2300      	movs	r3, #0
    537c:	616b      	str	r3, [r5, #20]
    537e:	e7da      	b.n	5336 <z_time_slice+0x26>
    5380:	20000940 	.word	0x20000940
    5384:	20000974 	.word	0x20000974
    5388:	2000097c 	.word	0x2000097c
    538c:	20000978 	.word	0x20000978
    5390:	20000640 	.word	0x20000640

00005394 <z_impl_k_thread_suspend>:
{
    5394:	b570      	push	{r4, r5, r6, lr}
    5396:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5398:	3018      	adds	r0, #24
    539a:	f001 ffe0 	bl	735e <z_abort_timeout>
	__asm__ volatile(
    539e:	f04f 0320 	mov.w	r3, #32
    53a2:	f3ef 8611 	mrs	r6, BASEPRI
    53a6:	f383 8811 	msr	BASEPRI, r3
    53aa:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    53ae:	f994 300d 	ldrsb.w	r3, [r4, #13]
    53b2:	2b00      	cmp	r3, #0
    53b4:	da07      	bge.n	53c6 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    53b6:	480f      	ldr	r0, [pc, #60]	; (53f4 <z_impl_k_thread_suspend+0x60>)
    53b8:	4621      	mov	r1, r4
    53ba:	f7ff febf 	bl	513c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    53be:	7b63      	ldrb	r3, [r4, #13]
    53c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    53c4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    53c6:	4d0c      	ldr	r5, [pc, #48]	; (53f8 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    53c8:	7b63      	ldrb	r3, [r4, #13]
    53ca:	68a8      	ldr	r0, [r5, #8]
    53cc:	f043 0310 	orr.w	r3, r3, #16
    53d0:	7363      	strb	r3, [r4, #13]
    53d2:	1b03      	subs	r3, r0, r4
    53d4:	4258      	negs	r0, r3
    53d6:	4158      	adcs	r0, r3
    53d8:	f7ff fec6 	bl	5168 <update_cache>
	__asm__ volatile(
    53dc:	f386 8811 	msr	BASEPRI, r6
    53e0:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    53e4:	68ab      	ldr	r3, [r5, #8]
    53e6:	42a3      	cmp	r3, r4
    53e8:	d103      	bne.n	53f2 <z_impl_k_thread_suspend+0x5e>
}
    53ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    53ee:	f001 bf00 	b.w	71f2 <z_reschedule_unlocked>
}
    53f2:	bd70      	pop	{r4, r5, r6, pc}
    53f4:	2000096c 	.word	0x2000096c
    53f8:	20000940 	.word	0x20000940

000053fc <z_thread_single_abort>:
{
    53fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5400:	4604      	mov	r4, r0
	__asm__ volatile(
    5402:	f04f 0320 	mov.w	r3, #32
    5406:	f3ef 8211 	mrs	r2, BASEPRI
    540a:	f383 8811 	msr	BASEPRI, r3
    540e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    5412:	7b43      	ldrb	r3, [r0, #13]
    5414:	f013 0f28 	tst.w	r3, #40	; 0x28
    5418:	d005      	beq.n	5426 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    541a:	f382 8811 	msr	BASEPRI, r2
    541e:	f3bf 8f6f 	isb	sy
}
    5422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    5426:	f043 0320 	orr.w	r3, r3, #32
    542a:	7343      	strb	r3, [r0, #13]
    542c:	f382 8811 	msr	BASEPRI, r2
    5430:	f3bf 8f6f 	isb	sy
    5434:	3018      	adds	r0, #24
    5436:	f001 ff92 	bl	735e <z_abort_timeout>
	__asm__ volatile(
    543a:	f04f 0320 	mov.w	r3, #32
    543e:	f3ef 8611 	mrs	r6, BASEPRI
    5442:	f383 8811 	msr	BASEPRI, r3
    5446:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    544a:	7b63      	ldrb	r3, [r4, #13]
    544c:	06d8      	lsls	r0, r3, #27
    544e:	d116      	bne.n	547e <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    5450:	69a2      	ldr	r2, [r4, #24]
    5452:	b9a2      	cbnz	r2, 547e <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    5454:	0619      	lsls	r1, r3, #24
    5456:	d507      	bpl.n	5468 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    5458:	4826      	ldr	r0, [pc, #152]	; (54f4 <z_thread_single_abort+0xf8>)
    545a:	4621      	mov	r1, r4
    545c:	f7ff fe6e 	bl	513c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    5460:	7b63      	ldrb	r3, [r4, #13]
    5462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5466:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    5468:	4b23      	ldr	r3, [pc, #140]	; (54f8 <z_thread_single_abort+0xfc>)
    546a:	6898      	ldr	r0, [r3, #8]
    546c:	1b02      	subs	r2, r0, r4
    546e:	4250      	negs	r0, r2
    5470:	4150      	adcs	r0, r2
    5472:	f7ff fe79 	bl	5168 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5476:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    547a:	2700      	movs	r7, #0
    547c:	e01d      	b.n	54ba <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    547e:	079b      	lsls	r3, r3, #30
    5480:	d5f9      	bpl.n	5476 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    5482:	68a0      	ldr	r0, [r4, #8]
    5484:	4621      	mov	r1, r4
    5486:	f7ff fe59 	bl	513c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    548a:	7b63      	ldrb	r3, [r4, #13]
    548c:	f023 0302 	bic.w	r3, r3, #2
    5490:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    5492:	2300      	movs	r3, #0
    5494:	60a3      	str	r3, [r4, #8]
    5496:	e7ee      	b.n	5476 <z_thread_single_abort+0x7a>
    5498:	f105 0018 	add.w	r0, r5, #24
    549c:	f001 ff5f 	bl	735e <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    54a0:	68a8      	ldr	r0, [r5, #8]
    54a2:	4629      	mov	r1, r5
    54a4:	f7ff fe4a 	bl	513c <z_priq_dumb_remove>
    54a8:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    54aa:	60af      	str	r7, [r5, #8]
    54ac:	f023 0302 	bic.w	r3, r3, #2
    54b0:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    54b2:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    54b4:	4628      	mov	r0, r5
    54b6:	f7ff fe9b 	bl	51f0 <ready_thread>
	return list->head == list;
    54ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    54bc:	4545      	cmp	r5, r8
    54be:	d001      	beq.n	54c4 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    54c0:	2d00      	cmp	r5, #0
    54c2:	d1e9      	bne.n	5498 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    54c4:	4b0c      	ldr	r3, [pc, #48]	; (54f8 <z_thread_single_abort+0xfc>)
    54c6:	689a      	ldr	r2, [r3, #8]
    54c8:	4b0c      	ldr	r3, [pc, #48]	; (54fc <z_thread_single_abort+0x100>)
    54ca:	429a      	cmp	r2, r3
    54cc:	d102      	bne.n	54d4 <z_thread_single_abort+0xd8>
			update_cache(1);
    54ce:	2001      	movs	r0, #1
    54d0:	f7ff fe4a 	bl	5168 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    54d4:	7b63      	ldrb	r3, [r4, #13]
    54d6:	f043 0308 	orr.w	r3, r3, #8
    54da:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    54dc:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    54de:	f386 8811 	msr	BASEPRI, r6
    54e2:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    54e6:	2b00      	cmp	r3, #0
    54e8:	d09b      	beq.n	5422 <z_thread_single_abort+0x26>
		fn_abort(thread);
    54ea:	4620      	mov	r0, r4
}
    54ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    54f0:	4718      	bx	r3
    54f2:	bf00      	nop
    54f4:	2000096c 	.word	0x2000096c
    54f8:	20000940 	.word	0x20000940
    54fc:	20000640 	.word	0x20000640

00005500 <unready_thread>:
{
    5500:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5502:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5506:	2b00      	cmp	r3, #0
{
    5508:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    550a:	da06      	bge.n	551a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    550c:	4807      	ldr	r0, [pc, #28]	; (552c <unready_thread+0x2c>)
    550e:	f7ff fe15 	bl	513c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    5512:	7b4b      	ldrb	r3, [r1, #13]
    5514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5518:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    551a:	4b05      	ldr	r3, [pc, #20]	; (5530 <unready_thread+0x30>)
    551c:	6898      	ldr	r0, [r3, #8]
    551e:	1a43      	subs	r3, r0, r1
    5520:	4258      	negs	r0, r3
    5522:	4158      	adcs	r0, r3
}
    5524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5528:	f7ff be1e 	b.w	5168 <update_cache>
    552c:	2000096c 	.word	0x2000096c
    5530:	20000940 	.word	0x20000940

00005534 <pend>:
{
    5534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5538:	4606      	mov	r6, r0
    553a:	4614      	mov	r4, r2
    553c:	461d      	mov	r5, r3
	__asm__ volatile(
    553e:	f04f 0320 	mov.w	r3, #32
    5542:	f3ef 8711 	mrs	r7, BASEPRI
    5546:	f383 8811 	msr	BASEPRI, r3
    554a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    554e:	f001 fea0 	bl	7292 <add_to_waitq_locked>
	__asm__ volatile(
    5552:	f387 8811 	msr	BASEPRI, r7
    5556:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    555a:	1c6b      	adds	r3, r5, #1
    555c:	bf08      	it	eq
    555e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    5562:	d008      	beq.n	5576 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    5564:	4622      	mov	r2, r4
    5566:	462b      	mov	r3, r5
    5568:	f106 0018 	add.w	r0, r6, #24
    556c:	4903      	ldr	r1, [pc, #12]	; (557c <pend+0x48>)
}
    556e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5572:	f000 ba65 	b.w	5a40 <z_add_timeout>
    5576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    557a:	bf00      	nop
    557c:	00007253 	.word	0x00007253

00005580 <z_pend_curr>:
{
    5580:	b510      	push	{r4, lr}
	pending_current = _current;
    5582:	4b07      	ldr	r3, [pc, #28]	; (55a0 <z_pend_curr+0x20>)
    5584:	6898      	ldr	r0, [r3, #8]
    5586:	4b07      	ldr	r3, [pc, #28]	; (55a4 <z_pend_curr+0x24>)
{
    5588:	460c      	mov	r4, r1
	pending_current = _current;
    558a:	6018      	str	r0, [r3, #0]
{
    558c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    558e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5592:	f7ff ffcf 	bl	5534 <pend>
    5596:	4620      	mov	r0, r4
}
    5598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    559c:	f7fd bd06 	b.w	2fac <arch_swap>
    55a0:	20000940 	.word	0x20000940
    55a4:	20000974 	.word	0x20000974

000055a8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    55a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55ac:	4605      	mov	r5, r0
    55ae:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
    55b0:	f001 ff15 	bl	73de <z_tick_get_32>
    55b4:	4604      	mov	r4, r0
	__asm__ volatile(
    55b6:	f04f 0320 	mov.w	r3, #32
    55ba:	f3ef 8811 	mrs	r8, BASEPRI
    55be:	f383 8811 	msr	BASEPRI, r3
    55c2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    55c6:	4e12      	ldr	r6, [pc, #72]	; (5610 <z_tick_sleep.part.0+0x68>)
    55c8:	4b12      	ldr	r3, [pc, #72]	; (5614 <z_tick_sleep.part.0+0x6c>)
    55ca:	68b0      	ldr	r0, [r6, #8]
    55cc:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    55ce:	f7ff ff97 	bl	5500 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    55d2:	68b0      	ldr	r0, [r6, #8]
    55d4:	4910      	ldr	r1, [pc, #64]	; (5618 <z_tick_sleep.part.0+0x70>)
    55d6:	462a      	mov	r2, r5
    55d8:	463b      	mov	r3, r7
    55da:	3018      	adds	r0, #24
    55dc:	f000 fa30 	bl	5a40 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    55e0:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    55e2:	7b53      	ldrb	r3, [r2, #13]
    55e4:	f043 0310 	orr.w	r3, r3, #16
    55e8:	7353      	strb	r3, [r2, #13]
    55ea:	4640      	mov	r0, r8
    55ec:	f7fd fcde 	bl	2fac <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    55f0:	f001 fef5 	bl	73de <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
    55f4:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    55f6:	1a24      	subs	r4, r4, r0
    55f8:	f04f 0500 	mov.w	r5, #0
    55fc:	f165 0500 	sbc.w	r5, r5, #0
    5600:	2c00      	cmp	r4, #0
    5602:	f175 0300 	sbcs.w	r3, r5, #0
    5606:	bfb8      	it	lt
    5608:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    560a:	4620      	mov	r0, r4
    560c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5610:	20000940 	.word	0x20000940
    5614:	20000974 	.word	0x20000974
    5618:	00007253 	.word	0x00007253

0000561c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    561c:	4b04      	ldr	r3, [pc, #16]	; (5630 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    561e:	2100      	movs	r1, #0
    5620:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    5624:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    5628:	4608      	mov	r0, r1
    562a:	f7ff bd35 	b.w	5098 <k_sched_time_slice_set>
    562e:	bf00      	nop
    5630:	20000940 	.word	0x20000940

00005634 <z_impl_k_yield>:
{
    5634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    5636:	4c24      	ldr	r4, [pc, #144]	; (56c8 <z_impl_k_yield+0x94>)
    5638:	4b24      	ldr	r3, [pc, #144]	; (56cc <z_impl_k_yield+0x98>)
    563a:	68a2      	ldr	r2, [r4, #8]
    563c:	429a      	cmp	r2, r3
    563e:	d030      	beq.n	56a2 <z_impl_k_yield+0x6e>
    5640:	f04f 0320 	mov.w	r3, #32
    5644:	f3ef 8511 	mrs	r5, BASEPRI
    5648:	f383 8811 	msr	BASEPRI, r3
    564c:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    5650:	68a1      	ldr	r1, [r4, #8]
    5652:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5656:	f7ff fd71 	bl	513c <z_priq_dumb_remove>
	return list->head == list;
    565a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    565c:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    565e:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5660:	4283      	cmp	r3, r0
    5662:	bf08      	it	eq
    5664:	2300      	moveq	r3, #0
    5666:	2b00      	cmp	r3, #0
    5668:	bf38      	it	cc
    566a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    566c:	b32b      	cbz	r3, 56ba <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    566e:	f992 700e 	ldrsb.w	r7, [r2, #14]
    5672:	f993 600e 	ldrsb.w	r6, [r3, #14]
    5676:	42b7      	cmp	r7, r6
    5678:	db03      	blt.n	5682 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    567a:	428b      	cmp	r3, r1
    567c:	d01d      	beq.n	56ba <z_impl_k_yield+0x86>
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	e7f4      	b.n	566c <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    5682:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5684:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    5688:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    568a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    568c:	7b53      	ldrb	r3, [r2, #13]
    568e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5692:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    5694:	2001      	movs	r0, #1
    5696:	f7ff fd67 	bl	5168 <update_cache>
	__asm__ volatile(
    569a:	f385 8811 	msr	BASEPRI, r5
    569e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    56a2:	f04f 0320 	mov.w	r3, #32
    56a6:	f3ef 8011 	mrs	r0, BASEPRI
    56aa:	f383 8811 	msr	BASEPRI, r3
    56ae:	f3bf 8f6f 	isb	sy
}
    56b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56b6:	f7fd bc79 	b.w	2fac <arch_swap>
	node->prev = list->tail;
    56ba:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    56be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    56c0:	601a      	str	r2, [r3, #0]
	list->tail = node;
    56c2:	6322      	str	r2, [r4, #48]	; 0x30
}
    56c4:	e7e2      	b.n	568c <z_impl_k_yield+0x58>
    56c6:	bf00      	nop
    56c8:	20000940 	.word	0x20000940
    56cc:	20000640 	.word	0x20000640

000056d0 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    56d0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    56d4:	bf08      	it	eq
    56d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    56da:	b508      	push	{r3, lr}
    56dc:	4602      	mov	r2, r0
    56de:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    56e0:	d106      	bne.n	56f0 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    56e2:	4b0b      	ldr	r3, [pc, #44]	; (5710 <z_impl_k_sleep+0x40>)
    56e4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    56e6:	f7ff fe55 	bl	5394 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    56ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    56ee:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    56f0:	4313      	orrs	r3, r2
    56f2:	d10a      	bne.n	570a <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    56f4:	f7ff ff9e 	bl	5634 <z_impl_k_yield>
		return 0;
    56f8:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
    56fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    56fe:	fb80 2303 	smull	r2, r3, r0, r3
    5702:	0bd0      	lsrs	r0, r2, #15
    5704:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    5708:	e7f1      	b.n	56ee <z_impl_k_sleep+0x1e>
    570a:	f7ff ff4d 	bl	55a8 <z_tick_sleep.part.0>
    570e:	e7f4      	b.n	56fa <z_impl_k_sleep+0x2a>
    5710:	20000940 	.word	0x20000940

00005714 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5714:	4b01      	ldr	r3, [pc, #4]	; (571c <z_impl_k_current_get+0x8>)
    5716:	6898      	ldr	r0, [r3, #8]
    5718:	4770      	bx	lr
    571a:	bf00      	nop
    571c:	20000940 	.word	0x20000940

00005720 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5720:	b538      	push	{r3, r4, r5, lr}
    5722:	4604      	mov	r4, r0
    5724:	f04f 0320 	mov.w	r3, #32
    5728:	f3ef 8511 	mrs	r5, BASEPRI
    572c:	f383 8811 	msr	BASEPRI, r3
    5730:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    5734:	f001 fdd8 	bl	72e8 <z_unpend_first_thread>

	if (thread != NULL) {
    5738:	b148      	cbz	r0, 574e <z_impl_k_sem_give+0x2e>
    573a:	2200      	movs	r2, #0
    573c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    573e:	f001 fd78 	bl	7232 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5742:	4629      	mov	r1, r5
    5744:	4805      	ldr	r0, [pc, #20]	; (575c <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    5746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    574a:	f7ff bcd1 	b.w	50f0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    574e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5752:	429a      	cmp	r2, r3
    5754:	bf18      	it	ne
    5756:	3301      	addne	r3, #1
    5758:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    575a:	e7f2      	b.n	5742 <z_impl_k_sem_give+0x22>
    575c:	20000d98 	.word	0x20000d98

00005760 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5760:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5762:	4614      	mov	r4, r2
    5764:	461d      	mov	r5, r3
    5766:	f04f 0320 	mov.w	r3, #32
    576a:	f3ef 8111 	mrs	r1, BASEPRI
    576e:	f383 8811 	msr	BASEPRI, r3
    5772:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    5776:	6883      	ldr	r3, [r0, #8]
    5778:	b143      	cbz	r3, 578c <z_impl_k_sem_take+0x2c>
		sem->count--;
    577a:	3b01      	subs	r3, #1
    577c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    577e:	f381 8811 	msr	BASEPRI, r1
    5782:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5786:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    5788:	b003      	add	sp, #12
    578a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    578c:	ea54 0305 	orrs.w	r3, r4, r5
    5790:	d106      	bne.n	57a0 <z_impl_k_sem_take+0x40>
    5792:	f381 8811 	msr	BASEPRI, r1
    5796:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    579a:	f06f 000f 	mvn.w	r0, #15
    579e:	e7f3      	b.n	5788 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    57a0:	4602      	mov	r2, r0
    57a2:	e9cd 4500 	strd	r4, r5, [sp]
    57a6:	4802      	ldr	r0, [pc, #8]	; (57b0 <z_impl_k_sem_take+0x50>)
    57a8:	f7ff feea 	bl	5580 <z_pend_curr>
	return ret;
    57ac:	e7ec      	b.n	5788 <z_impl_k_sem_take+0x28>
    57ae:	bf00      	nop
    57b0:	20000d98 	.word	0x20000d98

000057b4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    57b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    57b8:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    57bc:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    57c0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    57c2:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    57c4:	2504      	movs	r5, #4
    57c6:	7345      	strb	r5, [r0, #13]
{
    57c8:	460f      	mov	r7, r1

	thread_base->prio = priority;
    57ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    57cc:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    57ce:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
    57d0:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    57d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    57d4:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    57d6:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    57da:	3720      	adds	r7, #32
	node->prev = NULL;
    57dc:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    57e0:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
    57e4:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    57e6:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    57ea:	9202      	str	r2, [sp, #8]
    57ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    57ee:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    57f0:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    57f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    57f4:	9200      	str	r2, [sp, #0]
    57f6:	4642      	mov	r2, r8
{
    57f8:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    57fa:	f7fd fc61 	bl	30c0 <arch_new_thread>
	if (!_current) {
    57fe:	4b05      	ldr	r3, [pc, #20]	; (5814 <z_setup_new_thread+0x60>)
    5800:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    5802:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    5806:	b103      	cbz	r3, 580a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    580a:	6763      	str	r3, [r4, #116]	; 0x74
}
    580c:	4640      	mov	r0, r8
    580e:	b004      	add	sp, #16
    5810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5814:	20000940 	.word	0x20000940

00005818 <z_impl_k_thread_create>:
{
    5818:	b5f0      	push	{r4, r5, r6, r7, lr}
    581a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    581c:	2500      	movs	r5, #0
    581e:	9505      	str	r5, [sp, #20]
    5820:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5822:	9504      	str	r5, [sp, #16]
    5824:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5826:	9503      	str	r5, [sp, #12]
    5828:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    582a:	9502      	str	r5, [sp, #8]
{
    582c:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5830:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5832:	9501      	str	r5, [sp, #4]
    5834:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5836:	9500      	str	r5, [sp, #0]
{
    5838:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    583a:	f7ff ffbb 	bl	57b4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    583e:	1c7b      	adds	r3, r7, #1
    5840:	bf08      	it	eq
    5842:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    5846:	d005      	beq.n	5854 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5848:	ea56 0307 	orrs.w	r3, r6, r7
    584c:	d105      	bne.n	585a <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    584e:	4620      	mov	r0, r4
    5850:	f7ff fd06 	bl	5260 <z_sched_start>
}
    5854:	4620      	mov	r0, r4
    5856:	b007      	add	sp, #28
    5858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    585a:	4904      	ldr	r1, [pc, #16]	; (586c <z_impl_k_thread_create+0x54>)
    585c:	4632      	mov	r2, r6
    585e:	463b      	mov	r3, r7
    5860:	f104 0018 	add.w	r0, r4, #24
    5864:	f000 f8ec 	bl	5a40 <z_add_timeout>
    5868:	e7f4      	b.n	5854 <z_impl_k_thread_create+0x3c>
    586a:	bf00      	nop
    586c:	00007253 	.word	0x00007253

00005870 <z_init_static_threads>:
{
    5870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5874:	4e2a      	ldr	r6, [pc, #168]	; (5920 <z_init_static_threads+0xb0>)
    5876:	4d2b      	ldr	r5, [pc, #172]	; (5924 <z_init_static_threads+0xb4>)
{
    5878:	b086      	sub	sp, #24
    587a:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    587c:	42b5      	cmp	r5, r6
    587e:	f105 0430 	add.w	r4, r5, #48	; 0x30
    5882:	d310      	bcc.n	58a6 <z_init_static_threads+0x36>
	k_sched_lock();
    5884:	f7ff fc46 	bl	5114 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5888:	4c26      	ldr	r4, [pc, #152]	; (5924 <z_init_static_threads+0xb4>)
    588a:	f8df a09c 	ldr.w	sl, [pc, #156]	; 5928 <z_init_static_threads+0xb8>
    588e:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    5892:	f240 36e7 	movw	r6, #999	; 0x3e7
    5896:	2700      	movs	r7, #0
    5898:	4544      	cmp	r4, r8
    589a:	d321      	bcc.n	58e0 <z_init_static_threads+0x70>
}
    589c:	b006      	add	sp, #24
    589e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    58a2:	f7ff bc89 	b.w	51b8 <k_sched_unlock>
		z_setup_new_thread(
    58a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    58aa:	9305      	str	r3, [sp, #20]
    58ac:	f854 3c10 	ldr.w	r3, [r4, #-16]
    58b0:	9304      	str	r3, [sp, #16]
    58b2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    58b6:	9303      	str	r3, [sp, #12]
    58b8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    58bc:	9302      	str	r3, [sp, #8]
    58be:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    58c2:	9301      	str	r3, [sp, #4]
    58c4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    58c8:	9300      	str	r3, [sp, #0]
    58ca:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    58ce:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    58d2:	f7ff ff6f 	bl	57b4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    58d6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    58da:	65dd      	str	r5, [r3, #92]	; 0x5c
    58dc:	4625      	mov	r5, r4
    58de:	e7cd      	b.n	587c <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    58e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58e2:	1c5a      	adds	r2, r3, #1
    58e4:	d00d      	beq.n	5902 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    58e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    58ea:	4630      	mov	r0, r6
    58ec:	4639      	mov	r1, r7
    58ee:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    58f2:	42b9      	cmp	r1, r7
    58f4:	bf08      	it	eq
    58f6:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    58f8:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    58fa:	d104      	bne.n	5906 <z_init_static_threads+0x96>
	z_sched_start(thread);
    58fc:	4628      	mov	r0, r5
    58fe:	f7ff fcaf 	bl	5260 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5902:	3430      	adds	r4, #48	; 0x30
    5904:	e7c8      	b.n	5898 <z_init_static_threads+0x28>
    5906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    590a:	2300      	movs	r3, #0
    590c:	f7fb fb52 	bl	fb4 <__aeabi_uldivmod>
    5910:	4602      	mov	r2, r0
    5912:	460b      	mov	r3, r1
    5914:	f105 0018 	add.w	r0, r5, #24
    5918:	4651      	mov	r1, sl
    591a:	f000 f891 	bl	5a40 <z_add_timeout>
    591e:	e7f0      	b.n	5902 <z_init_static_threads+0x92>
    5920:	20000104 	.word	0x20000104
    5924:	20000104 	.word	0x20000104
    5928:	00007253 	.word	0x00007253

0000592c <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    592c:	b508      	push	{r3, lr}
	__asm__ volatile(
    592e:	f04f 0320 	mov.w	r3, #32
    5932:	f3ef 8411 	mrs	r4, BASEPRI
    5936:	f383 8811 	msr	BASEPRI, r3
    593a:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    593e:	4b04      	ldr	r3, [pc, #16]	; (5950 <z_self_abort+0x24>)
    5940:	6898      	ldr	r0, [r3, #8]
    5942:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    5944:	f7ff fd26 	bl	5394 <z_impl_k_thread_suspend>
    5948:	4620      	mov	r0, r4
    594a:	f7fd fb2f 	bl	2fac <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    594e:	bf00      	nop
    5950:	20000940 	.word	0x20000940

00005954 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5954:	4a02      	ldr	r2, [pc, #8]	; (5960 <boot_banner+0xc>)
    5956:	4903      	ldr	r1, [pc, #12]	; (5964 <boot_banner+0x10>)
    5958:	4803      	ldr	r0, [pc, #12]	; (5968 <boot_banner+0x14>)
    595a:	f000 b9b8 	b.w	5cce <printk>
    595e:	bf00      	nop
    5960:	000079ab 	.word	0x000079ab
    5964:	00007bd4 	.word	0x00007bd4
    5968:	00007bf5 	.word	0x00007bf5

0000596c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    596c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    596e:	4806      	ldr	r0, [pc, #24]	; (5988 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    5970:	4a06      	ldr	r2, [pc, #24]	; (598c <z_data_copy+0x20>)
    5972:	4907      	ldr	r1, [pc, #28]	; (5990 <z_data_copy+0x24>)
    5974:	1a12      	subs	r2, r2, r0
    5976:	f000 fd94 	bl	64a2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    597a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    597e:	4a05      	ldr	r2, [pc, #20]	; (5994 <z_data_copy+0x28>)
    5980:	4905      	ldr	r1, [pc, #20]	; (5998 <z_data_copy+0x2c>)
    5982:	4806      	ldr	r0, [pc, #24]	; (599c <z_data_copy+0x30>)
    5984:	f000 bd8d 	b.w	64a2 <memcpy>
    5988:	20000000 	.word	0x20000000
    598c:	20000104 	.word	0x20000104
    5990:	00007c1c 	.word	0x00007c1c
    5994:	00000000 	.word	0x00000000
    5998:	00007c1c 	.word	0x00007c1c
    599c:	20000000 	.word	0x20000000

000059a0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    59a0:	4b03      	ldr	r3, [pc, #12]	; (59b0 <elapsed+0x10>)
    59a2:	681b      	ldr	r3, [r3, #0]
    59a4:	b90b      	cbnz	r3, 59aa <elapsed+0xa>
    59a6:	f7fd bab7 	b.w	2f18 <z_clock_elapsed>
}
    59aa:	2000      	movs	r0, #0
    59ac:	4770      	bx	lr
    59ae:	bf00      	nop
    59b0:	20000980 	.word	0x20000980

000059b4 <remove_timeout>:
{
    59b4:	b530      	push	{r4, r5, lr}
    59b6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    59b8:	b168      	cbz	r0, 59d6 <remove_timeout+0x22>
    59ba:	4a0a      	ldr	r2, [pc, #40]	; (59e4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    59bc:	6852      	ldr	r2, [r2, #4]
    59be:	4290      	cmp	r0, r2
    59c0:	d009      	beq.n	59d6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    59c2:	b143      	cbz	r3, 59d6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    59c4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    59c8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    59cc:	1912      	adds	r2, r2, r4
    59ce:	eb45 0101 	adc.w	r1, r5, r1
    59d2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    59d6:	6842      	ldr	r2, [r0, #4]
    59d8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    59da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    59dc:	2300      	movs	r3, #0
	node->prev = NULL;
    59de:	e9c0 3300 	strd	r3, r3, [r0]
}
    59e2:	bd30      	pop	{r4, r5, pc}
    59e4:	20000058 	.word	0x20000058

000059e8 <next_timeout>:

static int32_t next_timeout(void)
{
    59e8:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    59ea:	4b13      	ldr	r3, [pc, #76]	; (5a38 <next_timeout+0x50>)
    59ec:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59ee:	429c      	cmp	r4, r3
    59f0:	bf08      	it	eq
    59f2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    59f4:	f7ff ffd4 	bl	59a0 <elapsed>
    59f8:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    59fa:	b1bc      	cbz	r4, 5a2c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    59fc:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5a00:	1b40      	subs	r0, r0, r5
    5a02:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5a06:	2801      	cmp	r0, #1
    5a08:	f171 0300 	sbcs.w	r3, r1, #0
    5a0c:	db11      	blt.n	5a32 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    5a0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5a12:	2300      	movs	r3, #0
    5a14:	4282      	cmp	r2, r0
    5a16:	eb73 0401 	sbcs.w	r4, r3, r1
    5a1a:	da00      	bge.n	5a1e <next_timeout+0x36>
    5a1c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5a1e:	4b07      	ldr	r3, [pc, #28]	; (5a3c <next_timeout+0x54>)
    5a20:	695b      	ldr	r3, [r3, #20]
    5a22:	b113      	cbz	r3, 5a2a <next_timeout+0x42>
    5a24:	4298      	cmp	r0, r3
    5a26:	bfa8      	it	ge
    5a28:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5a2a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5a2c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5a30:	e7f5      	b.n	5a1e <next_timeout+0x36>
    5a32:	2000      	movs	r0, #0
    5a34:	e7f3      	b.n	5a1e <next_timeout+0x36>
    5a36:	bf00      	nop
    5a38:	20000058 	.word	0x20000058
    5a3c:	20000940 	.word	0x20000940

00005a40 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    5a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a44:	9101      	str	r1, [sp, #4]
    5a46:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5a48:	1c4b      	adds	r3, r1, #1
    5a4a:	bf08      	it	eq
    5a4c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5a50:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5a52:	d06c      	beq.n	5b2e <z_add_timeout+0xee>

#ifdef KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
    5a54:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5a56:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    5a5a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    5a5e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    5a62:	ebb3 0804 	subs.w	r8, r3, r4
    5a66:	eb6b 0905 	sbc.w	r9, fp, r5
    5a6a:	f1b8 0f00 	cmp.w	r8, #0
    5a6e:	f179 0300 	sbcs.w	r3, r9, #0
    5a72:	db0f      	blt.n	5a94 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    5a74:	f7ff ff94 	bl	59a0 <elapsed>
    5a78:	4a33      	ldr	r2, [pc, #204]	; (5b48 <z_add_timeout+0x108>)
    5a7a:	e9d2 1c00 	ldrd	r1, ip, [r2]
    5a7e:	f06f 0301 	mvn.w	r3, #1
    5a82:	1a5b      	subs	r3, r3, r1
    5a84:	eb6b 020c 	sbc.w	r2, fp, ip
    5a88:	1b1e      	subs	r6, r3, r4
    5a8a:	eb62 0705 	sbc.w	r7, r2, r5
    5a8e:	1a34      	subs	r4, r6, r0
    5a90:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5a94:	9b01      	ldr	r3, [sp, #4]
    5a96:	f8ca 3008 	str.w	r3, [sl, #8]
    5a9a:	f04f 0320 	mov.w	r3, #32
    5a9e:	f3ef 8611 	mrs	r6, BASEPRI
    5aa2:	f383 8811 	msr	BASEPRI, r3
    5aa6:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    5aaa:	f7ff ff79 	bl	59a0 <elapsed>
	ticks = MAX(1, ticks);
    5aae:	2c01      	cmp	r4, #1
    5ab0:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    5ab4:	4b25      	ldr	r3, [pc, #148]	; (5b4c <z_add_timeout+0x10c>)
    5ab6:	bfb8      	it	lt
    5ab8:	2401      	movlt	r4, #1
    5aba:	681a      	ldr	r2, [r3, #0]
    5abc:	bfb8      	it	lt
    5abe:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
    5ac0:	1824      	adds	r4, r4, r0
    5ac2:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ac6:	429a      	cmp	r2, r3
    5ac8:	e9ca 4504 	strd	r4, r5, [sl, #16]
    5acc:	d001      	beq.n	5ad2 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5ace:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    5ad0:	b952      	cbnz	r2, 5ae8 <z_add_timeout+0xa8>
	node->prev = list->tail;
    5ad2:	685a      	ldr	r2, [r3, #4]
    5ad4:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    5ad8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    5ada:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    5ade:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    5ae2:	f8c3 a004 	str.w	sl, [r3, #4]
}
    5ae6:	e014      	b.n	5b12 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
    5ae8:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    5aec:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    5af0:	4544      	cmp	r4, r8
    5af2:	eb75 0109 	sbcs.w	r1, r5, r9
    5af6:	da1d      	bge.n	5b34 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
    5af8:	ebb8 0004 	subs.w	r0, r8, r4
    5afc:	eb69 0105 	sbc.w	r1, r9, r5
    5b00:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    5b04:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5b06:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    5b0a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5b0e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    5b12:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b14:	429a      	cmp	r2, r3
    5b16:	d006      	beq.n	5b26 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5b18:	4592      	cmp	sl, r2
    5b1a:	d104      	bne.n	5b26 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
    5b1c:	f7ff ff64 	bl	59e8 <next_timeout>
    5b20:	2100      	movs	r1, #0
    5b22:	f7fd f9c7 	bl	2eb4 <z_clock_set_timeout>
	__asm__ volatile(
    5b26:	f386 8811 	msr	BASEPRI, r6
    5b2a:	f3bf 8f6f 	isb	sy
		}
	}
}
    5b2e:	b003      	add	sp, #12
    5b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    5b34:	ebb4 0008 	subs.w	r0, r4, r8
    5b38:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    5b3c:	42ba      	cmp	r2, r7
    5b3e:	e9ca 0104 	strd	r0, r1, [sl, #16]
    5b42:	d0c6      	beq.n	5ad2 <z_add_timeout+0x92>
    5b44:	6812      	ldr	r2, [r2, #0]
    5b46:	e7c3      	b.n	5ad0 <z_add_timeout+0x90>
    5b48:	20000740 	.word	0x20000740
    5b4c:	20000058 	.word	0x20000058

00005b50 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    5b50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b54:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5b56:	f7ff fbdb 	bl	5310 <z_time_slice>
	__asm__ volatile(
    5b5a:	f04f 0320 	mov.w	r3, #32
    5b5e:	f3ef 8411 	mrs	r4, BASEPRI
    5b62:	f383 8811 	msr	BASEPRI, r3
    5b66:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5b6a:	4d2c      	ldr	r5, [pc, #176]	; (5c1c <z_clock_announce+0xcc>)
    5b6c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 5c20 <z_clock_announce+0xd0>
	return list->head == list;
    5b70:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 5c24 <z_clock_announce+0xd4>
    5b74:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    5b76:	4651      	mov	r1, sl
    5b78:	f8d5 c000 	ldr.w	ip, [r5]
    5b7c:	f8db 0000 	ldr.w	r0, [fp]
    5b80:	4662      	mov	r2, ip
    5b82:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b84:	4558      	cmp	r0, fp
    5b86:	e9da 8900 	ldrd	r8, r9, [sl]
    5b8a:	e9cd 2300 	strd	r2, r3, [sp]
    5b8e:	d00d      	beq.n	5bac <z_clock_announce+0x5c>
    5b90:	b160      	cbz	r0, 5bac <z_clock_announce+0x5c>
    5b92:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    5b96:	45b4      	cmp	ip, r6
    5b98:	41bb      	sbcs	r3, r7
    5b9a:	da1e      	bge.n	5bda <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5b9c:	9b00      	ldr	r3, [sp, #0]
    5b9e:	ebb6 0c03 	subs.w	ip, r6, r3
    5ba2:	9b01      	ldr	r3, [sp, #4]
    5ba4:	eb67 0603 	sbc.w	r6, r7, r3
    5ba8:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    5bac:	9b00      	ldr	r3, [sp, #0]
    5bae:	eb13 0208 	adds.w	r2, r3, r8
    5bb2:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    5bb4:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    5bb8:	eb43 0309 	adc.w	r3, r3, r9
    5bbc:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    5bc0:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    5bc2:	f7ff ff11 	bl	59e8 <next_timeout>
    5bc6:	4631      	mov	r1, r6
    5bc8:	f7fd f974 	bl	2eb4 <z_clock_set_timeout>
	__asm__ volatile(
    5bcc:	f384 8811 	msr	BASEPRI, r4
    5bd0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5bd4:	b003      	add	sp, #12
    5bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    5bda:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    5bde:	f04f 0200 	mov.w	r2, #0
    5be2:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    5be6:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    5bea:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    5bee:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    5bf2:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    5bf6:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    5bf8:	f7ff fedc 	bl	59b4 <remove_timeout>
    5bfc:	f384 8811 	msr	BASEPRI, r4
    5c00:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5c04:	6883      	ldr	r3, [r0, #8]
    5c06:	4798      	blx	r3
	__asm__ volatile(
    5c08:	f04f 0320 	mov.w	r3, #32
    5c0c:	f3ef 8411 	mrs	r4, BASEPRI
    5c10:	f383 8811 	msr	BASEPRI, r3
    5c14:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    5c18:	4901      	ldr	r1, [pc, #4]	; (5c20 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5c1a:	e7ad      	b.n	5b78 <z_clock_announce+0x28>
    5c1c:	20000980 	.word	0x20000980
    5c20:	20000740 	.word	0x20000740
    5c24:	20000058 	.word	0x20000058

00005c28 <z_tick_get>:

int64_t z_tick_get(void)
{
    5c28:	b510      	push	{r4, lr}
    5c2a:	f04f 0320 	mov.w	r3, #32
    5c2e:	f3ef 8411 	mrs	r4, BASEPRI
    5c32:	f383 8811 	msr	BASEPRI, r3
    5c36:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    5c3a:	f7fd f96d 	bl	2f18 <z_clock_elapsed>
    5c3e:	4b06      	ldr	r3, [pc, #24]	; (5c58 <z_tick_get+0x30>)
    5c40:	e9d3 2300 	ldrd	r2, r3, [r3]
    5c44:	1812      	adds	r2, r2, r0
    5c46:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    5c4a:	f384 8811 	msr	BASEPRI, r4
    5c4e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5c52:	4610      	mov	r0, r2
    5c54:	4619      	mov	r1, r3
    5c56:	bd10      	pop	{r4, pc}
    5c58:	20000740 	.word	0x20000740

00005c5c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    5c5c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5c5e:	4c06      	ldr	r4, [pc, #24]	; (5c78 <statics_init+0x1c>)
    5c60:	4d06      	ldr	r5, [pc, #24]	; (5c7c <statics_init+0x20>)
    5c62:	42ac      	cmp	r4, r5
    5c64:	d301      	bcc.n	5c6a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    5c66:	2000      	movs	r0, #0
    5c68:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    5c6a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    5c6e:	4620      	mov	r0, r4
    5c70:	f001 fbb9 	bl	73e6 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    5c74:	3414      	adds	r4, #20
    5c76:	e7f4      	b.n	5c62 <statics_init+0x6>
    5c78:	20000104 	.word	0x20000104
    5c7c:	20000104 	.word	0x20000104

00005c80 <sensor_sample_fetch>:
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    5c80:	6883      	ldr	r3, [r0, #8]
    5c82:	2138      	movs	r1, #56	; 0x38
    5c84:	68db      	ldr	r3, [r3, #12]
    5c86:	4718      	bx	r3

00005c88 <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
    5c88:	6883      	ldr	r3, [r0, #8]
    5c8a:	691b      	ldr	r3, [r3, #16]
    5c8c:	4718      	bx	r3

00005c8e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5c8e:	4603      	mov	r3, r0
    5c90:	b158      	cbz	r0, 5caa <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5c92:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5c94:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5c98:	2a01      	cmp	r2, #1
    5c9a:	d003      	beq.n	5ca4 <sys_notify_validate+0x16>
    5c9c:	2a03      	cmp	r2, #3
    5c9e:	d104      	bne.n	5caa <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5ca0:	6802      	ldr	r2, [r0, #0]
    5ca2:	b112      	cbz	r2, 5caa <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5ca4:	2000      	movs	r0, #0
    5ca6:	6098      	str	r0, [r3, #8]
    5ca8:	4770      	bx	lr
		return -EINVAL;
    5caa:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5cae:	4770      	bx	lr

00005cb0 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5cb0:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5cb2:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    5cb4:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    5cb8:	2a03      	cmp	r2, #3
    5cba:	f04f 0200 	mov.w	r2, #0
{
    5cbe:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5cc0:	bf0c      	ite	eq
    5cc2:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    5cc4:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5cc6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5cc8:	4770      	bx	lr

00005cca <arch_printk_char_out>:
}
    5cca:	2000      	movs	r0, #0
    5ccc:	4770      	bx	lr

00005cce <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    5cce:	b40f      	push	{r0, r1, r2, r3}
    5cd0:	b507      	push	{r0, r1, r2, lr}
    5cd2:	a904      	add	r1, sp, #16
    5cd4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5cd8:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    5cda:	f7fb fecf 	bl	1a7c <vprintk>
	}
	va_end(ap);
}
    5cde:	b003      	add	sp, #12
    5ce0:	f85d eb04 	ldr.w	lr, [sp], #4
    5ce4:	b004      	add	sp, #16
    5ce6:	4770      	bx	lr

00005ce8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5ce8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5cea:	f013 0307 	ands.w	r3, r3, #7
    5cee:	d105      	bne.n	5cfc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5cf0:	6803      	ldr	r3, [r0, #0]
    5cf2:	2b00      	cmp	r3, #0
		evt = EVT_START;
    5cf4:	bf0c      	ite	eq
    5cf6:	2000      	moveq	r0, #0
    5cf8:	2003      	movne	r0, #3
    5cfa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5cfc:	2b02      	cmp	r3, #2
    5cfe:	d105      	bne.n	5d0c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5d00:	8b43      	ldrh	r3, [r0, #26]
    5d02:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    5d04:	bf14      	ite	ne
    5d06:	2000      	movne	r0, #0
    5d08:	2004      	moveq	r0, #4
    5d0a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5d0c:	2b01      	cmp	r3, #1
    5d0e:	d105      	bne.n	5d1c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5d10:	6803      	ldr	r3, [r0, #0]
    5d12:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    5d14:	bf0c      	ite	eq
    5d16:	2000      	moveq	r0, #0
    5d18:	2005      	movne	r0, #5
    5d1a:	4770      	bx	lr
	int evt = EVT_NOP;
    5d1c:	2000      	movs	r0, #0
}
    5d1e:	4770      	bx	lr

00005d20 <notify_one>:
{
    5d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d24:	460d      	mov	r5, r1
    5d26:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5d28:	4619      	mov	r1, r3
    5d2a:	1d28      	adds	r0, r5, #4
{
    5d2c:	4690      	mov	r8, r2
    5d2e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5d30:	f7ff ffbe 	bl	5cb0 <sys_notify_finalize>
	if (cb) {
    5d34:	4604      	mov	r4, r0
    5d36:	b138      	cbz	r0, 5d48 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5d38:	4633      	mov	r3, r6
    5d3a:	4642      	mov	r2, r8
    5d3c:	4629      	mov	r1, r5
    5d3e:	4638      	mov	r0, r7
    5d40:	46a4      	mov	ip, r4
}
    5d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5d46:	4760      	bx	ip
}
    5d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005d4c <transition_complete>:
{
    5d4c:	b410      	push	{r4}
	__asm__ volatile(
    5d4e:	f04f 0420 	mov.w	r4, #32
    5d52:	f3ef 8211 	mrs	r2, BASEPRI
    5d56:	f384 8811 	msr	BASEPRI, r4
    5d5a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5d5e:	6141      	str	r1, [r0, #20]
}
    5d60:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5d62:	2101      	movs	r1, #1
    5d64:	f7fb be98 	b.w	1a98 <process_event>

00005d68 <validate_args>:
{
    5d68:	b510      	push	{r4, lr}
    5d6a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5d6c:	b140      	cbz	r0, 5d80 <validate_args+0x18>
    5d6e:	b139      	cbz	r1, 5d80 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5d70:	1d08      	adds	r0, r1, #4
    5d72:	f7ff ff8c 	bl	5c8e <sys_notify_validate>
	if ((rv == 0)
    5d76:	b928      	cbnz	r0, 5d84 <validate_args+0x1c>
	    && ((cli->notify.flags
    5d78:	68a3      	ldr	r3, [r4, #8]
    5d7a:	f033 0303 	bics.w	r3, r3, #3
    5d7e:	d001      	beq.n	5d84 <validate_args+0x1c>
		rv = -EINVAL;
    5d80:	f06f 0015 	mvn.w	r0, #21
}
    5d84:	bd10      	pop	{r4, pc}

00005d86 <onoff_manager_init>:
{
    5d86:	b538      	push	{r3, r4, r5, lr}
    5d88:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5d8a:	4605      	mov	r5, r0
    5d8c:	b158      	cbz	r0, 5da6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5d8e:	b151      	cbz	r1, 5da6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5d90:	680b      	ldr	r3, [r1, #0]
    5d92:	b143      	cbz	r3, 5da6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5d94:	684b      	ldr	r3, [r1, #4]
    5d96:	b133      	cbz	r3, 5da6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5d98:	221c      	movs	r2, #28
    5d9a:	2100      	movs	r1, #0
    5d9c:	f000 fbac 	bl	64f8 <memset>
    5da0:	612c      	str	r4, [r5, #16]
	return 0;
    5da2:	2000      	movs	r0, #0
}
    5da4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5da6:	f06f 0015 	mvn.w	r0, #21
    5daa:	e7fb      	b.n	5da4 <onoff_manager_init+0x1e>

00005dac <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    5dac:	b570      	push	{r4, r5, r6, lr}
    5dae:	4604      	mov	r4, r0
    5db0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5db2:	f7ff ffd9 	bl	5d68 <validate_args>

	if (rv < 0) {
    5db6:	1e05      	subs	r5, r0, #0
    5db8:	db31      	blt.n	5e1e <onoff_request+0x72>
    5dba:	f04f 0320 	mov.w	r3, #32
    5dbe:	f3ef 8111 	mrs	r1, BASEPRI
    5dc2:	f383 8811 	msr	BASEPRI, r3
    5dc6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5dca:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5dcc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    5dce:	f64f 75ff 	movw	r5, #65535	; 0xffff
    5dd2:	42ab      	cmp	r3, r5
    5dd4:	f000 0207 	and.w	r2, r0, #7
    5dd8:	d02e      	beq.n	5e38 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    5dda:	2a02      	cmp	r2, #2
    5ddc:	d10e      	bne.n	5dfc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    5dde:	3301      	adds	r3, #1
    5de0:	8363      	strh	r3, [r4, #26]
	rv = state;
    5de2:	4615      	mov	r5, r2
		notify = true;
    5de4:	2301      	movs	r3, #1
	__asm__ volatile(
    5de6:	f381 8811 	msr	BASEPRI, r1
    5dea:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    5dee:	b1b3      	cbz	r3, 5e1e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    5df0:	2300      	movs	r3, #0
    5df2:	4631      	mov	r1, r6
    5df4:	4620      	mov	r0, r4
    5df6:	f7ff ff93 	bl	5d20 <notify_one>
    5dfa:	e010      	b.n	5e1e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    5dfc:	0783      	lsls	r3, r0, #30
    5dfe:	d001      	beq.n	5e04 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    5e00:	2a06      	cmp	r2, #6
    5e02:	d10e      	bne.n	5e22 <onoff_request+0x76>
	parent->next = child;
    5e04:	2300      	movs	r3, #0
    5e06:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    5e08:	6863      	ldr	r3, [r4, #4]
    5e0a:	b993      	cbnz	r3, 5e32 <onoff_request+0x86>
	list->head = node;
    5e0c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    5e10:	4615      	mov	r5, r2
    5e12:	b962      	cbnz	r2, 5e2e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    5e14:	460a      	mov	r2, r1
    5e16:	4620      	mov	r0, r4
    5e18:	2102      	movs	r1, #2
    5e1a:	f7fb fe3d 	bl	1a98 <process_event>
		}
	}

	return rv;
}
    5e1e:	4628      	mov	r0, r5
    5e20:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    5e22:	2a05      	cmp	r2, #5
    5e24:	bf0c      	ite	eq
    5e26:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    5e2a:	f06f 0504 	mvnne.w	r5, #4
    5e2e:	2300      	movs	r3, #0
    5e30:	e7d9      	b.n	5de6 <onoff_request+0x3a>
	parent->next = child;
    5e32:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5e34:	6066      	str	r6, [r4, #4]
}
    5e36:	e7eb      	b.n	5e10 <onoff_request+0x64>
		rv = -EAGAIN;
    5e38:	f06f 050a 	mvn.w	r5, #10
    5e3c:	e7f7      	b.n	5e2e <onoff_request+0x82>

00005e3e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    5e3e:	4604      	mov	r4, r0
    5e40:	b508      	push	{r3, lr}
    5e42:	4608      	mov	r0, r1
    5e44:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    5e46:	461a      	mov	r2, r3
    5e48:	47a0      	blx	r4
	return z_impl_k_current_get();
    5e4a:	f7ff fc63 	bl	5714 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    5e4e:	f7fd fb0b 	bl	3468 <z_impl_k_thread_abort>

00005e52 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    5e52:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    5e54:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    5e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    5e5c:	bf2c      	ite	cs
    5e5e:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    5e62:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    5e66:	4770      	bx	lr

00005e68 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    5e68:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    5e6c:	6880      	ldr	r0, [r0, #8]
    5e6e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    5e72:	bf2c      	ite	cs
    5e74:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    5e78:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    5e7c:	4770      	bx	lr

00005e7e <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    5e7e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5e80:	2201      	movs	r2, #1
    5e82:	f7ff ffe6 	bl	5e52 <chunk_field>
}
    5e86:	0840      	lsrs	r0, r0, #1
    5e88:	bd08      	pop	{r3, pc}

00005e8a <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    5e8a:	6883      	ldr	r3, [r0, #8]
    5e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    5e90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    5e94:	d308      	bcc.n	5ea8 <set_chunk_used+0x1e>
		if (used) {
    5e96:	684b      	ldr	r3, [r1, #4]
    5e98:	b11a      	cbz	r2, 5ea2 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    5e9a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5e9e:	604b      	str	r3, [r1, #4]
    5ea0:	4770      	bx	lr
    5ea2:	f023 0301 	bic.w	r3, r3, #1
    5ea6:	e7fa      	b.n	5e9e <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    5ea8:	884b      	ldrh	r3, [r1, #2]
    5eaa:	b11a      	cbz	r2, 5eb4 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    5eac:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5eb0:	804b      	strh	r3, [r1, #2]
		}
	}
}
    5eb2:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5eb4:	f023 0301 	bic.w	r3, r3, #1
    5eb8:	e7fa      	b.n	5eb0 <set_chunk_used+0x26>

00005eba <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5eba:	0053      	lsls	r3, r2, #1
    5ebc:	2201      	movs	r2, #1
    5ebe:	f7ff bfd3 	b.w	5e68 <chunk_set>

00005ec2 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    5ec2:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5ec4:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5ec6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    5eca:	bf2c      	ite	cs
    5ecc:	2002      	movcs	r0, #2
    5ece:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5ed0:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    5ed2:	fab0 f080 	clz	r0, r0
}
    5ed6:	f1c0 001f 	rsb	r0, r0, #31
    5eda:	4770      	bx	lr

00005edc <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    5edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ee0:	4604      	mov	r4, r0
    5ee2:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    5ee4:	f7ff ffcb 	bl	5e7e <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    5ee8:	68a3      	ldr	r3, [r4, #8]
    5eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5eee:	4601      	mov	r1, r0
    5ef0:	d301      	bcc.n	5ef6 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    5ef2:	2801      	cmp	r0, #1
    5ef4:	d035      	beq.n	5f62 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    5ef6:	4620      	mov	r0, r4
    5ef8:	f7ff ffe3 	bl	5ec2 <bucket_idx>
	if (b->next == 0U) {
    5efc:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    5f00:	6916      	ldr	r6, [r2, #16]
    5f02:	b99e      	cbnz	r6, 5f2c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    5f04:	2301      	movs	r3, #1
    5f06:	fa03 f000 	lsl.w	r0, r3, r0
    5f0a:	68e3      	ldr	r3, [r4, #12]
    5f0c:	4303      	orrs	r3, r0
    5f0e:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    5f10:	4629      	mov	r1, r5
		b->next = c;
    5f12:	6115      	str	r5, [r2, #16]
    5f14:	462b      	mov	r3, r5
    5f16:	2202      	movs	r2, #2
    5f18:	4620      	mov	r0, r4
    5f1a:	f7ff ffa5 	bl	5e68 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5f1e:	2203      	movs	r2, #3
    5f20:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    5f22:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    5f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5f28:	f7ff bf9e 	b.w	5e68 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    5f2c:	2202      	movs	r2, #2
    5f2e:	4631      	mov	r1, r6
    5f30:	4620      	mov	r0, r4
    5f32:	f7ff ff8e 	bl	5e52 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    5f36:	2202      	movs	r2, #2
    5f38:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    5f3a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    5f3c:	4629      	mov	r1, r5
    5f3e:	4620      	mov	r0, r4
    5f40:	f7ff ff92 	bl	5e68 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5f44:	4633      	mov	r3, r6
    5f46:	2203      	movs	r2, #3
    5f48:	4629      	mov	r1, r5
    5f4a:	4620      	mov	r0, r4
    5f4c:	f7ff ff8c 	bl	5e68 <chunk_set>
    5f50:	2203      	movs	r2, #3
    5f52:	4639      	mov	r1, r7
    5f54:	462b      	mov	r3, r5
    5f56:	4620      	mov	r0, r4
    5f58:	f7ff ff86 	bl	5e68 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    5f5c:	2202      	movs	r2, #2
    5f5e:	4631      	mov	r1, r6
    5f60:	e7df      	b.n	5f22 <free_list_add+0x46>
    5f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005f66 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    5f66:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    5f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f6c:	bf2c      	ite	cs
    5f6e:	2508      	movcs	r5, #8
    5f70:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    5f72:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5f74:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5f76:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5f78:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5f7c:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    5f80:	2200      	movs	r2, #0
    5f82:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5f84:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
    5f86:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5f88:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
    5f8a:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    5f8e:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5f90:	4629      	mov	r1, r5
	h->len = buf_sz;
    5f92:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    5f94:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5f96:	4620      	mov	r0, r4
    5f98:	f7ff ff93 	bl	5ec2 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    5f9c:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5f9e:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5fa0:	1c41      	adds	r1, r0, #1
    5fa2:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    5fa4:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    5fa8:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    5faa:	428b      	cmp	r3, r1
    5fac:	db29      	blt.n	6002 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    5fae:	4632      	mov	r2, r6
    5fb0:	4620      	mov	r0, r4
    5fb2:	2100      	movs	r1, #0
    5fb4:	f7ff ff81 	bl	5eba <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5fb8:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    5fba:	4620      	mov	r0, r4
    5fbc:	2201      	movs	r2, #1
    5fbe:	2100      	movs	r1, #0
    5fc0:	f7ff ff63 	bl	5e8a <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5fc4:	463a      	mov	r2, r7
    5fc6:	4631      	mov	r1, r6
    5fc8:	f7ff ff77 	bl	5eba <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    5fcc:	4633      	mov	r3, r6
    5fce:	4631      	mov	r1, r6
    5fd0:	4620      	mov	r0, r4
    5fd2:	2200      	movs	r2, #0
    5fd4:	f7ff ff48 	bl	5e68 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    5fd8:	4629      	mov	r1, r5
    5fda:	4620      	mov	r0, r4
    5fdc:	2200      	movs	r2, #0
    5fde:	f7ff ff6c 	bl	5eba <set_chunk_size>
    5fe2:	463b      	mov	r3, r7
    5fe4:	4629      	mov	r1, r5
    5fe6:	4620      	mov	r0, r4
    5fe8:	2200      	movs	r2, #0
    5fea:	f7ff ff3d 	bl	5e68 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    5fee:	4629      	mov	r1, r5
    5ff0:	4620      	mov	r0, r4
    5ff2:	2201      	movs	r2, #1
    5ff4:	f7ff ff49 	bl	5e8a <set_chunk_used>

	free_list_add(h, chunk0_size);
    5ff8:	4631      	mov	r1, r6
}
    5ffa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    5ffe:	f7ff bf6d 	b.w	5edc <free_list_add>
		h->buckets[i].next = 0;
    6002:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    6006:	3301      	adds	r3, #1
    6008:	e7cf      	b.n	5faa <sys_heap_init+0x44>

0000600a <_ldiv5>:
{
    600a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
    600e:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
    6012:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    6016:	fba2 bc03 	umull	fp, ip, r2, r3
    601a:	eb1b 0603 	adds.w	r6, fp, r3
    601e:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
    6022:	462f      	mov	r7, r5
	result += (uint64_t)v_hi * m;
    6024:	fba4 4503 	umull	r4, r5, r4, r3
    6028:	eb1b 0204 	adds.w	r2, fp, r4
	result >>= 32;
    602c:	f04f 0600 	mov.w	r6, #0
	result += (uint64_t)v_hi * m;
    6030:	eb4c 0105 	adc.w	r1, ip, r5
    6034:	19d2      	adds	r2, r2, r7
    6036:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
    603a:	1863      	adds	r3, r4, r1
	result >>= 32;
    603c:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
    603e:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
    6042:	e9c0 3200 	strd	r3, r2, [r0]
}
    6046:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0000604a <_get_digit>:
	if (*digit_count > 0) {
    604a:	680b      	ldr	r3, [r1, #0]
    604c:	2b00      	cmp	r3, #0
{
    604e:	b570      	push	{r4, r5, r6, lr}
    6050:	4604      	mov	r4, r0
	if (*digit_count > 0) {
    6052:	dd0f      	ble.n	6074 <_get_digit+0x2a>
		*fr *= 10U;
    6054:	6822      	ldr	r2, [r4, #0]
    6056:	6840      	ldr	r0, [r0, #4]
		--*digit_count;
    6058:	3b01      	subs	r3, #1
    605a:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
    605c:	210a      	movs	r1, #10
    605e:	fba2 5601 	umull	r5, r6, r2, r1
    6062:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= (BIT64(60) - 1U);
    6066:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    606a:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
    606e:	0f30      	lsrs	r0, r6, #28
    6070:	3030      	adds	r0, #48	; 0x30
}
    6072:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    6074:	2030      	movs	r0, #48	; 0x30
    6076:	e7fc      	b.n	6072 <_get_digit+0x28>

00006078 <encode_uint>:
{
    6078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    607c:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    607e:	78d3      	ldrb	r3, [r2, #3]
{
    6080:	4614      	mov	r4, r2
	switch (specifier) {
    6082:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6084:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    6088:	4606      	mov	r6, r0
    608a:	460f      	mov	r7, r1
    608c:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    608e:	d02d      	beq.n	60ec <encode_uint+0x74>
    6090:	d828      	bhi.n	60e4 <encode_uint+0x6c>
		return 16;
    6092:	2b58      	cmp	r3, #88	; 0x58
    6094:	bf14      	ite	ne
    6096:	250a      	movne	r5, #10
    6098:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    609a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    609e:	46aa      	mov	sl, r5
    60a0:	f04f 0b00 	mov.w	fp, #0
    60a4:	4652      	mov	r2, sl
    60a6:	465b      	mov	r3, fp
    60a8:	4630      	mov	r0, r6
    60aa:	4639      	mov	r1, r7
    60ac:	f7fa ff82 	bl	fb4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    60b0:	2a09      	cmp	r2, #9
    60b2:	b2d3      	uxtb	r3, r2
    60b4:	d81f      	bhi.n	60f6 <encode_uint+0x7e>
    60b6:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    60b8:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    60ba:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    60bc:	bf08      	it	eq
    60be:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    60c0:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    60c4:	d301      	bcc.n	60ca <encode_uint+0x52>
    60c6:	45c8      	cmp	r8, r9
    60c8:	d812      	bhi.n	60f0 <encode_uint+0x78>
	if (conv->flag_hash) {
    60ca:	7823      	ldrb	r3, [r4, #0]
    60cc:	069b      	lsls	r3, r3, #26
    60ce:	d505      	bpl.n	60dc <encode_uint+0x64>
		if (radix == 8) {
    60d0:	2d08      	cmp	r5, #8
    60d2:	d116      	bne.n	6102 <encode_uint+0x8a>
			conv->altform_0 = true;
    60d4:	78a3      	ldrb	r3, [r4, #2]
    60d6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    60da:	70a3      	strb	r3, [r4, #2]
}
    60dc:	4640      	mov	r0, r8
    60de:	b003      	add	sp, #12
    60e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    60e4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    60e8:	2b70      	cmp	r3, #112	; 0x70
    60ea:	e7d3      	b.n	6094 <encode_uint+0x1c>
	switch (specifier) {
    60ec:	2508      	movs	r5, #8
    60ee:	e7d4      	b.n	609a <encode_uint+0x22>
		value /= radix;
    60f0:	4606      	mov	r6, r0
    60f2:	460f      	mov	r7, r1
    60f4:	e7d6      	b.n	60a4 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    60f6:	9a01      	ldr	r2, [sp, #4]
    60f8:	2a19      	cmp	r2, #25
    60fa:	bf94      	ite	ls
    60fc:	3337      	addls	r3, #55	; 0x37
    60fe:	3357      	addhi	r3, #87	; 0x57
    6100:	e7da      	b.n	60b8 <encode_uint+0x40>
		} else if (radix == 16) {
    6102:	2d10      	cmp	r5, #16
    6104:	d1ea      	bne.n	60dc <encode_uint+0x64>
			conv->altform_0c = true;
    6106:	78a3      	ldrb	r3, [r4, #2]
    6108:	f043 0310 	orr.w	r3, r3, #16
    610c:	e7e5      	b.n	60da <encode_uint+0x62>

0000610e <outs>:
{
    610e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6112:	4607      	mov	r7, r0
    6114:	4688      	mov	r8, r1
    6116:	4615      	mov	r5, r2
    6118:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    611a:	4614      	mov	r4, r2
    611c:	42b4      	cmp	r4, r6
    611e:	eba4 0005 	sub.w	r0, r4, r5
    6122:	d302      	bcc.n	612a <outs+0x1c>
    6124:	b93e      	cbnz	r6, 6136 <outs+0x28>
    6126:	7823      	ldrb	r3, [r4, #0]
    6128:	b12b      	cbz	r3, 6136 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    612a:	f814 0b01 	ldrb.w	r0, [r4], #1
    612e:	4641      	mov	r1, r8
    6130:	47b8      	blx	r7
		if (rc < 0) {
    6132:	2800      	cmp	r0, #0
    6134:	daf2      	bge.n	611c <outs+0xe>
}
    6136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000613a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    613a:	4770      	bx	lr

0000613c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    613c:	68c2      	ldr	r2, [r0, #12]
    613e:	b2cb      	uxtb	r3, r1
    6140:	210c      	movs	r1, #12
    6142:	fb03 2101 	mla	r1, r3, r1, r2
    6146:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    6148:	f000 0007 	and.w	r0, r0, #7
    614c:	4770      	bx	lr

0000614e <set_off_state>:
	__asm__ volatile(
    614e:	f04f 0320 	mov.w	r3, #32
    6152:	f3ef 8211 	mrs	r2, BASEPRI
    6156:	f383 8811 	msr	BASEPRI, r3
    615a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    615e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6160:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    6164:	d001      	beq.n	616a <set_off_state+0x1c>
    6166:	428b      	cmp	r3, r1
    6168:	d107      	bne.n	617a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    616a:	2301      	movs	r3, #1
    616c:	6003      	str	r3, [r0, #0]
	int err = 0;
    616e:	2000      	movs	r0, #0
	__asm__ volatile(
    6170:	f382 8811 	msr	BASEPRI, r2
    6174:	f3bf 8f6f 	isb	sy
}
    6178:	4770      	bx	lr
		err = -EPERM;
    617a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    617e:	e7f7      	b.n	6170 <set_off_state+0x22>

00006180 <set_starting_state>:
{
    6180:	b510      	push	{r4, lr}
	__asm__ volatile(
    6182:	f04f 0320 	mov.w	r3, #32
    6186:	f3ef 8211 	mrs	r2, BASEPRI
    618a:	f383 8811 	msr	BASEPRI, r3
    618e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6192:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6194:	f003 0407 	and.w	r4, r3, #7
    6198:	2c01      	cmp	r4, #1
    619a:	d106      	bne.n	61aa <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    619c:	6001      	str	r1, [r0, #0]
	int err = 0;
    619e:	2000      	movs	r0, #0
	__asm__ volatile(
    61a0:	f382 8811 	msr	BASEPRI, r2
    61a4:	f3bf 8f6f 	isb	sy
}
    61a8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    61aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    61ae:	428b      	cmp	r3, r1
		err = -EALREADY;
    61b0:	bf14      	ite	ne
    61b2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    61b6:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    61ba:	e7f1      	b.n	61a0 <set_starting_state+0x20>

000061bc <set_on_state>:
	__asm__ volatile(
    61bc:	f04f 0320 	mov.w	r3, #32
    61c0:	f3ef 8211 	mrs	r2, BASEPRI
    61c4:	f383 8811 	msr	BASEPRI, r3
    61c8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    61cc:	6803      	ldr	r3, [r0, #0]
    61ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    61d2:	f043 0302 	orr.w	r3, r3, #2
    61d6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    61d8:	f382 8811 	msr	BASEPRI, r2
    61dc:	f3bf 8f6f 	isb	sy
}
    61e0:	4770      	bx	lr

000061e2 <onoff_started_callback>:
	return &data->mgr[type];
    61e2:	68c0      	ldr	r0, [r0, #12]
{
    61e4:	b410      	push	{r4}
	return &data->mgr[type];
    61e6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    61e8:	241c      	movs	r4, #28
    61ea:	fb03 0004 	mla	r0, r3, r4, r0
    61ee:	2100      	movs	r1, #0
}
    61f0:	bc10      	pop	{r4}
	notify(mgr, 0);
    61f2:	4710      	bx	r2

000061f4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    61f4:	2000      	movs	r0, #0
    61f6:	f7fe bb33 	b.w	4860 <nrfx_clock_stop>

000061fa <blocking_start_callback>:
{
    61fa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    61fc:	f7ff ba90 	b.w	5720 <z_impl_k_sem_give>

00006200 <api_stop>:
{
    6200:	b538      	push	{r3, r4, r5, lr}
    6202:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    6204:	230c      	movs	r3, #12
{
    6206:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    6208:	4363      	muls	r3, r4
    620a:	68c0      	ldr	r0, [r0, #12]
    620c:	3340      	adds	r3, #64	; 0x40
    620e:	2180      	movs	r1, #128	; 0x80
    6210:	4418      	add	r0, r3
    6212:	f7ff ff9c 	bl	614e <set_off_state>
	if (err < 0) {
    6216:	2800      	cmp	r0, #0
    6218:	db05      	blt.n	6226 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    621a:	6869      	ldr	r1, [r5, #4]
    621c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    6220:	6863      	ldr	r3, [r4, #4]
    6222:	4798      	blx	r3
	return 0;
    6224:	2000      	movs	r0, #0
}
    6226:	bd38      	pop	{r3, r4, r5, pc}

00006228 <api_start>:
{
    6228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    622c:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    622e:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    6230:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    6232:	436f      	muls	r7, r5
{
    6234:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    6236:	f107 0040 	add.w	r0, r7, #64	; 0x40
    623a:	2180      	movs	r1, #128	; 0x80
    623c:	4420      	add	r0, r4
{
    623e:	4690      	mov	r8, r2
    6240:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    6242:	f7ff ff9d 	bl	6180 <set_starting_state>
	if (err < 0) {
    6246:	2800      	cmp	r0, #0
    6248:	db07      	blt.n	625a <api_start+0x32>
	subdata->cb = cb;
    624a:	443c      	add	r4, r7
	subdata->user_data = user_data;
    624c:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6250:	6873      	ldr	r3, [r6, #4]
    6252:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    6256:	4798      	blx	r3
	return 0;
    6258:	2000      	movs	r0, #0
}
    625a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000625e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    625e:	4770      	bx	lr

00006260 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    6260:	4770      	bx	lr

00006262 <lis2mdl_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
    6262:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    6264:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
    6268:	46a4      	mov	ip, r4
  return ret;
}
    626a:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
    626c:	4760      	bx	ip

0000626e <lis2mdl_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
    626e:	b410      	push	{r4}
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    6270:	6804      	ldr	r4, [r0, #0]
    6272:	6880      	ldr	r0, [r0, #8]
    6274:	46a4      	mov	ip, r4
  return ret;
}
    6276:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
    6278:	4760      	bx	ip

0000627a <lis2mdl_mag_user_offset_set>:
  * @param  buff  buffer that contains data to write
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_mag_user_offset_set(stmdev_ctx_t *ctx, int16_t *val)
{
    627a:	b507      	push	{r0, r1, r2, lr}
  uint8_t buff[6];
  int32_t ret;

  buff[1] = (uint8_t) ( (uint8_t)val[0] / 256U);
    627c:	780a      	ldrb	r2, [r1, #0]
  buff[0] = (uint8_t) ( (uint8_t)val[0] - (buff[1] * 256U));
    627e:	f88d 2000 	strb.w	r2, [sp]
  buff[3] = (uint8_t) ( (uint8_t)val[1] / 256U);
    6282:	788a      	ldrb	r2, [r1, #2]
  buff[2] = (uint8_t) ( (uint8_t)val[1] - (buff[1] * 256U));
    6284:	f88d 2002 	strb.w	r2, [sp, #2]
  buff[1] = (uint8_t) ( (uint8_t)val[0] / 256U);
    6288:	2300      	movs	r3, #0
  buff[5] = (uint8_t) ( (uint8_t)val[2] / 256U);
    628a:	790a      	ldrb	r2, [r1, #4]
  buff[1] = (uint8_t) ( (uint8_t)val[0] / 256U);
    628c:	f88d 3001 	strb.w	r3, [sp, #1]
  buff[3] = (uint8_t) ( (uint8_t)val[1] / 256U);
    6290:	f88d 3003 	strb.w	r3, [sp, #3]
  buff[5] = (uint8_t) ( (uint8_t)val[2] / 256U);
    6294:	f88d 3005 	strb.w	r3, [sp, #5]
  buff[4] = (uint8_t) ( (uint8_t)val[2] - (buff[1] * 256U));
    6298:	f88d 2004 	strb.w	r2, [sp, #4]
  ret = lis2mdl_write_reg(ctx, LIS2MDL_OFFSET_X_REG_L, buff, 6);
    629c:	2306      	movs	r3, #6
    629e:	466a      	mov	r2, sp
    62a0:	2145      	movs	r1, #69	; 0x45
    62a2:	f7ff ffe4 	bl	626e <lis2mdl_write_reg>

  return ret;
}
    62a6:	b003      	add	sp, #12
    62a8:	f85d fb04 	ldr.w	pc, [sp], #4

000062ac <lis2mdl_operating_mode_set>:
  * @param  val    change the values of md in reg CFG_REG_A
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx, lis2mdl_md_t val)
{
    62ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    62ae:	2301      	movs	r3, #1
{
    62b0:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    62b2:	aa01      	add	r2, sp, #4
    62b4:	2160      	movs	r1, #96	; 0x60
{
    62b6:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    62b8:	f7ff ffd3 	bl	6262 <lis2mdl_read_reg>

  if(ret == 0){
    62bc:	b958      	cbnz	r0, 62d6 <lis2mdl_operating_mode_set+0x2a>
    reg.md = (uint8_t)val;
    62be:	f89d 3004 	ldrb.w	r3, [sp, #4]
    62c2:	f365 0301 	bfi	r3, r5, #0, #2
    62c6:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    62ca:	aa01      	add	r2, sp, #4
    62cc:	2301      	movs	r3, #1
    62ce:	2160      	movs	r1, #96	; 0x60
    62d0:	4620      	mov	r0, r4
    62d2:	f7ff ffcc 	bl	626e <lis2mdl_write_reg>
  }

  return ret;
}
    62d6:	b003      	add	sp, #12
    62d8:	bd30      	pop	{r4, r5, pc}

000062da <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
    62da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    62dc:	2301      	movs	r3, #1
{
    62de:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    62e0:	aa01      	add	r2, sp, #4
    62e2:	2160      	movs	r1, #96	; 0x60
{
    62e4:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    62e6:	f7ff ffbc 	bl	6262 <lis2mdl_read_reg>

  if(ret == 0){
    62ea:	b958      	cbnz	r0, 6304 <lis2mdl_data_rate_set+0x2a>
    reg.odr = (uint8_t)val;
    62ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
    62f0:	f365 0383 	bfi	r3, r5, #2, #2
    62f4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    62f8:	aa01      	add	r2, sp, #4
    62fa:	2301      	movs	r3, #1
    62fc:	2160      	movs	r1, #96	; 0x60
    62fe:	4620      	mov	r0, r4
    6300:	f7ff ffb5 	bl	626e <lis2mdl_write_reg>
  }

  return ret;
}
    6304:	b003      	add	sp, #12
    6306:	bd30      	pop	{r4, r5, pc}

00006308 <lis2mdl_offset_temp_comp_set>:
  * @param  val   change the values of comp_temp_en in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_offset_temp_comp_set(stmdev_ctx_t *ctx, uint8_t val)
{
    6308:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    630a:	2301      	movs	r3, #1
{
    630c:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    630e:	aa01      	add	r2, sp, #4
    6310:	2160      	movs	r1, #96	; 0x60
{
    6312:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    6314:	f7ff ffa5 	bl	6262 <lis2mdl_read_reg>

  if(ret == 0){
    6318:	b958      	cbnz	r0, 6332 <lis2mdl_offset_temp_comp_set+0x2a>
    reg.comp_temp_en = val;
    631a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    631e:	f365 13c7 	bfi	r3, r5, #7, #1
    6322:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    6326:	aa01      	add	r2, sp, #4
    6328:	2301      	movs	r3, #1
    632a:	2160      	movs	r1, #96	; 0x60
    632c:	4620      	mov	r0, r4
    632e:	f7ff ff9e 	bl	626e <lis2mdl_write_reg>
  }

  return ret;
}
    6332:	b003      	add	sp, #12
    6334:	bd30      	pop	{r4, r5, pc}

00006336 <lis2mdl_set_rst_mode_set>:
  * @param  val   change the values of set_rst in reg CFG_REG_B
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_set_rst_mode_set(stmdev_ctx_t *ctx, lis2mdl_set_rst_t val)
{
    6336:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_b_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
    6338:	2301      	movs	r3, #1
{
    633a:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
    633c:	aa01      	add	r2, sp, #4
    633e:	2161      	movs	r1, #97	; 0x61
{
    6340:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
    6342:	f7ff ff8e 	bl	6262 <lis2mdl_read_reg>

  if(ret == 0){
    6346:	b958      	cbnz	r0, 6360 <lis2mdl_set_rst_mode_set+0x2a>
    reg.set_rst = (uint8_t)val;
    6348:	f89d 3004 	ldrb.w	r3, [sp, #4]
    634c:	f365 0342 	bfi	r3, r5, #1, #2
    6350:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_B, (uint8_t*)&reg, 1);
    6354:	aa01      	add	r2, sp, #4
    6356:	2301      	movs	r3, #1
    6358:	2161      	movs	r1, #97	; 0x61
    635a:	4620      	mov	r0, r4
    635c:	f7ff ff87 	bl	626e <lis2mdl_write_reg>
  }

  return ret;
}
    6360:	b003      	add	sp, #12
    6362:	bd30      	pop	{r4, r5, pc}

00006364 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
    6364:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
    6366:	2301      	movs	r3, #1
{
    6368:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
    636a:	aa01      	add	r2, sp, #4
    636c:	2162      	movs	r1, #98	; 0x62
{
    636e:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
    6370:	f7ff ff77 	bl	6262 <lis2mdl_read_reg>

  if(ret == 0){
    6374:	b958      	cbnz	r0, 638e <lis2mdl_block_data_update_set+0x2a>
    reg.bdu = val;
    6376:	f89d 3004 	ldrb.w	r3, [sp, #4]
    637a:	f365 1304 	bfi	r3, r5, #4, #1
    637e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t*)&reg, 1);
    6382:	aa01      	add	r2, sp, #4
    6384:	2301      	movs	r3, #1
    6386:	2162      	movs	r1, #98	; 0x62
    6388:	4620      	mov	r0, r4
    638a:	f7ff ff70 	bl	626e <lis2mdl_write_reg>
  }

  return ret;
}
    638e:	b003      	add	sp, #12
    6390:	bd30      	pop	{r4, r5, pc}

00006392 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
    6392:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
    6394:	2306      	movs	r3, #6
{
    6396:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
    6398:	466a      	mov	r2, sp
    639a:	2168      	movs	r1, #104	; 0x68
    639c:	f7ff ff61 	bl	6262 <lis2mdl_read_reg>
  val[0] = (int16_t)buff[1];
    63a0:	f89d 2001 	ldrb.w	r2, [sp, #1]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
    63a4:	f89d 3000 	ldrb.w	r3, [sp]
    63a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    63ac:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
    63ae:	f89d 2003 	ldrb.w	r2, [sp, #3]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
    63b2:	f89d 3002 	ldrb.w	r3, [sp, #2]
    63b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    63ba:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
    63bc:	f89d 2005 	ldrb.w	r2, [sp, #5]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
    63c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    63c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    63c8:	80a3      	strh	r3, [r4, #4]

  return ret;
}
    63ca:	b002      	add	sp, #8
    63cc:	bd10      	pop	{r4, pc}

000063ce <lis2mdl_temperature_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_temperature_raw_get(stmdev_ctx_t *ctx,  int16_t *val)
{
    63ce:	b513      	push	{r0, r1, r4, lr}
  uint8_t buff[2];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_TEMP_OUT_L_REG, buff, 2);
    63d0:	2302      	movs	r3, #2
{
    63d2:	460c      	mov	r4, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_TEMP_OUT_L_REG, buff, 2);
    63d4:	aa01      	add	r2, sp, #4
    63d6:	216e      	movs	r1, #110	; 0x6e
    63d8:	f7ff ff43 	bl	6262 <lis2mdl_read_reg>
  *val = (int16_t)buff[1];
    63dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
  *val = (*val * 256) +  (int16_t)buff[0];
    63e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    63e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    63e8:	8023      	strh	r3, [r4, #0]

  return ret;
}
    63ea:	b002      	add	sp, #8
    63ec:	bd10      	pop	{r4, pc}

000063ee <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
    63ee:	460a      	mov	r2, r1
  int32_t ret;
  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
    63f0:	2301      	movs	r3, #1
    63f2:	214f      	movs	r1, #79	; 0x4f
    63f4:	f7ff bf35 	b.w	6262 <lis2mdl_read_reg>

000063f8 <lis2mdl_reset_set>:
  * @param  val   change the values of soft_rst in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
    63f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    63fa:	2301      	movs	r3, #1
{
    63fc:	460d      	mov	r5, r1
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    63fe:	aa01      	add	r2, sp, #4
    6400:	2160      	movs	r1, #96	; 0x60
{
    6402:	4604      	mov	r4, r0
  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    6404:	f7ff ff2d 	bl	6262 <lis2mdl_read_reg>

  if(ret == 0){
    6408:	b958      	cbnz	r0, 6422 <lis2mdl_reset_set+0x2a>
    reg.soft_rst = val;
    640a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    640e:	f365 1345 	bfi	r3, r5, #5, #1
    6412:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t*)&reg, 1);
    6416:	aa01      	add	r2, sp, #4
    6418:	2301      	movs	r3, #1
    641a:	2160      	movs	r1, #96	; 0x60
    641c:	4620      	mov	r0, r4
    641e:	f7ff ff26 	bl	626e <lis2mdl_write_reg>
  }

  return ret;
}
    6422:	b003      	add	sp, #12
    6424:	bd30      	pop	{r4, r5, pc}

00006426 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6426:	f7fc bd91 	b.w	2f4c <_DoInit>

0000642a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    642a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    642c:	f7ff fffb 	bl	6426 <SEGGER_RTT_Init>

	return 0;
}
    6430:	2000      	movs	r0, #0
    6432:	bd08      	pop	{r3, pc}

00006434 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6434:	2100      	movs	r1, #0
    6436:	2001      	movs	r0, #1
    6438:	f000 b800 	b.w	643c <z_arm_fatal_error>

0000643c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    643c:	f000 beb0 	b.w	71a0 <z_fatal_error>

00006440 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6440:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    6442:	6800      	ldr	r0, [r0, #0]
    6444:	f000 beac 	b.w	71a0 <z_fatal_error>

00006448 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    6448:	b508      	push	{r3, lr}
	handler();
    644a:	f7fc fea7 	bl	319c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    644e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6452:	f7fc bfef 	b.w	3434 <z_arm_exc_exit>

00006456 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6456:	3901      	subs	r1, #1
    6458:	4603      	mov	r3, r0
    645a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    645e:	b90a      	cbnz	r2, 6464 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6460:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6462:	4770      	bx	lr
		*d = *s;
    6464:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6468:	e7f7      	b.n	645a <strcpy+0x4>

0000646a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    646a:	4603      	mov	r3, r0
	size_t n = 0;
    646c:	2000      	movs	r0, #0

	while (*s != '\0') {
    646e:	5c1a      	ldrb	r2, [r3, r0]
    6470:	b902      	cbnz	r2, 6474 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6472:	4770      	bx	lr
		n++;
    6474:	3001      	adds	r0, #1
    6476:	e7fa      	b.n	646e <strlen+0x4>

00006478 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6478:	4603      	mov	r3, r0
	size_t n = 0;
    647a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    647c:	5c1a      	ldrb	r2, [r3, r0]
    647e:	b10a      	cbz	r2, 6484 <strnlen+0xc>
    6480:	4288      	cmp	r0, r1
    6482:	d100      	bne.n	6486 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6484:	4770      	bx	lr
		n++;
    6486:	3001      	adds	r0, #1
    6488:	e7f8      	b.n	647c <strnlen+0x4>

0000648a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    648a:	1e43      	subs	r3, r0, #1
    648c:	3901      	subs	r1, #1
    648e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    6492:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    6496:	4282      	cmp	r2, r0
    6498:	d101      	bne.n	649e <strcmp+0x14>
    649a:	2a00      	cmp	r2, #0
    649c:	d1f7      	bne.n	648e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    649e:	1a10      	subs	r0, r2, r0
    64a0:	4770      	bx	lr

000064a2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    64a2:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    64a4:	ea81 0400 	eor.w	r4, r1, r0
    64a8:	07a5      	lsls	r5, r4, #30
    64aa:	4603      	mov	r3, r0
    64ac:	d00b      	beq.n	64c6 <memcpy+0x24>
    64ae:	3b01      	subs	r3, #1
    64b0:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    64b2:	4291      	cmp	r1, r2
    64b4:	d11b      	bne.n	64ee <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    64b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    64b8:	2a00      	cmp	r2, #0
    64ba:	d0fc      	beq.n	64b6 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    64bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    64c0:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    64c4:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    64c6:	079c      	lsls	r4, r3, #30
    64c8:	d1f6      	bne.n	64b8 <memcpy+0x16>
    64ca:	f022 0403 	bic.w	r4, r2, #3
    64ce:	1f1d      	subs	r5, r3, #4
    64d0:	0896      	lsrs	r6, r2, #2
    64d2:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    64d4:	42b9      	cmp	r1, r7
    64d6:	d105      	bne.n	64e4 <memcpy+0x42>
    64d8:	f06f 0503 	mvn.w	r5, #3
    64dc:	fb05 2206 	mla	r2, r5, r6, r2
    64e0:	4423      	add	r3, r4
    64e2:	e7e4      	b.n	64ae <memcpy+0xc>
			*(d_word++) = *(s_word++);
    64e4:	f851 cb04 	ldr.w	ip, [r1], #4
    64e8:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    64ec:	e7f2      	b.n	64d4 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    64ee:	f811 4b01 	ldrb.w	r4, [r1], #1
    64f2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    64f6:	e7dc      	b.n	64b2 <memcpy+0x10>

000064f8 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    64f8:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    64fa:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    64fc:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    64fe:	079c      	lsls	r4, r3, #30
    6500:	d111      	bne.n	6526 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    6502:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    6506:	f022 0603 	bic.w	r6, r2, #3
    650a:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    650e:	441e      	add	r6, r3
    6510:	0894      	lsrs	r4, r2, #2
    6512:	42b3      	cmp	r3, r6
    6514:	d10d      	bne.n	6532 <memset+0x3a>
    6516:	f06f 0503 	mvn.w	r5, #3
    651a:	fb05 2204 	mla	r2, r5, r4, r2
    651e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    6520:	4293      	cmp	r3, r2
    6522:	d109      	bne.n	6538 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6524:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    6526:	2a00      	cmp	r2, #0
    6528:	d0fc      	beq.n	6524 <memset+0x2c>
		*(d_byte++) = c_byte;
    652a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    652e:	3a01      	subs	r2, #1
    6530:	e7e5      	b.n	64fe <memset+0x6>
		*(d_word++) = c_word;
    6532:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    6536:	e7ec      	b.n	6512 <memset+0x1a>
		*(d_byte++) = c_byte;
    6538:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    653c:	e7f0      	b.n	6520 <memset+0x28>

0000653e <_stdout_hook_default>:
}
    653e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6542:	4770      	bx	lr

00006544 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    6544:	f7fd b874 	b.w	3630 <z_impl_zephyr_fputc>

00006548 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    6548:	f7fe b80c 	b.w	4564 <SystemInit>

0000654c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    654c:	f000 001f 	and.w	r0, r0, #31
    6550:	0080      	lsls	r0, r0, #2
    6552:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    6556:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    655a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    655e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    6562:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    6566:	4770      	bx	lr

00006568 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6568:	6843      	ldr	r3, [r0, #4]
    656a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    656c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6570:	600b      	str	r3, [r1, #0]
}
    6572:	2000      	movs	r0, #0
    6574:	4770      	bx	lr

00006576 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6576:	6843      	ldr	r3, [r0, #4]
    6578:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    657a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    657e:	4042      	eors	r2, r0
    6580:	400a      	ands	r2, r1
    6582:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6584:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6588:	2000      	movs	r0, #0
    658a:	4770      	bx	lr

0000658c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    658c:	6843      	ldr	r3, [r0, #4]
    658e:	685b      	ldr	r3, [r3, #4]
}
    6590:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6592:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6596:	4770      	bx	lr

00006598 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6598:	6843      	ldr	r3, [r0, #4]
    659a:	685b      	ldr	r3, [r3, #4]
}
    659c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    659e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    65a2:	4770      	bx	lr

000065a4 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    65a4:	6843      	ldr	r3, [r0, #4]
    65a6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    65a8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    65ac:	404b      	eors	r3, r1
    p_reg->OUT = value;
    65ae:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    65b2:	2000      	movs	r0, #0
    65b4:	4770      	bx	lr

000065b6 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    65b6:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    65b8:	6858      	ldr	r0, [r3, #4]
{
    65ba:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    65bc:	b158      	cbz	r0, 65d6 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    65be:	2400      	movs	r4, #0
    65c0:	4281      	cmp	r1, r0
    65c2:	d113      	bne.n	65ec <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    65c4:	6808      	ldr	r0, [r1, #0]
    65c6:	b95c      	cbnz	r4, 65e0 <gpio_nrfx_manage_callback+0x2a>
    65c8:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    65ca:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    65cc:	42a1      	cmp	r1, r4
    65ce:	d100      	bne.n	65d2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    65d0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    65d2:	2000      	movs	r0, #0
    65d4:	6008      	str	r0, [r1, #0]
	if (set) {
    65d6:	b972      	cbnz	r2, 65f6 <gpio_nrfx_manage_callback+0x40>
	return 0;
    65d8:	2000      	movs	r0, #0
}
    65da:	bd30      	pop	{r4, r5, pc}
    65dc:	4628      	mov	r0, r5
    65de:	e7ef      	b.n	65c0 <gpio_nrfx_manage_callback+0xa>
    65e0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    65e2:	6898      	ldr	r0, [r3, #8]
    65e4:	4281      	cmp	r1, r0
	list->tail = node;
    65e6:	bf08      	it	eq
    65e8:	609c      	streq	r4, [r3, #8]
}
    65ea:	e7f2      	b.n	65d2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    65ec:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    65ee:	4604      	mov	r4, r0
    65f0:	2d00      	cmp	r5, #0
    65f2:	d1f3      	bne.n	65dc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    65f4:	b13a      	cbz	r2, 6606 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    65f6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    65f8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    65fa:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    65fc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    65fe:	2800      	cmp	r0, #0
    6600:	d1ea      	bne.n	65d8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6602:	6099      	str	r1, [r3, #8]
}
    6604:	e7e9      	b.n	65da <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6606:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    660a:	e7e6      	b.n	65da <gpio_nrfx_manage_callback+0x24>

0000660c <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    660c:	07ca      	lsls	r2, r1, #31
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
    660e:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
    6610:	d405      	bmi.n	661e <i2c_nrfx_twi_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
    6612:	f3c1 0242 	ubfx	r2, r1, #1, #3
    6616:	2a01      	cmp	r2, #1
    6618:	d004      	beq.n	6624 <i2c_nrfx_twi_configure+0x18>
    661a:	2a02      	cmp	r2, #2
    661c:	d00b      	beq.n	6636 <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
    661e:	f06f 0015 	mvn.w	r0, #21
}
    6622:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    6624:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    6626:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    662a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
    662e:	68c3      	ldr	r3, [r0, #12]
	return 0;
    6630:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
    6632:	6259      	str	r1, [r3, #36]	; 0x24
	return 0;
    6634:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    6636:	681b      	ldr	r3, [r3, #0]
    6638:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    663c:	e7f5      	b.n	662a <i2c_nrfx_twi_configure+0x1e>

0000663e <hts221_sample_fetch>:
{
    663e:	b570      	push	{r4, r5, r6, lr}
    6640:	4603      	mov	r3, r0
    6642:	b088      	sub	sp, #32
	struct hts221_data *data = dev->data;
    6644:	68c5      	ldr	r5, [r0, #12]
	if (i2c_burst_read(data->i2c, cfg->i2c_addr,
    6646:	685b      	ldr	r3, [r3, #4]
    6648:	6828      	ldr	r0, [r5, #0]
    664a:	889b      	ldrh	r3, [r3, #4]
    664c:	22a8      	movs	r2, #168	; 0xa8
    664e:	f88d 2003 	strb.w	r2, [sp, #3]
	msg[0].buf = (uint8_t *)write_buf;
    6652:	f10d 0203 	add.w	r2, sp, #3
    6656:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    6658:	2201      	movs	r2, #1
    665a:	9203      	str	r2, [sp, #12]
	msg[1].buf = (uint8_t *)read_buf;
    665c:	aa01      	add	r2, sp, #4
    665e:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
    6660:	2204      	movs	r2, #4
	msg[0].flags = I2C_MSG_WRITE;
    6662:	2400      	movs	r4, #0
	msg[1].len = num_read;
    6664:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6666:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    6668:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    666c:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    6670:	6882      	ldr	r2, [r0, #8]
    6672:	a902      	add	r1, sp, #8
    6674:	6856      	ldr	r6, [r2, #4]
    6676:	2202      	movs	r2, #2
    6678:	47b0      	blx	r6
    667a:	42a0      	cmp	r0, r4
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
    667c:	bfa3      	ittte	ge
    667e:	9b01      	ldrge	r3, [sp, #4]
    6680:	606b      	strge	r3, [r5, #4]
	return 0;
    6682:	4620      	movge	r0, r4
		return -EIO;
    6684:	f06f 0004 	mvnlt.w	r0, #4
}
    6688:	b008      	add	sp, #32
    668a:	bd70      	pop	{r4, r5, r6, pc}

0000668c <lis2dh_sample_fetch>:
{
    668c:	b538      	push	{r3, r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
    668e:	68c4      	ldr	r4, [r0, #12]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
    6690:	6863      	ldr	r3, [r4, #4]
    6692:	f104 0208 	add.w	r2, r4, #8
    6696:	681d      	ldr	r5, [r3, #0]
    6698:	2127      	movs	r1, #39	; 0x27
    669a:	2307      	movs	r3, #7
    669c:	47a8      	blx	r5
	if (status < 0) {
    669e:	2800      	cmp	r0, #0
    66a0:	db06      	blt.n	66b0 <lis2dh_sample_fetch+0x24>
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
    66a2:	7a23      	ldrb	r3, [r4, #8]
    66a4:	f013 0f0f 	tst.w	r3, #15
		return 0;
    66a8:	bf0c      	ite	eq
    66aa:	f06f 004d 	mvneq.w	r0, #77	; 0x4d
    66ae:	2000      	movne	r0, #0
}
    66b0:	bd38      	pop	{r3, r4, r5, pc}

000066b2 <z_impl_i2c_transfer>:
{
    66b2:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
    66b4:	6884      	ldr	r4, [r0, #8]
    66b6:	6864      	ldr	r4, [r4, #4]
    66b8:	46a4      	mov	ip, r4
}
    66ba:	bc10      	pop	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
    66bc:	4760      	bx	ip

000066be <lis2dh_i2c_write_data>:
{
    66be:	b530      	push	{r4, r5, lr}
    66c0:	4604      	mov	r4, r0
    66c2:	b089      	sub	sp, #36	; 0x24
    66c4:	461d      	mov	r5, r3
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
    66c6:	68c3      	ldr	r3, [r0, #12]
    66c8:	f061 017f 	orn	r1, r1, #127	; 0x7f
    66cc:	6818      	ldr	r0, [r3, #0]
    66ce:	6863      	ldr	r3, [r4, #4]
    66d0:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
    66d4:	f10d 0107 	add.w	r1, sp, #7
    66d8:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
    66da:	2101      	movs	r1, #1
    66dc:	891b      	ldrh	r3, [r3, #8]
    66de:	9103      	str	r1, [sp, #12]
    66e0:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    66e4:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    66e6:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    66e8:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    66ec:	f88d 201c 	strb.w	r2, [sp, #28]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
    66f0:	a902      	add	r1, sp, #8
    66f2:	f7ff ffde 	bl	66b2 <z_impl_i2c_transfer>
}
    66f6:	b009      	add	sp, #36	; 0x24
    66f8:	bd30      	pop	{r4, r5, pc}

000066fa <lis2dh_i2c_write_reg>:
{
    66fa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    66fc:	4603      	mov	r3, r0
	return i2c_reg_write_byte(data->bus,
    66fe:	68c0      	ldr	r0, [r0, #12]
    6700:	685b      	ldr	r3, [r3, #4]
    6702:	6800      	ldr	r0, [r0, #0]
	uint8_t tx_buf[2] = {reg_addr, value};
    6704:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
    6708:	2202      	movs	r2, #2
    670a:	891b      	ldrh	r3, [r3, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
    670c:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
    6710:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    6714:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6716:	f88d 200c 	strb.w	r2, [sp, #12]
    671a:	2201      	movs	r2, #1
    671c:	a901      	add	r1, sp, #4
    671e:	f7ff ffc8 	bl	66b2 <z_impl_i2c_transfer>
}
    6722:	b005      	add	sp, #20
    6724:	f85d fb04 	ldr.w	pc, [sp], #4

00006728 <lis2dh_i2c_update_reg>:
{
    6728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    672c:	4698      	mov	r8, r3
	return i2c_reg_update_byte(data->bus,
    672e:	68c3      	ldr	r3, [r0, #12]
    6730:	f8d3 9000 	ldr.w	r9, [r3]
				   cfg->bus_cfg.i2c_slv_addr,
    6734:	6843      	ldr	r3, [r0, #4]
{
    6736:	b088      	sub	sp, #32
    6738:	f893 a008 	ldrb.w	sl, [r3, #8]
    673c:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
    6740:	2300      	movs	r3, #0
	msg[0].len = num_write;
    6742:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
    6744:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
    6748:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
    674c:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[0].buf = (uint8_t *)write_buf;
    6750:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6752:	2307      	movs	r3, #7
    6754:	460e      	mov	r6, r1
    6756:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
    6758:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
    675a:	9703      	str	r7, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    675c:	f88d 301c 	strb.w	r3, [sp, #28]
    6760:	2202      	movs	r2, #2
    6762:	4653      	mov	r3, sl
    6764:	a902      	add	r1, sp, #8
    6766:	4648      	mov	r0, r9
    6768:	f7ff ffa3 	bl	66b2 <z_impl_i2c_transfer>
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
    676c:	b9b8      	cbnz	r0, 679e <lis2dh_i2c_update_reg+0x76>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
    676e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6772:	ea23 0104 	bic.w	r1, r3, r4
    6776:	ea04 0408 	and.w	r4, r4, r8
    677a:	430c      	orrs	r4, r1
	if (new_value == old_value) {
    677c:	42a3      	cmp	r3, r4
    677e:	d00e      	beq.n	679e <lis2dh_i2c_update_reg+0x76>
	msg.len = num_bytes;
    6780:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    6782:	f88d 6004 	strb.w	r6, [sp, #4]
    6786:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
    678a:	9502      	str	r5, [sp, #8]
	msg.len = num_bytes;
    678c:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    678e:	f88d 3010 	strb.w	r3, [sp, #16]
    6792:	4653      	mov	r3, sl
    6794:	463a      	mov	r2, r7
    6796:	a902      	add	r1, sp, #8
    6798:	4648      	mov	r0, r9
    679a:	f7ff ff8a 	bl	66b2 <z_impl_i2c_transfer>
}
    679e:	b008      	add	sp, #32
    67a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000067a4 <lis2dh_i2c_read_reg>:
{
    67a4:	b510      	push	{r4, lr}
    67a6:	4603      	mov	r3, r0
    67a8:	b088      	sub	sp, #32
	return i2c_reg_read_byte(data->bus,
    67aa:	68c0      	ldr	r0, [r0, #12]
    67ac:	685b      	ldr	r3, [r3, #4]
    67ae:	6800      	ldr	r0, [r0, #0]
    67b0:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    67b4:	f10d 0107 	add.w	r1, sp, #7
    67b8:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    67ba:	2101      	movs	r1, #1
    67bc:	891b      	ldrh	r3, [r3, #8]
    67be:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
    67c0:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    67c4:	2400      	movs	r4, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    67c6:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    67c8:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    67cc:	f88d 201c 	strb.w	r2, [sp, #28]
    67d0:	2202      	movs	r2, #2
    67d2:	a902      	add	r1, sp, #8
    67d4:	f7ff ff6d 	bl	66b2 <z_impl_i2c_transfer>
}
    67d8:	b008      	add	sp, #32
    67da:	bd10      	pop	{r4, pc}

000067dc <lis2dh_i2c_read_data>:
{
    67dc:	b530      	push	{r4, r5, lr}
    67de:	4604      	mov	r4, r0
    67e0:	b089      	sub	sp, #36	; 0x24
    67e2:	461d      	mov	r5, r3
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
    67e4:	68c3      	ldr	r3, [r0, #12]
    67e6:	f061 017f 	orn	r1, r1, #127	; 0x7f
    67ea:	6818      	ldr	r0, [r3, #0]
    67ec:	6863      	ldr	r3, [r4, #4]
    67ee:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    67f2:	f10d 0107 	add.w	r1, sp, #7
    67f6:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    67f8:	2101      	movs	r1, #1
    67fa:	891b      	ldrh	r3, [r3, #8]
    67fc:	9103      	str	r1, [sp, #12]
    67fe:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    6802:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6804:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    6806:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    680a:	f88d 201c 	strb.w	r2, [sp, #28]
    680e:	2202      	movs	r2, #2
    6810:	a902      	add	r1, sp, #8
    6812:	f7ff ff4e 	bl	66b2 <z_impl_i2c_transfer>
}
    6816:	b009      	add	sp, #36	; 0x24
    6818:	bd30      	pop	{r4, r5, pc}

0000681a <lis2mdl_sample_fetch_mag.isra.0>:
	}

	return 0;
}

static int lis2mdl_sample_fetch_mag(const struct device *dev)
    681a:	b513      	push	{r0, r1, r4, lr}
    681c:	4604      	mov	r4, r0
{
	struct lis2mdl_data *lis2mdl = dev->data;
	int16_t raw_mag[3];

	/* fetch raw data sample */
	if (lis2mdl_magnetic_raw_get(lis2mdl->ctx, raw_mag) < 0) {
    681e:	4669      	mov	r1, sp
    6820:	6940      	ldr	r0, [r0, #20]
    6822:	f7ff fdb6 	bl	6392 <lis2mdl_magnetic_raw_get>
    6826:	2800      	cmp	r0, #0
		LOG_DBG("Failed to read sample");
		return -EIO;
	}

	lis2mdl->mag[0] = sys_le16_to_cpu(raw_mag[0]);
    6828:	bfa1      	itttt	ge
    682a:	f8bd 3000 	ldrhge.w	r3, [sp]
    682e:	8163      	strhge	r3, [r4, #10]
	lis2mdl->mag[1] = sys_le16_to_cpu(raw_mag[1]);
    6830:	f8bd 3002 	ldrhge.w	r3, [sp, #2]
    6834:	81a3      	strhge	r3, [r4, #12]
	lis2mdl->mag[2] = sys_le16_to_cpu(raw_mag[2]);
    6836:	bfa3      	ittte	ge
    6838:	f8bd 3004 	ldrhge.w	r3, [sp, #4]
    683c:	81e3      	strhge	r3, [r4, #14]

	return 0;
    683e:	2000      	movge	r0, #0
		return -EIO;
    6840:	f06f 0004 	mvnlt.w	r0, #4
}
    6844:	b002      	add	sp, #8
    6846:	bd10      	pop	{r4, pc}

00006848 <lis2mdl_sample_fetch_temp.isra.0>:

static int lis2mdl_sample_fetch_temp(const struct device *dev)
    6848:	b513      	push	{r0, r1, r4, lr}
    684a:	4604      	mov	r4, r0
	struct lis2mdl_data *lis2mdl = dev->data;
	int16_t raw_temp;
	int32_t temp;

	/* fetch raw temperature sample */
	if (lis2mdl_temperature_raw_get(lis2mdl->ctx, &raw_temp) < 0) {
    684c:	f10d 0106 	add.w	r1, sp, #6
    6850:	6940      	ldr	r0, [r0, #20]
    6852:	f7ff fdbc 	bl	63ce <lis2mdl_temperature_raw_get>
    6856:	2800      	cmp	r0, #0
    6858:	db0d      	blt.n	6876 <lis2mdl_sample_fetch_temp.isra.0+0x2e>
		LOG_DBG("Failed to read sample");
		return -EIO;
	}

	/* formula is temp = 25 + (temp / 8) C */
	temp = (sys_le16_to_cpu(raw_temp) & 0x8FFF);
    685a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
    685e:	f648 72ff 	movw	r2, #36863	; 0x8fff
    6862:	401a      	ands	r2, r3
	lis2mdl->temp_sample = 2500 + (temp * 100) / 8;
    6864:	2364      	movs	r3, #100	; 0x64
    6866:	4353      	muls	r3, r2
    6868:	10db      	asrs	r3, r3, #3
    686a:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
    686e:	6123      	str	r3, [r4, #16]

	return 0;
    6870:	2000      	movs	r0, #0
}
    6872:	b002      	add	sp, #8
    6874:	bd10      	pop	{r4, pc}
		return -EIO;
    6876:	f06f 0004 	mvn.w	r0, #4
    687a:	e7fa      	b.n	6872 <lis2mdl_sample_fetch_temp.isra.0+0x2a>

0000687c <lis2mdl_sample_fetch>:

static int lis2mdl_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
	switch (chan) {
    687c:	290c      	cmp	r1, #12
{
    687e:	b510      	push	{r4, lr}
    6880:	4604      	mov	r4, r0
	switch (chan) {
    6882:	d00b      	beq.n	689c <lis2mdl_sample_fetch+0x20>
    6884:	d805      	bhi.n	6892 <lis2mdl_sample_fetch+0x16>
    6886:	3908      	subs	r1, #8
    6888:	2903      	cmp	r1, #3
    688a:	d90b      	bls.n	68a4 <lis2mdl_sample_fetch+0x28>
    688c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6890:	e00c      	b.n	68ac <lis2mdl_sample_fetch+0x30>
    6892:	2938      	cmp	r1, #56	; 0x38
    6894:	d1fa      	bne.n	688c <lis2mdl_sample_fetch+0x10>
		break;
	case SENSOR_CHAN_DIE_TEMP:
		lis2mdl_sample_fetch_temp(dev);
		break;
	case SENSOR_CHAN_ALL:
		lis2mdl_sample_fetch_mag(dev);
    6896:	68c0      	ldr	r0, [r0, #12]
    6898:	f7ff ffbf 	bl	681a <lis2mdl_sample_fetch_mag.isra.0>
		lis2mdl_sample_fetch_temp(dev);
    689c:	68e0      	ldr	r0, [r4, #12]
    689e:	f7ff ffd3 	bl	6848 <lis2mdl_sample_fetch_temp.isra.0>
    68a2:	e002      	b.n	68aa <lis2mdl_sample_fetch+0x2e>
		lis2mdl_sample_fetch_mag(dev);
    68a4:	68c0      	ldr	r0, [r0, #12]
    68a6:	f7ff ffb8 	bl	681a <lis2mdl_sample_fetch_mag.isra.0>
		lis2mdl_sample_fetch_temp(dev);
    68aa:	2000      	movs	r0, #0
	default:
		return -ENOTSUP;
	}

	return 0;
}
    68ac:	bd10      	pop	{r4, pc}

000068ae <lis2mdl_attr_set>:
{
    68ae:	b513      	push	{r0, r1, r4, lr}
    68b0:	460c      	mov	r4, r1
	switch (chan) {
    68b2:	2c0b      	cmp	r4, #11
{
    68b4:	4611      	mov	r1, r2
	switch (chan) {
    68b6:	d804      	bhi.n	68c2 <lis2mdl_attr_set+0x14>
    68b8:	2c07      	cmp	r4, #7
    68ba:	d804      	bhi.n	68c6 <lis2mdl_attr_set+0x18>
    68bc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    68c0:	e029      	b.n	6916 <lis2mdl_attr_set+0x68>
    68c2:	2c38      	cmp	r4, #56	; 0x38
    68c4:	d1fa      	bne.n	68bc <lis2mdl_attr_set+0xe>
	switch (attr) {
    68c6:	b181      	cbz	r1, 68ea <lis2mdl_attr_set+0x3c>
    68c8:	2907      	cmp	r1, #7
    68ca:	d1f7      	bne.n	68bc <lis2mdl_attr_set+0xe>
		offset[i] = sys_cpu_to_le16(val->val1);
    68cc:	6819      	ldr	r1, [r3, #0]
		return lis2mdl_set_hard_iron(dev, chan, val);
    68ce:	68c2      	ldr	r2, [r0, #12]
		offset[i] = sys_cpu_to_le16(val->val1);
    68d0:	f8ad 1000 	strh.w	r1, [sp]
    68d4:	6899      	ldr	r1, [r3, #8]
    68d6:	f8ad 1002 	strh.w	r1, [sp, #2]
    68da:	691b      	ldr	r3, [r3, #16]
	return lis2mdl_mag_user_offset_set(lis2mdl->ctx, offset);
    68dc:	6950      	ldr	r0, [r2, #20]
		offset[i] = sys_cpu_to_le16(val->val1);
    68de:	f8ad 3004 	strh.w	r3, [sp, #4]
	return lis2mdl_mag_user_offset_set(lis2mdl->ctx, offset);
    68e2:	4669      	mov	r1, sp
    68e4:	f7ff fcc9 	bl	627a <lis2mdl_mag_user_offset_set>
		return lis2mdl_set_hard_iron(dev, chan, val);
    68e8:	e015      	b.n	6916 <lis2mdl_attr_set+0x68>
		return lis2mdl_set_odr(dev, val);
    68ea:	681b      	ldr	r3, [r3, #0]
	switch (val->val1) {
    68ec:	2b32      	cmp	r3, #50	; 0x32
    68ee:	d014      	beq.n	691a <lis2mdl_attr_set+0x6c>
    68f0:	dc06      	bgt.n	6900 <lis2mdl_attr_set+0x52>
    68f2:	2b0a      	cmp	r3, #10
    68f4:	d007      	beq.n	6906 <lis2mdl_attr_set+0x58>
    68f6:	2b14      	cmp	r3, #20
    68f8:	d011      	beq.n	691e <lis2mdl_attr_set+0x70>
    68fa:	f06f 0015 	mvn.w	r0, #21
    68fe:	e00a      	b.n	6916 <lis2mdl_attr_set+0x68>
    6900:	2b64      	cmp	r3, #100	; 0x64
    6902:	d1fa      	bne.n	68fa <lis2mdl_attr_set+0x4c>
		odr = LIS2MDL_ODR_100Hz;
    6904:	2103      	movs	r1, #3
	if (lis2mdl_data_rate_set(lis2mdl->ctx, odr)) {
    6906:	68c3      	ldr	r3, [r0, #12]
    6908:	6958      	ldr	r0, [r3, #20]
    690a:	f7ff fce6 	bl	62da <lis2mdl_data_rate_set>
		return -EIO;
    690e:	2800      	cmp	r0, #0
    6910:	bf18      	it	ne
    6912:	f06f 0004 	mvnne.w	r0, #4
}
    6916:	b002      	add	sp, #8
    6918:	bd10      	pop	{r4, pc}
		odr = LIS2MDL_ODR_50Hz;
    691a:	2102      	movs	r1, #2
    691c:	e7f3      	b.n	6906 <lis2mdl_attr_set+0x58>
	switch (val->val1) {
    691e:	2101      	movs	r1, #1
    6920:	e7f1      	b.n	6906 <lis2mdl_attr_set+0x58>

00006922 <lis2mdl_init>:
#error "BUS MACRO NOT DEFINED IN DTS"
#endif
};

static int lis2mdl_init(const struct device *dev)
{
    6922:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct lis2mdl_data *lis2mdl = dev->data;
    6924:	68c4      	ldr	r4, [r0, #12]
	const struct lis2mdl_config *const config = dev->config;
    6926:	6846      	ldr	r6, [r0, #4]
	uint8_t wai;

	lis2mdl->dev = dev;
    6928:	6020      	str	r0, [r4, #0]
{
    692a:	4605      	mov	r5, r0
	lis2mdl->bus = device_get_binding(config->master_dev_name);
    692c:	6830      	ldr	r0, [r6, #0]
    692e:	f7fe fa9f 	bl	4e70 <z_impl_device_get_binding>
    6932:	6060      	str	r0, [r4, #4]
	if (!lis2mdl->bus) {
    6934:	b918      	cbnz	r0, 693e <lis2mdl_init+0x1c>

	if (lis2mdl_init_interface(dev)) {
		return -EINVAL;
    6936:	f06f 0015 	mvn.w	r0, #21
		return -EIO;
	}
#endif

	return 0;
}
    693a:	b002      	add	sp, #8
    693c:	bd70      	pop	{r4, r5, r6, pc}
	return config->bus_init(dev);
    693e:	4628      	mov	r0, r5
    6940:	6873      	ldr	r3, [r6, #4]
    6942:	4798      	blx	r3
	if (lis2mdl_init_interface(dev)) {
    6944:	4605      	mov	r5, r0
    6946:	2800      	cmp	r0, #0
    6948:	d1f5      	bne.n	6936 <lis2mdl_init+0x14>
	if (lis2mdl_device_id_get(lis2mdl->ctx, &wai) < 0) {
    694a:	6960      	ldr	r0, [r4, #20]
    694c:	f10d 0107 	add.w	r1, sp, #7
    6950:	f7ff fd4d 	bl	63ee <lis2mdl_device_id_get>
    6954:	2800      	cmp	r0, #0
    6956:	db27      	blt.n	69a8 <lis2mdl_init+0x86>
	if (wai != LIS2MDL_ID) {
    6958:	f89d 3007 	ldrb.w	r3, [sp, #7]
    695c:	2b40      	cmp	r3, #64	; 0x40
    695e:	d1ea      	bne.n	6936 <lis2mdl_init+0x14>
	if (lis2mdl_reset_set(lis2mdl->ctx, PROPERTY_ENABLE) < 0) {
    6960:	6960      	ldr	r0, [r4, #20]
    6962:	2101      	movs	r1, #1
    6964:	f7ff fd48 	bl	63f8 <lis2mdl_reset_set>
    6968:	2800      	cmp	r0, #0
    696a:	db1d      	blt.n	69a8 <lis2mdl_init+0x86>
	z_impl_k_busy_wait(usec_to_wait);
    696c:	2064      	movs	r0, #100	; 0x64
    696e:	f000 fcf2 	bl	7356 <z_impl_k_busy_wait>
	if (lis2mdl_block_data_update_set(lis2mdl->ctx, PROPERTY_ENABLE) < 0) {
    6972:	6960      	ldr	r0, [r4, #20]
    6974:	2101      	movs	r1, #1
    6976:	f7ff fcf5 	bl	6364 <lis2mdl_block_data_update_set>
    697a:	2800      	cmp	r0, #0
    697c:	db14      	blt.n	69a8 <lis2mdl_init+0x86>
	if (lis2mdl_data_rate_set(lis2mdl->ctx, LIS2MDL_ODR_10Hz)) {
    697e:	6960      	ldr	r0, [r4, #20]
    6980:	4629      	mov	r1, r5
    6982:	f7ff fcaa 	bl	62da <lis2mdl_data_rate_set>
    6986:	b978      	cbnz	r0, 69a8 <lis2mdl_init+0x86>
	if (lis2mdl_set_rst_mode_set(lis2mdl->ctx,
    6988:	6960      	ldr	r0, [r4, #20]
    698a:	2101      	movs	r1, #1
    698c:	f7ff fcd3 	bl	6336 <lis2mdl_set_rst_mode_set>
    6990:	b950      	cbnz	r0, 69a8 <lis2mdl_init+0x86>
	if (lis2mdl_offset_temp_comp_set(lis2mdl->ctx, PROPERTY_ENABLE)) {
    6992:	2101      	movs	r1, #1
    6994:	6960      	ldr	r0, [r4, #20]
    6996:	f7ff fcb7 	bl	6308 <lis2mdl_offset_temp_comp_set>
    699a:	4601      	mov	r1, r0
    699c:	b920      	cbnz	r0, 69a8 <lis2mdl_init+0x86>
	if (lis2mdl_operating_mode_set(lis2mdl->ctx, LIS2MDL_CONTINUOUS_MODE)) {
    699e:	6960      	ldr	r0, [r4, #20]
    69a0:	f7ff fc84 	bl	62ac <lis2mdl_operating_mode_set>
    69a4:	2800      	cmp	r0, #0
    69a6:	d0c8      	beq.n	693a <lis2mdl_init+0x18>
		return -EIO;
    69a8:	f06f 0004 	mvn.w	r0, #4
    69ac:	e7c5      	b.n	693a <lis2mdl_init+0x18>

000069ae <lis2mdl_i2c_read>:
{
    69ae:	b530      	push	{r4, r5, lr}
    69b0:	461d      	mov	r5, r3
	const struct lis2mdl_config *cfg = data->dev->config;
    69b2:	e9d0 3000 	ldrd	r3, r0, [r0]
{
    69b6:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_read(data->bus, cfg->i2c_slv_addr,
    69b8:	685b      	ldr	r3, [r3, #4]
    69ba:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    69be:	f10d 0107 	add.w	r1, sp, #7
    69c2:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
    69c4:	2101      	movs	r1, #1
    69c6:	891b      	ldrh	r3, [r3, #8]
    69c8:	9103      	str	r1, [sp, #12]
    69ca:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    69ce:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    69d0:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    69d2:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    69d6:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    69da:	6882      	ldr	r2, [r0, #8]
    69dc:	a902      	add	r1, sp, #8
    69de:	6854      	ldr	r4, [r2, #4]
    69e0:	2202      	movs	r2, #2
    69e2:	47a0      	blx	r4
}
    69e4:	b009      	add	sp, #36	; 0x24
    69e6:	bd30      	pop	{r4, r5, pc}

000069e8 <lis2mdl_i2c_write>:
{
    69e8:	b530      	push	{r4, r5, lr}
    69ea:	461d      	mov	r5, r3
	const struct lis2mdl_config *cfg = data->dev->config;
    69ec:	e9d0 3000 	ldrd	r3, r0, [r0]
{
    69f0:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write(data->bus, cfg->i2c_slv_addr,
    69f2:	685b      	ldr	r3, [r3, #4]
    69f4:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
    69f8:	f10d 0107 	add.w	r1, sp, #7
    69fc:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
    69fe:	2101      	movs	r1, #1
    6a00:	891b      	ldrh	r3, [r3, #8]
    6a02:	9103      	str	r1, [sp, #12]
    6a04:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    6a08:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6a0a:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    6a0c:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6a10:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    6a14:	6881      	ldr	r1, [r0, #8]
    6a16:	684c      	ldr	r4, [r1, #4]
    6a18:	a902      	add	r1, sp, #8
    6a1a:	47a0      	blx	r4
}
    6a1c:	b009      	add	sp, #36	; 0x24
    6a1e:	bd30      	pop	{r4, r5, pc}

00006a20 <lps22hb_sample_fetch>:
{
    6a20:	b570      	push	{r4, r5, r6, lr}
    6a22:	4603      	mov	r3, r0
    6a24:	b08a      	sub	sp, #40	; 0x28
	struct lps22hb_data *data = dev->data;
    6a26:	68c5      	ldr	r5, [r0, #12]
	if (i2c_burst_read(data->i2c_master, config->i2c_slave_addr,
    6a28:	685b      	ldr	r3, [r3, #4]
    6a2a:	6828      	ldr	r0, [r5, #0]
    6a2c:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
    6a2e:	2228      	movs	r2, #40	; 0x28
    6a30:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    6a34:	f10d 0207 	add.w	r2, sp, #7
    6a38:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
    6a3a:	2201      	movs	r2, #1
    6a3c:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
    6a3e:	aa02      	add	r2, sp, #8
    6a40:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
    6a42:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
    6a44:	2400      	movs	r4, #0
	msg[1].len = num_read;
    6a46:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6a48:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    6a4a:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6a4e:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return api->transfer(dev, msgs, num_msgs, addr);
    6a52:	6882      	ldr	r2, [r0, #8]
    6a54:	a904      	add	r1, sp, #16
    6a56:	6856      	ldr	r6, [r2, #4]
    6a58:	2202      	movs	r2, #2
    6a5a:	47b0      	blx	r6
    6a5c:	42a0      	cmp	r0, r4
    6a5e:	db14      	blt.n	6a8a <lps22hb_sample_fetch+0x6a>
				     ((uint32_t)(out[2]) << 16));
    6a60:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
    6a64:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
    6a68:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
    6a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
    6a6e:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
    6a72:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
    6a74:	606b      	str	r3, [r5, #4]
				    ((uint16_t)(out[4]) << 8));
    6a76:	f89d 200c 	ldrb.w	r2, [sp, #12]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
    6a7a:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6a7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6a82:	812b      	strh	r3, [r5, #8]
	return 0;
    6a84:	4620      	mov	r0, r4
}
    6a86:	b00a      	add	sp, #40	; 0x28
    6a88:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6a8a:	f06f 0004 	mvn.w	r0, #4
    6a8e:	e7fa      	b.n	6a86 <lps22hb_sample_fetch+0x66>

00006a90 <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
    6a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a94:	b089      	sub	sp, #36	; 0x24
    6a96:	4698      	mov	r8, r3
	msg[0].flags = I2C_MSG_WRITE;
    6a98:	2300      	movs	r3, #0
	msg[0].len = num_write;
    6a9a:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
    6a9c:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
    6aa0:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
    6aa4:	e9cd 3705 	strd	r3, r7, [sp, #20]
    6aa8:	f04f 0910 	mov.w	r9, #16
	msg[0].buf = (uint8_t *)write_buf;
    6aac:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6aae:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
    6ab0:	4606      	mov	r6, r0
    6ab2:	4614      	mov	r4, r2
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
    6ab4:	468a      	mov	sl, r1
    6ab6:	f88d 9004 	strb.w	r9, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
    6aba:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
    6abc:	9703      	str	r7, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6abe:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    6ac2:	6883      	ldr	r3, [r0, #8]
    6ac4:	2202      	movs	r2, #2
    6ac6:	f8d3 b004 	ldr.w	fp, [r3, #4]
    6aca:	460b      	mov	r3, r1
    6acc:	a902      	add	r1, sp, #8
    6ace:	47d8      	blx	fp
	if (rc != 0) {
    6ad0:	b9c0      	cbnz	r0, 6b04 <i2c_reg_update_byte.constprop.0+0x74>
	new_value = (old_value & ~mask) | (value & mask);
    6ad2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6ad6:	ea23 0104 	bic.w	r1, r3, r4
    6ada:	ea04 0408 	and.w	r4, r4, r8
    6ade:	430c      	orrs	r4, r1
	if (new_value == old_value) {
    6ae0:	42a3      	cmp	r3, r4
    6ae2:	d00f      	beq.n	6b04 <i2c_reg_update_byte.constprop.0+0x74>
	msg.len = num_bytes;
    6ae4:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    6ae6:	f88d 9004 	strb.w	r9, [sp, #4]
    6aea:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
    6aee:	9502      	str	r5, [sp, #8]
	msg.len = num_bytes;
    6af0:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6af2:	f88d 3010 	strb.w	r3, [sp, #16]
	return api->transfer(dev, msgs, num_msgs, addr);
    6af6:	68b3      	ldr	r3, [r6, #8]
    6af8:	463a      	mov	r2, r7
    6afa:	685c      	ldr	r4, [r3, #4]
    6afc:	a902      	add	r1, sp, #8
    6afe:	4653      	mov	r3, sl
    6b00:	4630      	mov	r0, r6
    6b02:	47a0      	blx	r4
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
}
    6b04:	b009      	add	sp, #36	; 0x24
    6b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006b0a <lps22hb_init>:
err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
{
    6b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct lps22hb_config * const config = dev->config;
	struct lps22hb_data *data = dev->data;

	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
    6b0e:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
    6b10:	68c5      	ldr	r5, [r0, #12]
{
    6b12:	4604      	mov	r4, r0
    6b14:	b088      	sub	sp, #32
	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
    6b16:	6818      	ldr	r0, [r3, #0]
    6b18:	f7fe f9aa 	bl	4e70 <z_impl_device_get_binding>
    6b1c:	6028      	str	r0, [r5, #0]

	if (!data->i2c_master) {
    6b1e:	2800      	cmp	r0, #0
    6b20:	d03a      	beq.n	6b98 <lps22hb_init+0x8e>
	struct lps22hb_data *data = dev->data;
    6b22:	68e6      	ldr	r6, [r4, #12]
	const struct lps22hb_config *config = dev->config;
    6b24:	6867      	ldr	r7, [r4, #4]
	if (i2c_reg_read_byte(data->i2c_master, config->i2c_slave_addr,
    6b26:	6830      	ldr	r0, [r6, #0]
    6b28:	88bb      	ldrh	r3, [r7, #4]
    6b2a:	220f      	movs	r2, #15
    6b2c:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
    6b30:	f10d 0207 	add.w	r2, sp, #7
    6b34:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
    6b36:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
    6b3a:	2201      	movs	r2, #1
	msg[1].len = num_read;
    6b3c:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = num_write;
    6b40:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    6b42:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6b44:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
    6b46:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6b4a:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    6b4e:	6882      	ldr	r2, [r0, #8]
    6b50:	a902      	add	r1, sp, #8
    6b52:	f8d2 8004 	ldr.w	r8, [r2, #4]
    6b56:	2202      	movs	r2, #2
    6b58:	47c0      	blx	r8
    6b5a:	42a8      	cmp	r0, r5
    6b5c:	da04      	bge.n	6b68 <lps22hb_init+0x5e>
		return -EINVAL;
	}

	if (lps22hb_init_chip(dev) < 0) {
		LOG_DBG("Failed to initialize chip");
		return -EIO;
    6b5e:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
    6b62:	b008      	add	sp, #32
    6b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
    6b68:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6b6c:	2bb1      	cmp	r3, #177	; 0xb1
    6b6e:	d1f6      	bne.n	6b5e <lps22hb_init+0x54>
	return i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
    6b70:	6861      	ldr	r1, [r4, #4]
    6b72:	68e0      	ldr	r0, [r4, #12]
    6b74:	7909      	ldrb	r1, [r1, #4]
    6b76:	6800      	ldr	r0, [r0, #0]
    6b78:	2330      	movs	r3, #48	; 0x30
    6b7a:	2270      	movs	r2, #112	; 0x70
    6b7c:	f7ff ff88 	bl	6a90 <i2c_reg_update_byte.constprop.0>
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
    6b80:	2800      	cmp	r0, #0
    6b82:	dbec      	blt.n	6b5e <lps22hb_init+0x54>
	if (i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
    6b84:	2302      	movs	r3, #2
    6b86:	7939      	ldrb	r1, [r7, #4]
    6b88:	6830      	ldr	r0, [r6, #0]
    6b8a:	461a      	mov	r2, r3
    6b8c:	f7ff ff80 	bl	6a90 <i2c_reg_update_byte.constprop.0>
    6b90:	2800      	cmp	r0, #0
    6b92:	dbe4      	blt.n	6b5e <lps22hb_init+0x54>
	return 0;
    6b94:	4628      	mov	r0, r5
    6b96:	e7e4      	b.n	6b62 <lps22hb_init+0x58>
		return -EINVAL;
    6b98:	f06f 0015 	mvn.w	r0, #21
    6b9c:	e7e1      	b.n	6b62 <lps22hb_init+0x58>

00006b9e <lsm6dsl_accel_set_fs_raw>:
{
    6b9e:	b570      	push	{r4, r5, r6, lr}
	struct lsm6dsl_data *data = dev->data;
    6ba0:	68c5      	ldr	r5, [r0, #12]
	if (data->hw_tf->update_reg(dev,
    6ba2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6ba4:	008b      	lsls	r3, r1, #2
    6ba6:	68d6      	ldr	r6, [r2, #12]
{
    6ba8:	460c      	mov	r4, r1
	if (data->hw_tf->update_reg(dev,
    6baa:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    6bae:	220c      	movs	r2, #12
    6bb0:	2110      	movs	r1, #16
    6bb2:	47b0      	blx	r6
    6bb4:	2800      	cmp	r0, #0
	data->accel_fs = fs;
    6bb6:	bfa6      	itte	ge
    6bb8:	f885 402a 	strbge.w	r4, [r5, #42]	; 0x2a
	return 0;
    6bbc:	2000      	movge	r0, #0
		return -EIO;
    6bbe:	f06f 0004 	mvnlt.w	r0, #4
}
    6bc2:	bd70      	pop	{r4, r5, r6, pc}

00006bc4 <lsm6dsl_gyro_set_fs_raw>:
	if (fs == GYRO_FULLSCALE_125) {
    6bc4:	68c3      	ldr	r3, [r0, #12]
    6bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6bc8:	2904      	cmp	r1, #4
{
    6bca:	b510      	push	{r4, lr}
    6bcc:	68dc      	ldr	r4, [r3, #12]
	if (fs == GYRO_FULLSCALE_125) {
    6bce:	d109      	bne.n	6be4 <lsm6dsl_gyro_set_fs_raw+0x20>
		if (data->hw_tf->update_reg(dev,
    6bd0:	2302      	movs	r3, #2
    6bd2:	461a      	mov	r2, r3
    6bd4:	2111      	movs	r1, #17
    6bd6:	47a0      	blx	r4
    6bd8:	2800      	cmp	r0, #0
			return -EIO;
    6bda:	bfb4      	ite	lt
    6bdc:	f06f 0004 	mvnlt.w	r0, #4
	return 0;
    6be0:	2000      	movge	r0, #0
}
    6be2:	bd10      	pop	{r4, pc}
		if (data->hw_tf->update_reg(dev,
    6be4:	0089      	lsls	r1, r1, #2
    6be6:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
    6bea:	220c      	movs	r2, #12
    6bec:	e7f2      	b.n	6bd4 <lsm6dsl_gyro_set_fs_raw+0x10>

00006bee <lsm6dsl_gyro_set_odr_raw>:
	if (data->hw_tf->update_reg(dev,
    6bee:	68c2      	ldr	r2, [r0, #12]
    6bf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
    6bf2:	010b      	lsls	r3, r1, #4
{
    6bf4:	b510      	push	{r4, lr}
	if (data->hw_tf->update_reg(dev,
    6bf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    6bfa:	68d4      	ldr	r4, [r2, #12]
    6bfc:	2111      	movs	r1, #17
    6bfe:	22f0      	movs	r2, #240	; 0xf0
    6c00:	47a0      	blx	r4
    6c02:	2800      	cmp	r0, #0
}
    6c04:	bfb4      	ite	lt
    6c06:	f06f 0004 	mvnlt.w	r0, #4
    6c0a:	2000      	movge	r0, #0
    6c0c:	bd10      	pop	{r4, pc}

00006c0e <lsm6dsl_sample_fetch_accel>:
{
    6c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lsm6dsl_data *data = dev->data;
    6c10:	68c4      	ldr	r4, [r0, #12]
	if (data->hw_tf->read_data(dev, LSM6DSL_REG_OUTX_L_XL,
    6c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6c14:	466a      	mov	r2, sp
    6c16:	681d      	ldr	r5, [r3, #0]
    6c18:	2128      	movs	r1, #40	; 0x28
    6c1a:	2306      	movs	r3, #6
    6c1c:	47a8      	blx	r5
    6c1e:	2800      	cmp	r0, #0
    6c20:	db1a      	blt.n	6c58 <lsm6dsl_sample_fetch_accel+0x4a>
				((uint16_t)(buf[1]) << 8));
    6c22:	f89d 2001 	ldrb.w	r2, [sp, #1]
	data->accel_sample_x = (int16_t)((uint16_t)(buf[0]) |
    6c26:	f89d 3000 	ldrb.w	r3, [sp]
    6c2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6c2e:	b21b      	sxth	r3, r3
    6c30:	6063      	str	r3, [r4, #4]
				((uint16_t)(buf[3]) << 8));
    6c32:	f89d 2003 	ldrb.w	r2, [sp, #3]
	data->accel_sample_y = (int16_t)((uint16_t)(buf[2]) |
    6c36:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6c3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6c3e:	b21b      	sxth	r3, r3
    6c40:	60a3      	str	r3, [r4, #8]
				((uint16_t)(buf[5]) << 8));
    6c42:	f89d 2005 	ldrb.w	r2, [sp, #5]
	data->accel_sample_z = (int16_t)((uint16_t)(buf[4]) |
    6c46:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6c4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6c4e:	b21b      	sxth	r3, r3
    6c50:	60e3      	str	r3, [r4, #12]
	return 0;
    6c52:	2000      	movs	r0, #0
}
    6c54:	b003      	add	sp, #12
    6c56:	bd30      	pop	{r4, r5, pc}
		return -EIO;
    6c58:	f06f 0004 	mvn.w	r0, #4
    6c5c:	e7fa      	b.n	6c54 <lsm6dsl_sample_fetch_accel+0x46>

00006c5e <lsm6dsl_sample_fetch_gyro>:
{
    6c5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct lsm6dsl_data *data = dev->data;
    6c60:	68c4      	ldr	r4, [r0, #12]
	if (data->hw_tf->read_data(dev, LSM6DSL_REG_OUTX_L_G,
    6c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6c64:	466a      	mov	r2, sp
    6c66:	681d      	ldr	r5, [r3, #0]
    6c68:	2122      	movs	r1, #34	; 0x22
    6c6a:	2306      	movs	r3, #6
    6c6c:	47a8      	blx	r5
    6c6e:	2800      	cmp	r0, #0
    6c70:	db1a      	blt.n	6ca8 <lsm6dsl_sample_fetch_gyro+0x4a>
				((uint16_t)(buf[1]) << 8));
    6c72:	f89d 2001 	ldrb.w	r2, [sp, #1]
	data->gyro_sample_x = (int16_t)((uint16_t)(buf[0]) |
    6c76:	f89d 3000 	ldrb.w	r3, [sp]
    6c7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6c7e:	b21b      	sxth	r3, r3
				((uint16_t)(buf[3]) << 8));
    6c80:	f89d 2003 	ldrb.w	r2, [sp, #3]
	data->gyro_sample_x = (int16_t)((uint16_t)(buf[0]) |
    6c84:	6163      	str	r3, [r4, #20]
	data->gyro_sample_y = (int16_t)((uint16_t)(buf[2]) |
    6c86:	f89d 3002 	ldrb.w	r3, [sp, #2]
    6c8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6c8e:	b21b      	sxth	r3, r3
				((uint16_t)(buf[5]) << 8));
    6c90:	f89d 2005 	ldrb.w	r2, [sp, #5]
	data->gyro_sample_y = (int16_t)((uint16_t)(buf[2]) |
    6c94:	61a3      	str	r3, [r4, #24]
	data->gyro_sample_z = (int16_t)((uint16_t)(buf[4]) |
    6c96:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6c9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6c9e:	b21b      	sxth	r3, r3
    6ca0:	61e3      	str	r3, [r4, #28]
	return 0;
    6ca2:	2000      	movs	r0, #0
}
    6ca4:	b003      	add	sp, #12
    6ca6:	bd30      	pop	{r4, r5, pc}
		return -EIO;
    6ca8:	f06f 0004 	mvn.w	r0, #4
    6cac:	e7fa      	b.n	6ca4 <lsm6dsl_sample_fetch_gyro+0x46>

00006cae <lsm6dsl_sample_fetch>:
	switch (chan) {
    6cae:	2907      	cmp	r1, #7
{
    6cb0:	b510      	push	{r4, lr}
    6cb2:	4604      	mov	r4, r0
	switch (chan) {
    6cb4:	d00a      	beq.n	6ccc <lsm6dsl_sample_fetch+0x1e>
    6cb6:	2938      	cmp	r1, #56	; 0x38
    6cb8:	d005      	beq.n	6cc6 <lsm6dsl_sample_fetch+0x18>
    6cba:	2903      	cmp	r1, #3
    6cbc:	d109      	bne.n	6cd2 <lsm6dsl_sample_fetch+0x24>
		lsm6dsl_sample_fetch_accel(dev);
    6cbe:	f7ff ffa6 	bl	6c0e <lsm6dsl_sample_fetch_accel>
		lsm6dsl_sample_fetch_gyro(dev);
    6cc2:	2000      	movs	r0, #0
}
    6cc4:	bd10      	pop	{r4, pc}
		lsm6dsl_sample_fetch_accel(dev);
    6cc6:	f7ff ffa2 	bl	6c0e <lsm6dsl_sample_fetch_accel>
		lsm6dsl_sample_fetch_gyro(dev);
    6cca:	4620      	mov	r0, r4
    6ccc:	f7ff ffc7 	bl	6c5e <lsm6dsl_sample_fetch_gyro>
    6cd0:	e7f7      	b.n	6cc2 <lsm6dsl_sample_fetch+0x14>
	switch (chan) {
    6cd2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6cd6:	e7f5      	b.n	6cc4 <lsm6dsl_sample_fetch+0x16>

00006cd8 <lsm6dsl_channel_get>:
	switch (chan) {
    6cd8:	2903      	cmp	r1, #3
{
    6cda:	b570      	push	{r4, r5, r6, lr}
	struct lsm6dsl_data *data = dev->data;
    6cdc:	68c5      	ldr	r5, [r0, #12]
{
    6cde:	4614      	mov	r4, r2
	switch (chan) {
    6ce0:	d905      	bls.n	6cee <lsm6dsl_channel_get+0x16>
    6ce2:	1f0b      	subs	r3, r1, #4
    6ce4:	2b03      	cmp	r3, #3
    6ce6:	d922      	bls.n	6d2e <lsm6dsl_channel_get+0x56>
    6ce8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6cec:	e00d      	b.n	6d0a <lsm6dsl_channel_get+0x32>
	return lsm6dsl_accel_get_channel(chan, val, data,
    6cee:	692e      	ldr	r6, [r5, #16]
	switch (chan) {
    6cf0:	2902      	cmp	r1, #2
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
    6cf2:	4632      	mov	r2, r6
	switch (chan) {
    6cf4:	d00a      	beq.n	6d0c <lsm6dsl_channel_get+0x34>
    6cf6:	2903      	cmp	r1, #3
    6cf8:	d00a      	beq.n	6d10 <lsm6dsl_channel_get+0x38>
    6cfa:	2901      	cmp	r1, #1
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
    6cfc:	bf14      	ite	ne
    6cfe:	6869      	ldrne	r1, [r5, #4]
		lsm6dsl_accel_convert(val, data->accel_sample_y, sensitivity);
    6d00:	68a9      	ldreq	r1, [r5, #8]
    6d02:	4620      	mov	r0, r4
		lsm6dsl_accel_convert(val + 2, data->accel_sample_z,
    6d04:	f7fa fb74 	bl	13f0 <lsm6dsl_accel_convert>
	return 0;
    6d08:	2000      	movs	r0, #0
}
    6d0a:	bd70      	pop	{r4, r5, r6, pc}
		lsm6dsl_accel_convert(val, data->accel_sample_z, sensitivity);
    6d0c:	68e9      	ldr	r1, [r5, #12]
    6d0e:	e7f8      	b.n	6d02 <lsm6dsl_channel_get+0x2a>
		lsm6dsl_accel_convert(val, data->accel_sample_x, sensitivity);
    6d10:	6869      	ldr	r1, [r5, #4]
    6d12:	4620      	mov	r0, r4
    6d14:	f7fa fb6c 	bl	13f0 <lsm6dsl_accel_convert>
		lsm6dsl_accel_convert(val + 1, data->accel_sample_y,
    6d18:	68a9      	ldr	r1, [r5, #8]
    6d1a:	4632      	mov	r2, r6
    6d1c:	f104 0008 	add.w	r0, r4, #8
    6d20:	f7fa fb66 	bl	13f0 <lsm6dsl_accel_convert>
		lsm6dsl_accel_convert(val + 2, data->accel_sample_z,
    6d24:	68e9      	ldr	r1, [r5, #12]
    6d26:	4632      	mov	r2, r6
    6d28:	f104 0010 	add.w	r0, r4, #16
    6d2c:	e7ea      	b.n	6d04 <lsm6dsl_channel_get+0x2c>
	switch (chan) {
    6d2e:	2906      	cmp	r1, #6
    6d30:	d009      	beq.n	6d46 <lsm6dsl_channel_get+0x6e>
    6d32:	2907      	cmp	r1, #7
    6d34:	d009      	beq.n	6d4a <lsm6dsl_channel_get+0x72>
    6d36:	2905      	cmp	r1, #5
		lsm6dsl_gyro_convert(val, data->gyro_sample_x, sensitivity);
    6d38:	bf14      	ite	ne
    6d3a:	6969      	ldrne	r1, [r5, #20]
		lsm6dsl_gyro_convert(val, data->gyro_sample_y, sensitivity);
    6d3c:	69a9      	ldreq	r1, [r5, #24]
		lsm6dsl_gyro_convert(val, data->gyro_sample_z, sensitivity);
    6d3e:	4620      	mov	r0, r4
		lsm6dsl_gyro_convert(val + 2, data->gyro_sample_z, sensitivity);
    6d40:	f7fa fb8e 	bl	1460 <lsm6dsl_gyro_convert.constprop.0>
    6d44:	e7e0      	b.n	6d08 <lsm6dsl_channel_get+0x30>
		lsm6dsl_gyro_convert(val, data->gyro_sample_z, sensitivity);
    6d46:	69e9      	ldr	r1, [r5, #28]
    6d48:	e7f9      	b.n	6d3e <lsm6dsl_channel_get+0x66>
		lsm6dsl_gyro_convert(val, data->gyro_sample_x, sensitivity);
    6d4a:	4610      	mov	r0, r2
    6d4c:	6969      	ldr	r1, [r5, #20]
    6d4e:	f7fa fb87 	bl	1460 <lsm6dsl_gyro_convert.constprop.0>
		lsm6dsl_gyro_convert(val + 1, data->gyro_sample_y, sensitivity);
    6d52:	69a9      	ldr	r1, [r5, #24]
    6d54:	f104 0008 	add.w	r0, r4, #8
    6d58:	f7fa fb82 	bl	1460 <lsm6dsl_gyro_convert.constprop.0>
		lsm6dsl_gyro_convert(val + 2, data->gyro_sample_z, sensitivity);
    6d5c:	69e9      	ldr	r1, [r5, #28]
    6d5e:	f104 0010 	add.w	r0, r4, #16
    6d62:	e7ed      	b.n	6d40 <lsm6dsl_channel_get+0x68>

00006d64 <lsm6dsl_i2c_write_data>:
{
    6d64:	b530      	push	{r4, r5, lr}
    6d66:	4604      	mov	r4, r0
    6d68:	b089      	sub	sp, #36	; 0x24
    6d6a:	461d      	mov	r5, r3
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
    6d6c:	68c3      	ldr	r3, [r0, #12]
    6d6e:	6818      	ldr	r0, [r3, #0]
    6d70:	6863      	ldr	r3, [r4, #4]
    6d72:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
    6d76:	f10d 0107 	add.w	r1, sp, #7
    6d7a:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
    6d7c:	2101      	movs	r1, #1
    6d7e:	891b      	ldrh	r3, [r3, #8]
    6d80:	9103      	str	r1, [sp, #12]
    6d82:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
    6d86:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6d88:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
    6d8a:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6d8e:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    6d92:	6881      	ldr	r1, [r0, #8]
    6d94:	684c      	ldr	r4, [r1, #4]
    6d96:	a902      	add	r1, sp, #8
    6d98:	47a0      	blx	r4
}
    6d9a:	b009      	add	sp, #36	; 0x24
    6d9c:	bd30      	pop	{r4, r5, pc}

00006d9e <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
    6d9e:	b510      	push	{r4, lr}
    6da0:	b086      	sub	sp, #24
	msg[0].buf = (uint8_t *)write_buf;
    6da2:	9200      	str	r2, [sp, #0]
	msg[1].buf = (uint8_t *)read_buf;
    6da4:	9303      	str	r3, [sp, #12]
	msg[0].len = num_write;
    6da6:	2201      	movs	r2, #1
	msg[1].len = num_read;
    6da8:	9b08      	ldr	r3, [sp, #32]
	msg[0].len = num_write;
    6daa:	9201      	str	r2, [sp, #4]
	msg[1].len = num_read;
    6dac:	9304      	str	r3, [sp, #16]
	msg[0].flags = I2C_MSG_WRITE;
    6dae:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6db0:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    6db2:	f88d 2008 	strb.w	r2, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    6db6:	f88d 3014 	strb.w	r3, [sp, #20]
	return api->transfer(dev, msgs, num_msgs, addr);
    6dba:	6883      	ldr	r3, [r0, #8]
    6dbc:	2202      	movs	r2, #2
    6dbe:	685c      	ldr	r4, [r3, #4]
    6dc0:	460b      	mov	r3, r1
    6dc2:	4669      	mov	r1, sp
    6dc4:	47a0      	blx	r4
}
    6dc6:	b006      	add	sp, #24
    6dc8:	bd10      	pop	{r4, pc}

00006dca <lsm6dsl_i2c_read_data>:
{
    6dca:	b530      	push	{r4, r5, lr}
    6dcc:	4604      	mov	r4, r0
    6dce:	460d      	mov	r5, r1
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
    6dd0:	68c1      	ldr	r1, [r0, #12]
{
    6dd2:	b085      	sub	sp, #20
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
    6dd4:	6808      	ldr	r0, [r1, #0]
    6dd6:	6861      	ldr	r1, [r4, #4]
    6dd8:	f88d 500f 	strb.w	r5, [sp, #15]
    6ddc:	8909      	ldrh	r1, [r1, #8]
    6dde:	9300      	str	r3, [sp, #0]
	return i2c_write_read(dev, dev_addr,
    6de0:	4613      	mov	r3, r2
    6de2:	f10d 020f 	add.w	r2, sp, #15
    6de6:	f7ff ffda 	bl	6d9e <i2c_write_read.constprop.0>
}
    6dea:	b005      	add	sp, #20
    6dec:	bd30      	pop	{r4, r5, pc}

00006dee <lsm6dsl_i2c_update_reg>:
{
    6dee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6df2:	461f      	mov	r7, r3
	return i2c_reg_update_byte(data->bus,
    6df4:	68c3      	ldr	r3, [r0, #12]
    6df6:	681e      	ldr	r6, [r3, #0]
				  cfg->bus_cfg.i2c_slv_addr,
    6df8:	6843      	ldr	r3, [r0, #4]
{
    6dfa:	b089      	sub	sp, #36	; 0x24
    6dfc:	f893 9008 	ldrb.w	r9, [r3, #8]
    6e00:	f88d 1014 	strb.w	r1, [sp, #20]
	return i2c_write_read(dev, dev_addr,
    6e04:	f04f 0801 	mov.w	r8, #1
    6e08:	460d      	mov	r5, r1
    6e0a:	4614      	mov	r4, r2
    6e0c:	f8cd 8000 	str.w	r8, [sp]
    6e10:	f10d 030f 	add.w	r3, sp, #15
    6e14:	aa05      	add	r2, sp, #20
    6e16:	4649      	mov	r1, r9
    6e18:	4630      	mov	r0, r6
    6e1a:	f7ff ffc0 	bl	6d9e <i2c_write_read.constprop.0>
	if (rc != 0) {
    6e1e:	b9c0      	cbnz	r0, 6e52 <lsm6dsl_i2c_update_reg+0x64>
	new_value = (old_value & ~mask) | (value & mask);
    6e20:	f89d 300f 	ldrb.w	r3, [sp, #15]
    6e24:	ea23 0104 	bic.w	r1, r3, r4
    6e28:	403c      	ands	r4, r7
    6e2a:	430c      	orrs	r4, r1
	if (new_value == old_value) {
    6e2c:	42a3      	cmp	r3, r4
    6e2e:	d010      	beq.n	6e52 <lsm6dsl_i2c_update_reg+0x64>
	msg.buf = (uint8_t *)buf;
    6e30:	ab04      	add	r3, sp, #16
    6e32:	9305      	str	r3, [sp, #20]
	msg.len = num_bytes;
    6e34:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    6e36:	f88d 5010 	strb.w	r5, [sp, #16]
    6e3a:	f88d 4011 	strb.w	r4, [sp, #17]
	msg.len = num_bytes;
    6e3e:	9306      	str	r3, [sp, #24]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    6e40:	f88d 301c 	strb.w	r3, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    6e44:	68b3      	ldr	r3, [r6, #8]
    6e46:	4642      	mov	r2, r8
    6e48:	685c      	ldr	r4, [r3, #4]
    6e4a:	a905      	add	r1, sp, #20
    6e4c:	464b      	mov	r3, r9
    6e4e:	4630      	mov	r0, r6
    6e50:	47a0      	blx	r4
}
    6e52:	b009      	add	sp, #36	; 0x24
    6e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00006e58 <lsm6dsl_i2c_read_reg>:
{
    6e58:	b530      	push	{r4, r5, lr}
    6e5a:	4613      	mov	r3, r2
    6e5c:	4604      	mov	r4, r0
	return i2c_reg_read_byte(data->bus,
    6e5e:	68c2      	ldr	r2, [r0, #12]
    6e60:	6810      	ldr	r0, [r2, #0]
    6e62:	6862      	ldr	r2, [r4, #4]
{
    6e64:	b085      	sub	sp, #20
    6e66:	460d      	mov	r5, r1
	return i2c_reg_read_byte(data->bus,
    6e68:	8911      	ldrh	r1, [r2, #8]
    6e6a:	f88d 500f 	strb.w	r5, [sp, #15]
	return i2c_write_read(dev, dev_addr,
    6e6e:	2201      	movs	r2, #1
    6e70:	9200      	str	r2, [sp, #0]
    6e72:	f10d 020f 	add.w	r2, sp, #15
    6e76:	f7ff ff92 	bl	6d9e <i2c_write_read.constprop.0>
}
    6e7a:	b005      	add	sp, #20
    6e7c:	bd30      	pop	{r4, r5, pc}

00006e7e <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6e7e:	0413      	lsls	r3, r2, #16
{
    6e80:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
    6e82:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6e84:	d507      	bpl.n	6e96 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    6e86:	68c5      	ldr	r5, [r0, #12]
    6e88:	2301      	movs	r3, #1
    6e8a:	682d      	ldr	r5, [r5, #0]
    6e8c:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    6e8e:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    6e90:	bf18      	it	ne
    6e92:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6e96:	69a4      	ldr	r4, [r4, #24]
    6e98:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
    6e9c:	46a4      	mov	ip, r4
    6e9e:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
    6ea2:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    6ea4:	4760      	bx	ip

00006ea6 <gpio_pin_interrupt_configure>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    6ea6:	f7ff bfea 	b.w	6e7e <z_impl_gpio_pin_interrupt_configure>

00006eaa <lsm6dsl_thread>:
{
    6eaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eac:	4604      	mov	r4, r0
		k_sem_take(&drv_data->gpio_sem, K_FOREVER);
    6eae:	f500 67a0 	add.w	r7, r0, #1280	; 0x500
	return z_impl_k_sem_take(sem, timeout);
    6eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6eba:	4638      	mov	r0, r7
    6ebc:	f7fe fc50 	bl	5760 <z_impl_k_sem_take>
		lsm6dsl_thread_cb(drv_data->dev);
    6ec0:	6b20      	ldr	r0, [r4, #48]	; 0x30
	struct lsm6dsl_data *drv_data = dev->data;
    6ec2:	68c5      	ldr	r5, [r0, #12]
	const struct lsm6dsl_config *config = dev->config;
    6ec4:	6846      	ldr	r6, [r0, #4]
	if (drv_data->data_ready_handler != NULL) {
    6ec6:	6cab      	ldr	r3, [r5, #72]	; 0x48
    6ec8:	b113      	cbz	r3, 6ed0 <lsm6dsl_thread+0x26>
		drv_data->data_ready_handler(dev,
    6eca:	f105 0144 	add.w	r1, r5, #68	; 0x44
    6ece:	4798      	blx	r3
	gpio_pin_interrupt_configure(drv_data->gpio,
    6ed0:	7c31      	ldrb	r1, [r6, #16]
    6ed2:	6b68      	ldr	r0, [r5, #52]	; 0x34
    6ed4:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    6ed8:	f7ff ffe5 	bl	6ea6 <gpio_pin_interrupt_configure>
	while (1) {
    6edc:	e7e9      	b.n	6eb2 <lsm6dsl_thread+0x8>

00006ede <lsm6dsl_gpio_callback>:
	const struct lsm6dsl_config *config = drv_data->dev->config;
    6ede:	f851 3c08 	ldr.w	r3, [r1, #-8]
{
    6ee2:	b510      	push	{r4, lr}
	handle_irq(drv_data, config->irq_pin);
    6ee4:	685b      	ldr	r3, [r3, #4]
{
    6ee6:	460c      	mov	r4, r1
	gpio_pin_interrupt_configure(drv_data->gpio,
    6ee8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    6eec:	7c19      	ldrb	r1, [r3, #16]
    6eee:	f854 0c04 	ldr.w	r0, [r4, #-4]
    6ef2:	f7ff ffd8 	bl	6ea6 <gpio_pin_interrupt_configure>
	z_impl_k_sem_give(sem);
    6ef6:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
}
    6efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6efe:	f7fe bc0f 	b.w	5720 <z_impl_k_sem_give>

00006f02 <lsm6dsl_trigger_set>:
{
    6f02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct lsm6dsl_data *drv_data = dev->data;
    6f04:	68c4      	ldr	r4, [r0, #12]
	const struct lsm6dsl_config *config = dev->config;
    6f06:	6845      	ldr	r5, [r0, #4]
	if (!drv_data->gpio) {
    6f08:	6b60      	ldr	r0, [r4, #52]	; 0x34
{
    6f0a:	460f      	mov	r7, r1
    6f0c:	4616      	mov	r6, r2
	if (!drv_data->gpio) {
    6f0e:	2800      	cmp	r0, #0
    6f10:	d030      	beq.n	6f74 <lsm6dsl_trigger_set+0x72>
	gpio_pin_interrupt_configure(drv_data->gpio,
    6f12:	7c29      	ldrb	r1, [r5, #16]
    6f14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    6f18:	f7ff ffc5 	bl	6ea6 <gpio_pin_interrupt_configure>
	drv_data->data_ready_handler = handler;
    6f1c:	64a6      	str	r6, [r4, #72]	; 0x48
	if (handler == NULL) {
    6f1e:	b916      	cbnz	r6, 6f26 <lsm6dsl_trigger_set+0x24>
	return 0;
    6f20:	2000      	movs	r0, #0
}
    6f22:	b003      	add	sp, #12
    6f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	drv_data->data_ready_trigger = *trig;
    6f26:	6838      	ldr	r0, [r7, #0]
    6f28:	6460      	str	r0, [r4, #68]	; 0x44
	gpio_pin_interrupt_configure(drv_data->gpio,
    6f2a:	7c29      	ldrb	r1, [r5, #16]
    6f2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6f2e:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    6f32:	f7ff ffb8 	bl	6ea6 <gpio_pin_interrupt_configure>
	if (gpio_pin_get(drv_data->gpio, config->irq_pin) > 0) {
    6f36:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6f38:	692e      	ldr	r6, [r5, #16]
	const struct gpio_driver_data *const data =
    6f3a:	68c7      	ldr	r7, [r0, #12]
	return api->port_get_raw(port, value);
    6f3c:	6883      	ldr	r3, [r0, #8]
    6f3e:	a901      	add	r1, sp, #4
    6f40:	685b      	ldr	r3, [r3, #4]
    6f42:	4798      	blx	r3
	if (ret == 0) {
    6f44:	b948      	cbnz	r0, 6f5a <lsm6dsl_trigger_set+0x58>
		*value ^= data->invert;
    6f46:	683b      	ldr	r3, [r7, #0]
    6f48:	9a01      	ldr	r2, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    6f4a:	b2f6      	uxtb	r6, r6
		*value ^= data->invert;
    6f4c:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    6f4e:	2301      	movs	r3, #1
    6f50:	40b3      	lsls	r3, r6
    6f52:	421a      	tst	r2, r3
    6f54:	bf14      	ite	ne
    6f56:	2001      	movne	r0, #1
    6f58:	2000      	moveq	r0, #0
    6f5a:	2800      	cmp	r0, #0
    6f5c:	dde0      	ble.n	6f20 <lsm6dsl_trigger_set+0x1e>
	gpio_pin_interrupt_configure(drv_data->gpio,
    6f5e:	7c29      	ldrb	r1, [r5, #16]
    6f60:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    6f66:	f7ff ff9e 	bl	6ea6 <gpio_pin_interrupt_configure>
    6f6a:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
    6f6e:	f7fe fbd7 	bl	5720 <z_impl_k_sem_give>
    6f72:	e7d5      	b.n	6f20 <lsm6dsl_trigger_set+0x1e>
		return -ENOTSUP;
    6f74:	f06f 0022 	mvn.w	r0, #34	; 0x22
    6f78:	e7d3      	b.n	6f22 <lsm6dsl_trigger_set+0x20>

00006f7a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6f7a:	6843      	ldr	r3, [r0, #4]
    6f7c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6f7e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6f82:	05d2      	lsls	r2, r2, #23
    6f84:	d518      	bpl.n	6fb8 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f86:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6f8a:	b1aa      	cbz	r2, 6fb8 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    6f8c:	f04f 0120 	mov.w	r1, #32
    6f90:	f3ef 8211 	mrs	r2, BASEPRI
    6f94:	f381 8811 	msr	BASEPRI, r1
    6f98:	f3bf 8f6f 	isb	sy
    6f9c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6fa0:	b131      	cbz	r1, 6fb0 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6fa2:	2100      	movs	r1, #0
    6fa4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6fa8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6fac:	2101      	movs	r1, #1
    6fae:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6fb0:	f382 8811 	msr	BASEPRI, r2
    6fb4:	f3bf 8f6f 	isb	sy
}
    6fb8:	4770      	bx	lr

00006fba <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    6fba:	68c2      	ldr	r2, [r0, #12]
{
    6fbc:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    6fbe:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6fc2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6fc6:	2000      	movs	r0, #0
    6fc8:	4770      	bx	lr

00006fca <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6fca:	6843      	ldr	r3, [r0, #4]
    6fcc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6fce:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6fd2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6fd6:	4770      	bx	lr

00006fd8 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    6fd8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6fda:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6fdc:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6fe0:	b938      	cbnz	r0, 6ff2 <is_tx_ready+0x1a>
    6fe2:	7992      	ldrb	r2, [r2, #6]
    6fe4:	b932      	cbnz	r2, 6ff4 <is_tx_ready+0x1c>
    6fe6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    6fea:	3800      	subs	r0, #0
    6fec:	bf18      	it	ne
    6fee:	2001      	movne	r0, #1
    6ff0:	4770      	bx	lr
    6ff2:	2001      	movs	r0, #1
}
    6ff4:	4770      	bx	lr

00006ff6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    6ff6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    6ff8:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    6ffa:	681b      	ldr	r3, [r3, #0]
    6ffc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    7000:	b148      	cbz	r0, 7016 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    7002:	7c52      	ldrb	r2, [r2, #17]
    7004:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7006:	2000      	movs	r0, #0
    7008:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    700c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7010:	2201      	movs	r2, #1
    7012:	601a      	str	r2, [r3, #0]
	return 0;
    7014:	4770      	bx	lr
		return -1;
    7016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    701a:	4770      	bx	lr

0000701c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    701c:	4700      	bx	r0

0000701e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    701e:	f000 b99a 	b.w	7356 <z_impl_k_busy_wait>

00007022 <nrfx_clock_enable>:
{
    7022:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7024:	2000      	movs	r0, #0
    7026:	f7fc f825 	bl	3074 <arch_irq_is_enabled>
    702a:	b918      	cbnz	r0, 7034 <nrfx_clock_enable+0x12>
}
    702c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7030:	f7fc b810 	b.w	3054 <arch_irq_enable>
    7034:	bd08      	pop	{r3, pc}

00007036 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
    7036:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
    7038:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    703a:	6b48      	ldr	r0, [r1, #52]	; 0x34
    703c:	4298      	cmp	r0, r3
{
    703e:	b510      	push	{r4, lr}
    7040:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
    7044:	d205      	bcs.n	7052 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    7046:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
    7048:	5c09      	ldrb	r1, [r1, r0]
    704a:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
    704e:	4618      	mov	r0, r3
}
    7050:	e004      	b.n	705c <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
    7052:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
    7056:	b110      	cbz	r0, 705e <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7058:	61d3      	str	r3, [r2, #28]
            return false;
    705a:	2000      	movs	r0, #0
}
    705c:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    705e:	6a0c      	ldr	r4, [r1, #32]
    7060:	0664      	lsls	r4, r4, #25
    7062:	d503      	bpl.n	706c <twi_send_byte+0x36>
    7064:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    7066:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    706a:	e7f7      	b.n	705c <twi_send_byte+0x26>
    706c:	6153      	str	r3, [r2, #20]
    706e:	e7ee      	b.n	704e <twi_send_byte+0x18>

00007070 <twi_transfer>:
{
    7070:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7072:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
    7076:	4604      	mov	r4, r0
    7078:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    707a:	b12e      	cbz	r6, 7088 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    707c:	2300      	movs	r3, #0
    707e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    7082:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    7086:	2601      	movs	r6, #1
    if (p_cb->error)
    7088:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    708c:	b320      	cbz	r0, 70d8 <twi_transfer+0x68>
    708e:	2300      	movs	r3, #0
    7090:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    7094:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    7098:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    709c:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
    70a0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    70a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
    70a8:	2e00      	cmp	r6, #0
    70aa:	d068      	beq.n	717e <twi_transfer+0x10e>
        if (!p_cb->error)
    70ac:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    70b0:	2300      	movs	r3, #0
    70b2:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
    70b6:	bb88      	cbnz	r0, 711c <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    70b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    70ba:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    70bc:	429a      	cmp	r2, r3
        return false;
    70be:	bf1c      	itt	ne
    70c0:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    70c2:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    70c4:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    70c8:	bf1c      	itt	ne
    70ca:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    70ce:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
    70d2:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
    70d6:	e022      	b.n	711e <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70d8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    70dc:	b142      	cbz	r2, 70f0 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70de:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
    70e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70e6:	2301      	movs	r3, #1
    70e8:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
    70ea:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    70ee:	e7db      	b.n	70a8 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    70f0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    70f4:	b1a3      	cbz	r3, 7120 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70f6:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
    70fa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    70fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    7100:	3301      	adds	r3, #1
    7102:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7104:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    7108:	b113      	cbz	r3, 7110 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    710a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
    710e:	e7e8      	b.n	70e2 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
    7110:	4629      	mov	r1, r5
    7112:	4620      	mov	r0, r4
    7114:	f7ff ff8f 	bl	7036 <twi_send_byte>
    7118:	2800      	cmp	r0, #0
    711a:	d1c5      	bne.n	70a8 <twi_transfer+0x38>
                    return false;
    711c:	2000      	movs	r0, #0
}
    711e:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7120:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    7124:	2a00      	cmp	r2, #0
    7126:	d0bf      	beq.n	70a8 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7128:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    712c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7130:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    7134:	b112      	cbz	r2, 713c <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7136:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    713a:	e7d2      	b.n	70e2 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    713c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    713e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7140:	4293      	cmp	r3, r2
    7142:	d2b1      	bcs.n	70a8 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    7144:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    7146:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
    714a:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
    714c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    714e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    7150:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7152:	1e51      	subs	r1, r2, #1
    7154:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
    7156:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7158:	d108      	bne.n	716c <twi_transfer+0xfc>
    715a:	6a29      	ldr	r1, [r5, #32]
    715c:	0649      	lsls	r1, r1, #25
    715e:	d410      	bmi.n	7182 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
    7160:	2302      	movs	r3, #2
    7162:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7166:	2301      	movs	r3, #1
    7168:	6223      	str	r3, [r4, #32]
    716a:	e79d      	b.n	70a8 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    716c:	4293      	cmp	r3, r2
    716e:	d1fa      	bne.n	7166 <twi_transfer+0xf6>
    7170:	6a2b      	ldr	r3, [r5, #32]
    7172:	065b      	lsls	r3, r3, #25
    7174:	d598      	bpl.n	70a8 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    7176:	2302      	movs	r3, #2
    7178:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
    717c:	e7cf      	b.n	711e <twi_transfer+0xae>
    return true;
    717e:	2001      	movs	r0, #1
    7180:	e7cd      	b.n	711e <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7182:	4293      	cmp	r3, r2
    7184:	d1ef      	bne.n	7166 <twi_transfer+0xf6>
    7186:	e7f6      	b.n	7176 <twi_transfer+0x106>

00007188 <arch_system_halt>:
	__asm__ volatile(
    7188:	f04f 0220 	mov.w	r2, #32
    718c:	f3ef 8311 	mrs	r3, BASEPRI
    7190:	f382 8811 	msr	BASEPRI, r2
    7194:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    7198:	e7fe      	b.n	7198 <arch_system_halt+0x10>

0000719a <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    719a:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    719c:	f7ff fff4 	bl	7188 <arch_system_halt>

000071a0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    71a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71a2:	4605      	mov	r5, r0
    71a4:	460e      	mov	r6, r1
    71a6:	f04f 0320 	mov.w	r3, #32
    71aa:	f3ef 8711 	mrs	r7, BASEPRI
    71ae:	f383 8811 	msr	BASEPRI, r3
    71b2:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    71b6:	f7fe faad 	bl	5714 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    71ba:	4631      	mov	r1, r6
    71bc:	4604      	mov	r4, r0
    71be:	4628      	mov	r0, r5
    71c0:	f7ff ffeb 	bl	719a <k_sys_fatal_error_handler>
	__asm__ volatile(
    71c4:	f387 8811 	msr	BASEPRI, r7
    71c8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    71cc:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    71ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    71d2:	f7fc b949 	b.w	3468 <z_impl_k_thread_abort>

000071d6 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
    71d6:	f7ff b843 	b.w	6260 <z_clock_idle_exit>

000071da <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    71da:	4603      	mov	r3, r0
    71dc:	b920      	cbnz	r0, 71e8 <z_reschedule_irqlock+0xe>
    71de:	f3ef 8205 	mrs	r2, IPSR
    71e2:	b90a      	cbnz	r2, 71e8 <z_reschedule_irqlock+0xe>
    71e4:	f7fb bee2 	b.w	2fac <arch_swap>
    71e8:	f383 8811 	msr	BASEPRI, r3
    71ec:	f3bf 8f6f 	isb	sy
}
    71f0:	4770      	bx	lr

000071f2 <z_reschedule_unlocked>:
	__asm__ volatile(
    71f2:	f04f 0320 	mov.w	r3, #32
    71f6:	f3ef 8011 	mrs	r0, BASEPRI
    71fa:	f383 8811 	msr	BASEPRI, r3
    71fe:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7202:	f7ff bfea 	b.w	71da <z_reschedule_irqlock>

00007206 <unpend_thread_no_timeout>:
{
    7206:	4601      	mov	r1, r0
    7208:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    720a:	6880      	ldr	r0, [r0, #8]
    720c:	f7fd ff96 	bl	513c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7210:	7b4b      	ldrb	r3, [r1, #13]
    7212:	f023 0302 	bic.w	r3, r3, #2
    7216:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    7218:	2300      	movs	r3, #0
    721a:	608b      	str	r3, [r1, #8]
}
    721c:	bd08      	pop	{r3, pc}

0000721e <z_priq_dumb_best>:
{
    721e:	4603      	mov	r3, r0
	return list->head == list;
    7220:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7222:	4283      	cmp	r3, r0
    7224:	d003      	beq.n	722e <z_priq_dumb_best+0x10>
	if (n != NULL) {
    7226:	2800      	cmp	r0, #0
    7228:	bf38      	it	cc
    722a:	2000      	movcc	r0, #0
    722c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    722e:	2000      	movs	r0, #0
}
    7230:	4770      	bx	lr

00007232 <z_ready_thread>:
{
    7232:	b510      	push	{r4, lr}
    7234:	f04f 0320 	mov.w	r3, #32
    7238:	f3ef 8411 	mrs	r4, BASEPRI
    723c:	f383 8811 	msr	BASEPRI, r3
    7240:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    7244:	f7fd ffd4 	bl	51f0 <ready_thread>
	__asm__ volatile(
    7248:	f384 8811 	msr	BASEPRI, r4
    724c:	f3bf 8f6f 	isb	sy
}
    7250:	bd10      	pop	{r4, pc}

00007252 <z_thread_timeout>:
{
    7252:	b570      	push	{r4, r5, r6, lr}
    7254:	4604      	mov	r4, r0
	__asm__ volatile(
    7256:	f04f 0320 	mov.w	r3, #32
    725a:	f3ef 8611 	mrs	r6, BASEPRI
    725e:	f383 8811 	msr	BASEPRI, r3
    7262:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    7266:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    726a:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    726e:	b113      	cbz	r3, 7276 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    7270:	4628      	mov	r0, r5
    7272:	f7ff ffc8 	bl	7206 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7276:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    727a:	f023 0314 	bic.w	r3, r3, #20
    727e:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
    7282:	4628      	mov	r0, r5
    7284:	f7fd ffb4 	bl	51f0 <ready_thread>
	__asm__ volatile(
    7288:	f386 8811 	msr	BASEPRI, r6
    728c:	f3bf 8f6f 	isb	sy
}
    7290:	bd70      	pop	{r4, r5, r6, pc}

00007292 <add_to_waitq_locked>:
{
    7292:	b538      	push	{r3, r4, r5, lr}
    7294:	4604      	mov	r4, r0
    7296:	460d      	mov	r5, r1
	unready_thread(thread);
    7298:	f7fe f932 	bl	5500 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    729c:	7b63      	ldrb	r3, [r4, #13]
    729e:	f043 0302 	orr.w	r3, r3, #2
    72a2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    72a4:	b1c5      	cbz	r5, 72d8 <add_to_waitq_locked+0x46>
	return list->head == list;
    72a6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    72a8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    72aa:	429d      	cmp	r5, r3
    72ac:	bf08      	it	eq
    72ae:	2300      	moveq	r3, #0
    72b0:	2b00      	cmp	r3, #0
    72b2:	bf38      	it	cc
    72b4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    72b6:	b183      	cbz	r3, 72da <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    72b8:	f994 100e 	ldrsb.w	r1, [r4, #14]
    72bc:	f993 200e 	ldrsb.w	r2, [r3, #14]
    72c0:	4291      	cmp	r1, r2
    72c2:	db04      	blt.n	72ce <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    72c4:	686a      	ldr	r2, [r5, #4]
    72c6:	429a      	cmp	r2, r3
    72c8:	d007      	beq.n	72da <add_to_waitq_locked+0x48>
    72ca:	681b      	ldr	r3, [r3, #0]
    72cc:	e7f3      	b.n	72b6 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    72ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    72d0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    72d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    72d6:	605c      	str	r4, [r3, #4]
}
    72d8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    72da:	686b      	ldr	r3, [r5, #4]
    72dc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    72de:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    72e0:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    72e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    72e4:	606c      	str	r4, [r5, #4]
    72e6:	e7f7      	b.n	72d8 <add_to_waitq_locked+0x46>

000072e8 <z_unpend_first_thread>:
{
    72e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    72ea:	f04f 0320 	mov.w	r3, #32
    72ee:	f3ef 8211 	mrs	r2, BASEPRI
    72f2:	f383 8811 	msr	BASEPRI, r3
    72f6:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    72fa:	f7ff ff90 	bl	721e <z_priq_dumb_best>
    72fe:	4604      	mov	r4, r0
	__asm__ volatile(
    7300:	f382 8811 	msr	BASEPRI, r2
    7304:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    7308:	b188      	cbz	r0, 732e <z_unpend_first_thread+0x46>
	__asm__ volatile(
    730a:	f04f 0320 	mov.w	r3, #32
    730e:	f3ef 8511 	mrs	r5, BASEPRI
    7312:	f383 8811 	msr	BASEPRI, r3
    7316:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    731a:	f7ff ff74 	bl	7206 <unpend_thread_no_timeout>
	__asm__ volatile(
    731e:	f385 8811 	msr	BASEPRI, r5
    7322:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    7326:	f104 0018 	add.w	r0, r4, #24
    732a:	f000 f818 	bl	735e <z_abort_timeout>
}
    732e:	4620      	mov	r0, r4
    7330:	bd38      	pop	{r3, r4, r5, pc}

00007332 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
    7332:	b13a      	cbz	r2, 7344 <z_impl_k_sem_init+0x12>
    7334:	428a      	cmp	r2, r1
    7336:	d305      	bcc.n	7344 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    7338:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    733c:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    7340:	2000      	movs	r0, #0
    7342:	4770      	bx	lr
		return -EINVAL;
    7344:	f06f 0015 	mvn.w	r0, #21
}
    7348:	4770      	bx	lr

0000734a <k_is_in_isr>:
    734a:	f3ef 8005 	mrs	r0, IPSR
}
    734e:	3800      	subs	r0, #0
    7350:	bf18      	it	ne
    7352:	2001      	movne	r0, #1
    7354:	4770      	bx	lr

00007356 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    7356:	b108      	cbz	r0, 735c <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    7358:	f7fc b9a0 	b.w	369c <arch_busy_wait>
}
    735c:	4770      	bx	lr

0000735e <z_abort_timeout>:
{
    735e:	b510      	push	{r4, lr}
	__asm__ volatile(
    7360:	f04f 0220 	mov.w	r2, #32
    7364:	f3ef 8411 	mrs	r4, BASEPRI
    7368:	f382 8811 	msr	BASEPRI, r2
    736c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7370:	6803      	ldr	r3, [r0, #0]
    7372:	b13b      	cbz	r3, 7384 <z_abort_timeout+0x26>
			remove_timeout(to);
    7374:	f7fe fb1e 	bl	59b4 <remove_timeout>
			ret = 0;
    7378:	2000      	movs	r0, #0
	__asm__ volatile(
    737a:	f384 8811 	msr	BASEPRI, r4
    737e:	f3bf 8f6f 	isb	sy
}
    7382:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7384:	f06f 0015 	mvn.w	r0, #21
    7388:	e7f7      	b.n	737a <z_abort_timeout+0x1c>

0000738a <z_get_next_timeout_expiry>:
{
    738a:	b510      	push	{r4, lr}
	__asm__ volatile(
    738c:	f04f 0320 	mov.w	r3, #32
    7390:	f3ef 8411 	mrs	r4, BASEPRI
    7394:	f383 8811 	msr	BASEPRI, r3
    7398:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    739c:	f7fe fb24 	bl	59e8 <next_timeout>
	__asm__ volatile(
    73a0:	f384 8811 	msr	BASEPRI, r4
    73a4:	f3bf 8f6f 	isb	sy
}
    73a8:	bd10      	pop	{r4, pc}

000073aa <z_set_timeout_expiry>:
{
    73aa:	b570      	push	{r4, r5, r6, lr}
    73ac:	4604      	mov	r4, r0
    73ae:	460d      	mov	r5, r1
	__asm__ volatile(
    73b0:	f04f 0320 	mov.w	r3, #32
    73b4:	f3ef 8611 	mrs	r6, BASEPRI
    73b8:	f383 8811 	msr	BASEPRI, r3
    73bc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    73c0:	f7fe fb12 	bl	59e8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    73c4:	2801      	cmp	r0, #1
    73c6:	dd05      	ble.n	73d4 <z_set_timeout_expiry+0x2a>
    73c8:	42a0      	cmp	r0, r4
    73ca:	dd03      	ble.n	73d4 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    73cc:	4629      	mov	r1, r5
    73ce:	4620      	mov	r0, r4
    73d0:	f7fb fd70 	bl	2eb4 <z_clock_set_timeout>
	__asm__ volatile(
    73d4:	f386 8811 	msr	BASEPRI, r6
    73d8:	f3bf 8f6f 	isb	sy
}
    73dc:	bd70      	pop	{r4, r5, r6, pc}

000073de <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    73de:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    73e0:	f7fe fc22 	bl	5c28 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    73e4:	bd08      	pop	{r3, pc}

000073e6 <k_heap_init>:
{
    73e6:	b410      	push	{r4}
    73e8:	f100 040c 	add.w	r4, r0, #12
    73ec:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    73f0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    73f2:	f7fe bdb8 	b.w	5f66 <sys_heap_init>

000073f6 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    73f6:	4770      	bx	lr
